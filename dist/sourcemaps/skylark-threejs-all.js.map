{"version":3,"sources":["skylark-threejs-all.js"],"names":["define","exports","undefined","Number","EPSILON","Math","pow","isInteger","value","isFinite","floor","sign","x","Function","prototype","Object","defineProperty","get","this","toString","match","assign","target","TypeError","output","index","arguments","length","source","nextKey","hasOwnProperty","call","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","ACESFilmicToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","EventDispatcher","addEventListener","type","listener","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","slice","i","l","_lut","_Math","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","uuid","toUpperCase","clamp","min","max","euclideanModulo","n","m","mapLinear","a1","a2","b1","b2","lerp","y","t","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","Vector2","Quaternion","z","w","_x","_y","_z","_w","defineProperties","width","set","height","isVector2","setScalar","scalar","setX","setY","setComponent","Error","getComponent","clone","constructor","copy","v","add","console","warn","addVectors","addScalar","s","a","b","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","elements","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","c","cos","sin","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","f","_onChangeCallback","isQuaternion","quaternion","setFromEuler","euler","update","isEuler","order","c1","c2","c3","s1","s2","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","r","angleTo","q","acos","rotateTowards","step","inverse","conjugate","p","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","_vector","Vector3","_quaternion","isVector3","setZ","multiplyVectors","applyEuler","error","applyQuaternion","applyAxisAngle","applyNormalMatrix","applyMatrix4","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","denominator","theta","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","getZ","_canvas","_vector$1","Matrix3","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","setFromMatrix4","applyToBufferAttribute","count","setXYZ","multiplyMatrices","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","g","h","getInverse","matrix","throwOnDegenerate","isMatrix4","t11","t12","t13","det","msg","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","rotation","cx","cy","scale","rotate","translate","ImageUtils","getDataURL","image","canvas","HTMLCanvasElement","src","document","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","name","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","Array","isArray","dispose","transformUv","uv","isVector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","xx","yy","zz","xy","xz","yz","getW","isWebGLRenderTarget","setSize","isWebGLMultisampleRenderTarget","_v1","_m1","Matrix4","_zero","_one","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","lookAt","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","position","x2","y2","z2","wx","wy","wz","decompose","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","_matrix","_quaternion$1","Euler","_order","DefaultOrder","Layers","mask","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","enableAll","toggle","disable","disableAll","test","layers","_object3DId","_v1$1","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","parent","children","DefaultUp","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Scene","background","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","CustomEvent","detail","isObject3D","onBeforeRender","onAfterRender","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","vector","worldToLocal","updateWorldMatrix","isCamera","isLight","object","remove","attach","getObjectById","id","getObjectByProperty","getObjectByName","child","getWorldPosition","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","force","updateParents","updateChildren","geometries","materials","shapes","serialize","library","element","JSON","stringify","isMesh","drawMode","isInstancedMesh","instanceMatrix","isLine","isPoints","geometry","parameters","shape","material","uuids","extractFromCache","cache","values","key","data","recursive","parse","isScene","_points","_vector$2","_box","Box3","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","Infinity","satForAxes","axes","v0","extents","j","p0","p1","p2","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","boundingBox","computeBoundingBox","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","distanceToPoint","clampedPoint","getBoundingSphere","intersect","union","_box$1","Sphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","_vector$3","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_vector1","_vector2","_normalMatrix","Plane","isPlane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","Color","setRGB","hue2rgb","SRGBToLinear","LinearToSRGB","Face3","color","materialIndex","vertexNormals","isColor","vertexColors","setHex","setStyle","hex","setHSL","style","handleAlpha","string","parseFloat","exec","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","NAMES","materialId","Material","blending","side","flatShading","vertexTangents","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","BufferAttribute","itemSize","normalized","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","DirectGeometry","vertices","normals","colors","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","lineDistancesNeedUpdate","lineDistance","fromDirectGeometry","morphAttributesPosition","morphAttribute","isNaN","jl","computeFaceNormals","computeVertexNormals","vA","vB","vC","pA","pB","pC","cb","ab","indices","normalizeNormals","merge","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","keys","attributeData","hasMorphAttributes","attributeArray","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","intersection","setDrawMode","morphTargetDictionary","ml","String","intersects","groupMaterial","faceIndex","fvA","fvB","fvC","isMultiMaterial","fl","faceMaterial","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","vertex","fromBufferGeometry","scope","addFace","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","uvsCopy","k","kl","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","uvs1","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","srcVertexNormal","destVertexNormal","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","__proto__","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Camera","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","uniform","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLRenderTargetCube","renderer","scene","currentRenderTarget","getRenderTarget","setRenderTarget","render","clear","stencil","DataTexture","isWebGLRenderTargetCube","fromEquirectangularTexture","shader","tEquirect","join","isDataTexture","_sphere$1","_vector$5","Frustum","p4","p5","planes","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","shadow","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotShadowMap","spotShadowMatrix","pointLights","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","t2D","cube","tCube","tFlip","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","WebGLAnimation","isAnimating","animationLoop","onAnimationFrame","time","frame","requestAnimationFrame","stop","setAnimationLoop","setContext","WebGLAttributes","gl","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","buffer","delete","bufferType","createBuffer","bindBuffer","bufferData","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","absNumericalSort","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","transparency","isCubeTexture","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","unit","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","info","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","getShaderSource","lines","split","addLineNumbers","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","loopPattern","unrollLoops","loopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","isWebGL2","rendererExtensions","envMapCubeUV","tangentSpaceNormalMap","logarithmicDepthBuffer","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","numMultiviewViews","isRawShaderMaterial","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","toneMapping","toneMappingName","getToneMappingFunction","outputEncoding","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","cachedUniforms","cachedAttributes","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","deleteShader","getUniforms","getAttributes","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","capabilities","programs","floatVertexTextures","maxVertexUniforms","vertexTextures","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","getParameters","shadows","nClipPlanes","nClipIntersection","shaderID","isSkinnedMesh","bones","skeleton","nVertexUniforms","nVertexMatrices","allocateBones","getMaxPrecision","isWebGLMultiviewRenderTarget","numViews","gammaOutput","gammaInput","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","init","unshift","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","light","halfWidth","halfHeight","state","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","vector3","matrix42","setup","viewMatrix","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_renderer","_objects","maxTextureSize","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","1","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","result","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","depthMaterial","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setClear","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLTextures","_gl","utils","maxTextures","maxCubemapSize","maxSamples","_videoTextures","useOffscreenCanvas","OffscreenCanvas","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","textureProperties","__maxMipLevel","LOG2E","getInternalFormat","glFormat","glType","internalFormat","filterFallback","onTextureDispose","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","memory","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglColorTexture","__webglDepthStencilTexture","__webglViewFramebuffers","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","activeTexture","bindTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","compressedTexImage2D","texImage2D","mipmapImage","setTextureCubeDynamic","wrappingToGL","filterToGL","textureType","texParameteri","extension","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","createTexture","textureNeedsPowerOfTwo","isDepthTexture","texImage3D","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isMultiview","createFramebuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","ext","colorTexture","framebufferTextureMultiviewOVR","depthStencilTexture","viewFramebuffers","framebufferTextureLayer","updateRenderTargetMipmap","webglTexture","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","UNSIGNED_INT_24_8_WEBGL","WebGLMultiviewRenderTarget","WebGLMultiview","mat3","mat4","cameraArray","renderSize","available","DEFAULT_NUMVIEWS","maxNumViews","getCameraArray","isArrayCamera","cameras","isAvailable","getContextAttributes","antialias","MAX_VIEWS_OVR","attachCamera","isMultiviewCompatible","getDrawingBufferSize","setNumViews","resizeRenderTarget","detachCamera","srcRenderTarget","srcFramebuffers","viewWidth","viewHeight","flush","updateCameraProjectionMatricesUniform","updateCameraViewMatricesUniform","updateObjectMatricesUniforms","Group","ArrayCamera","isGroup","_geometry","cameraLPos","cameraRPos","setProjectionFromUnion","cameraL","cameraR","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","WebVRManager","renderWidth","renderHeight","device","frameData","controllers","standingMatrix","standingMatrixInverse","framebufferScaleFactor","referenceSpaceType","window","VRFrameData","onVRDisplayPresentChange","tempQuaternion","tempPosition","tempCamera","cameraVR","isPresenting","currentPixelRatio","currentSize","eyeParameters","getEyeParameters","getPixelRatio","setDrawingBufferSize","animation","triggers","grips","findGamepad","gamepads","navigator","getGamepads","gamepad","startsWith","hand","updateViewportFromBounds","bounds","getController","controller","getDevice","setDevice","setFramebufferScaleFactor","setReferenceSpaceType","getCamera","userHeight","depthNear","depthFar","getFrameData","stageParameters","sittingToStandingTransform","pose","orientation","leftViewMatrix","rightViewMatrix","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","hasPosition","buttonId","buttons","pressed","updateControllers","getStandingMatrix","submitFrame","setFrameOfReferenceType","WebXRManager","session","referenceSpace","sortedInputSources","onSessionEvent","inputSource","onSessionEnd","setFramebuffer","onRequestReferenceSpace","updateInputSources","findInputSource","inputSources","handedness","updateCamera","getSession","setSession","updateRenderState","baseLayer","XRWebGLLayer","requestReferenceSpace","then","onAnimationFrameCallback","getViewerPose","views","renderState","transform","inputPose","getPose","targetRaySpace","WebGLRenderer","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","toneMappingExposure","toneMappingWhitePoint","objects","programCache","renderLists","renderStates","morphtargets","bufferRenderer","indexedBufferRenderer","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_scissor","_scissorTest","_clipping","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","getTargetPixelRatio","contextAttributes","xrCompatible","onContextLost","onContextRestore","getShaderPrecisionFormat","rangeMin","rangeMax","message","initGLContext","getExtension","maxAnisotropy","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","maxVertexTextures","maxAttributes","maxVaryings","maxFragmentUniforms","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","clearColor","reset","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","factor","webglSlot","initAttributes","enableAttribute","disableUnusedAttributes","disableVertexAttribArray","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","boundTexture","unbindTexture","apply","calls","triangles","autoReset","mode","instanceCount","wireframeAttributes","onGeometryDispose","buffergeometry","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","geometryAttributes","getWireframeAttribute","currentAttribute","updateList","influencesList","objectInfluences","influences","morphInfluencesSum","morphBaseInfluence","lists","onSceneDispose","list","has","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","vr","environmentBlendMode","setMode","drawArrays","renderInstances","primcount","methodName","drawElements","multiview","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","setPixelRatio","updateStyle","setViewport","pixelRatio","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","programAttributes","positionArray","vertexAttribPointer","normalArray","uvArray","colorArray","setProgram","updateBuffers","rangeFactor","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","maxInstancedCount","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","initMaterial","renderObjects","camera2","isImmediateRenderObject","renderObjectImmediate","materialProperties","lightsStateVersion","programCacheKey","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","isShadowMaterial","materialNeedsLights","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","isFog","density","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsPhong","refreshUniformsToon","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","uvScaleMap","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","ltc_1","LTC_1","ltc_2","LTC_2","projectObject","isLOD","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","InterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","isInterleavedBuffer","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","float32Array","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getObjectForDistance","bind","calculateInverses","normalizeSkinWeights","skinWeight","_offsetMatrix","_identityMatrix","Skeleton","boneInverses","Bone","bone","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","positionAttribute","linePrecision","localPrecision","localPrecisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","localThresholdSq","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","o","ol","edge1","edge2","edge","edges","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","threshold","params","localThreshold","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","triangulate","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","forEach","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","ahole","hl","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","concat","scalePt2","pt","vec","bs","vert","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","shift","resetDuration","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","parseKeyframeTrack","json","trackType","typeName","toLowerCase","getTrackTypeForValueTypeName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","createInterpolant","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","global","DefaultLoadingManager","Loader","manager","crossOrigin","resourcePath","load","setCrossOrigin","setPath","setResourcePath","loading","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t3","cached","setTimeout","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","header","open","callbacks","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setResponseType","setWithCredentials","setMimeType","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","onImageLoad","onImageError","substr","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","weight","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","MaterialLoader","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","zoomW","zoomH","scaleW","scaleH","isDirectionalLightShadow","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","typedArray","TYPED_ARRAYS","bufferAttributeConstr","bufferAttribute","drawcalls","offsets","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","bufferGeometryLoader","details","geometryShapes","THREE","geometryLoader","LegacyJSONLoader","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","ha","familyName","FontLoader","setOptions","res","blob","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","SphericalHarmonics3","LightProbe","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isSphericalHarmonics3","zero","getAt","coeff","addScale","getIrradianceAt","getBasisAt","shBasis","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","Clock","autoStart","oldTime","elapsedTime","running","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","performance","Date","now","getElapsedTime","getDelta","newTime","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_pausedAt","filters","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","Raycaster","PointCloud","ascSort","intersectObject","Spherical","Cylindrical","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$6","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","_v1$5","_v2$3","_normalMatrix$1","_keys","VertexNormalsHelper","nNormals","objGeometry","objPos","objNorm","_vector$7","SpotLightHelper","cone","coneLength","coneWidth","_vector$8","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","RectAreaLightHelper","_vector$9","_color1","_color2","HemisphereLightHelper","LightProbeHelper","GAMMA_OUTPUT","GridHelper","PolarGridHelper","radials","circles","PositionalAudioHelper","divisionsInnerAngle","divisionsOuterAngle","materialInnerAngle","materialOuterAngle","halfConeInnerAngle","halfConeOuterAngle","_v1$6","_v2$4","_normalMatrix$2","FaceNormalsHelper","_v1$7","_v2$5","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$a","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$3","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","setColor","ClosedSplineCurve3","SplineCurve3","Spline","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","isIntersectionBox","isIntersectionSphere","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","renderReverseSided","renderSingleSided","activeMipMapLevel","standing","audioLoader","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CubeGeometry","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicDrawUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FlatShading","Float32Attribute","Float64Attribute","FrontFaceDirectionCCW","FrontFaceDirectionCW","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","langx","webgl","threejs","mixin","skylark","main"],"mappings":"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","file":"../skylark-threejs-all.js","sourcesContent":["define('skylark-threejs/three',[], function () { \n\t'use strict';\n\n\tvar exports = {};\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t}\n\n\tvar REVISION = '111';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar ACESFilmicToneMapping = 5;\n\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return false; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _lut = [];\n\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t}\n\n\tvar _Math = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\treturn uuid.toUpperCase();\n\n\t\t},\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * _Math.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * _Math.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tcross: function ( v ) {\n\n\t\t\treturn this.x * v.y - this.y * v.x;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\t\tif ( angle < 0 ) { angle += 2 * Math.PI; }\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tisQuaternion: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tangleTo: function ( q ) {\n\n\t\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t\t},\n\n\t\trotateTowards: function ( q, step ) {\n\n\t\t\tvar angle = this.angleTo( q );\n\n\t\t\tif ( angle === 0 ) { return this; }\n\n\t\t\tvar t = Math.min( 1, step / angle );\n\n\t\t\tthis.slerp( q, t );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tinverse: function () {\n\n\t\t\t// quaternion is assumed to have unit length\n\n\t\t\treturn this.conjugate();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) { return this; }\n\t\t\tif ( t === 1 ) { return this.copy( qb ); }\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\t\tthis.normalize();\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector = new Vector3();\n\tvar _quaternion = new Quaternion();\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t\t},\n\n\t\tapplyAxisAngle: function ( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\treturn this.applyMatrix3( m ).normalize();\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t\t},\n\n\t\tunproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\treturn this.crossVectors( this, v );\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( v ) {\n\n\t\t\t// v cannot be the zero v\n\n\t\t\tvar scalar = v.dot( this ) / v.lengthSq();\n\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function ( planeNormal ) {\n\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( _vector );\n\n\t\t},\n\n\t\treflect: function ( normal ) {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t},\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\t\tif ( denominator === 0 ) { console.error( 'THREE.Vector3: angleTo() can\\'t handle zero length vectors.' ); }\n\n\t\t\tvar theta = this.dot( v ) / denominator;\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t\t},\n\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\t\tthis.y = Math.cos( phi ) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t\t},\n\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\t\tthis.x = radius * Math.sin( theta );\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tvar _vector$1 = new Vector3();\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$1.x = attribute.getX( i );\n\t\t\t\t_vector$1.y = attribute.getY( i );\n\t\t\t\t_vector$1.z = attribute.getZ( i );\n\n\t\t\t\t_vector$1.applyMatrix3( this );\n\n\t\t\t\tattribute.setXYZ( i, _vector$1.x, _vector$1.y, _vector$1.z );\n\n\t\t\t}\n\n\t\t\treturn attribute;\n\n\t\t},\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\t\tvar c = Math.cos( rotation );\n\t\t\tvar s = Math.sin( rotation );\n\n\t\t\tthis.set(\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t\t0, 0, 1\n\t\t\t);\n\n\t\t},\n\n\t\tscale: function ( sx, sy ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotate: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta );\n\t\t\tvar s = Math.sin( theta );\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\t\tte[ 0 ] = c * a11 + s * a21;\n\t\t\tte[ 3 ] = c * a12 + s * a22;\n\t\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( tx, ty ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\n\t\tgetDataURL: function ( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t} else if ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\n\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tvar output = {\n\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY,\n\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// process single image\n\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t\treturn uv;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.defineProperties( Vector4.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.z = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.w = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.texture.image = {};\n\t\tthis.texture.image.width = width;\n\t\tthis.texture.image.height = height;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: WebGLRenderTarget,\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author Matt DesLauriers / @mattdesl\n\t */\n\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.samples = 4;\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultisampleRenderTarget,\n\n\t\tisWebGLMultisampleRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.samples = source.samples;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar _v1 = new Vector3();\n\tvar _m1 = new Matrix4();\n\tvar _zero = new Vector3( 0, 0, 0 );\n\tvar _one = new Vector3( 1, 1, 1 );\n\tvar _x = new Vector3();\n\tvar _y = new Vector3();\n\tvar _z = new Vector3();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function ( m ) {\n\n\t\t\t// this method does not support reflection matrices\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// bottom row\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// last column\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\treturn this.compose( _zero, q, _one );\n\n\t\t},\n\n\t\tlookAt: function ( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors( eye, target );\n\n\t\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t_z.z = 1;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t\t// up and z are parallel\n\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t_z.x += 0.0001;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_z.z += 0.0001;\n\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\t\t\t\t_x.crossVectors( up, _z );\n\n\t\t\t}\n\n\t\t\t_x.normalize();\n\t\t\t_y.crossVectors( _z, _x );\n\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t_v1.x = attribute.getX( i );\n\t\t\t\t_v1.y = attribute.getY( i );\n\t\t\t\t_v1.z = attribute.getZ( i );\n\n\t\t\t\t_v1.applyMatrix4( this );\n\n\t\t\t\tattribute.setXYZ( i, _v1.x, _v1.y, _v1.z );\n\n\t\t\t}\n\n\t\t\treturn attribute;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( x, y, z ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\tte[ 12 ] = x.x;\n\t\t\t\tte[ 13 ] = x.y;\n\t\t\t\tte[ 14 ] = x.z;\n\n\t\t\t} else {\n\n\t\t\t\tte[ 12 ] = x;\n\t\t\t\tte[ 13 ] = y;\n\t\t\t\tte[ 14 ] = z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s, c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts, c, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = position.x;\n\t\t\tte[ 13 ] = position.y;\n\t\t\tte[ 14 ] = position.z;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) { sx = - sx; }\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\t\t\t_m1.copy( this );\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t_m1.elements[ 0 ] *= invSX;\n\t\t\t_m1.elements[ 1 ] *= invSX;\n\t\t\t_m1.elements[ 2 ] *= invSX;\n\n\t\t\t_m1.elements[ 4 ] *= invSY;\n\t\t\t_m1.elements[ 5 ] *= invSY;\n\t\t\t_m1.elements[ 6 ] *= invSY;\n\n\t\t\t_m1.elements[ 8 ] *= invSZ;\n\t\t\t_m1.elements[ 9 ] *= invSZ;\n\t\t\t_m1.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _matrix = new Matrix4();\n\tvar _quaternion$1 = new Quaternion();\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = _Math.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function ( q, order, update ) {\n\n\t\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t\t},\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function ( newOrder ) {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\t_quaternion$1.setFromEuler( this );\n\n\t\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\n\n\t\t},\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\tenableAll: function () {\n\n\t\t\tthis.mask = 0xffffffff | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\tdisableAll: function () {\n\n\t\t\tthis.mask = 0;\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\tvar _object3DId = 0;\n\n\tvar _v1$1 = new Vector3();\n\tvar _q1 = new Quaternion();\n\tvar _m1$1 = new Matrix4();\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\tvar _scale = new Vector3();\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3( 1, 0, 0 );\n\tvar _yAxis = new Vector3( 0, 1, 0 );\n\tvar _zAxis = new Vector3( 0, 0, 1 );\n\n\tvar _addedEvent = { type: 'added' };\n\tvar _removedEvent = { type: 'removed' };\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Object3D,\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tthis.matrix.premultiply( matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateOnWorldAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t\t},\n\n\t\ttranslateOnAxis: function ( axis, distance ) {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslateX: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t\t},\n\n\t\ttranslateY: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t\t},\n\n\t\ttranslateZ: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t\t},\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\n\n\t\t},\n\n\t\tlookAt: function ( x, y, z ) {\n\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t_target.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\t_target.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\n\n\t\t\t} else {\n\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\n\n\t\t\t}\n\n\t\t},\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push( object );\n\n\t\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tattach: function ( object ) {\n\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.getInverse( this.matrixWorld );\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t\t}\n\n\t\t\tobject.applyMatrix( _m1$1 );\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) { return this; }\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\ttarget = new Quaternion();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldScale: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) { return; }\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t\t}\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tif ( updateChildren === true ) {\n\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\n\t\t\tif ( this.visible === false ) { object.visible = false; }\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\n\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\n\n\t\t\t// object specific properties\n\n\t\t\tif ( this.isMesh && this.drawMode !== TrianglesDrawMode ) { object.drawMode = this.drawMode; }\n\n\t\t\tif ( this.isInstancedMesh ) {\n\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\n\t\t\t\tif ( shapes.length > 0 ) { output.shapes = shapes; }\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) { recursive = true; }\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.fog = null;\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tisScene: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tvar _points = [\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3()\n\t];\n\n\tvar _vector$2 = new Vector3();\n\n\tvar _box = new Box3();\n\n\t// triangle centered vertices\n\n\tvar _v0 = new Vector3();\n\tvar _v1$2 = new Vector3();\n\tvar _v2 = new Vector3();\n\n\t// triangle edge vectors\n\n\tvar _f0 = new Vector3();\n\tvar _f1 = new Vector3();\n\tvar _f2 = new Vector3();\n\n\tvar _center = new Vector3();\n\tvar _extents = new Vector3();\n\tvar _triangleNormal = new Vector3();\n\tvar _testAxis = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$2.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function ( object ) {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.expandByPoint( _box.min );\n\t\t\t\tthis.expandByPoint( _box.max );\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, _vector$2 );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn _vector$2.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t\t},\n\n\t\tintersectsTriangle: function ( triangle ) {\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// compute box center and extents\n\t\t\tthis.getCenter( _center );\n\t\t\t_extents.subVectors( this.max, _center );\n\n\t\t\t// translate triangle to aabb origin\n\t\t\t_v0.subVectors( triangle.a, _center );\n\t\t\t_v1$2.subVectors( triangle.b, _center );\n\t\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t\t// compute edge vectors for triangle\n\t\t\t_f0.subVectors( _v1$2, _v0 );\n\t\t\t_f1.subVectors( _v2, _v1$2 );\n\t\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\tvar axes = [\n\t\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t\t];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// test 3 face normals from the aabb\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\t\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$2.copy( point ).clamp( this.min, this.max );\n\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tgetBoundingSphere: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t\t}\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$2 ).length() * 0.5;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif ( this.isEmpty() ) { return this; }\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\t\tthis.setFromPoints( _points );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\t\tvar i, j;\n\n\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t_testAxis.fromArray( axes, i );\n\t\t\t// project the aabb onto the seperating axis\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\tvar p0 = v0.dot( _testAxis );\n\t\t\tvar p1 = v1.dot( _testAxis );\n\t\t\tvar p2 = v2.dot( _testAxis );\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tvar _box$1 = new Box3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\t_box$1.setFromPoints( points ).getCenter( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\ttarget.sub( this.center ).normalize();\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\t\ttarget = new Box3();\n\n\t\t\t}\n\n\t\t\ttarget.set( this.center, this.center );\n\t\t\ttarget.expandByScalar( this.radius );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\tvar _vector$3 = new Vector3();\n\tvar _segCenter = new Vector3();\n\tvar _segDir = new Vector3();\n\tvar _diff = new Vector3();\n\n\tvar _edge1 = new Vector3();\n\tvar _edge2 = new Vector3();\n\tvar _normal = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function ( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, _vector$3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( point, this.origin );\n\n\t\t\tvar directionDistance = target.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn target.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function ( point ) {\n\n\t\t\tvar directionDistance = _vector$3.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\t_vector$3.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn _vector$3.distanceToSquared( point );\n\n\t\t},\n\n\t\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( _segDir );\n\t\t\tvar b0 = _diff.dot( this.direction );\n\t\t\tvar b1 = - _diff.dot( _segDir );\n\t\t\tvar c = _diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t},\n\n\t\tintersectSphere: function ( sphere, target ) {\n\n\t\t\t_vector$3.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = _vector$3.dot( this.direction );\n\t\t\tvar d2 = _vector$3.dot( _vector$3 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) { return null; }\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, target );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, target ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, target );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, target ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) { return null; }\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn this.intersectBox( box, _vector$3 ) !== null;\n\n\t\t},\n\n\t\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t_edge1.subVectors( b, a );\n\t\t\t_edge2.subVectors( c, a );\n\t\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( _normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) { return null; }\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t_diff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * _diff.dot( _normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector1 = new Vector3();\n\tvar _vector2 = new Vector3();\n\tvar _normalMatrix = new Matrix3();\n\n\tfunction Plane( normal, constant ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tisPlane: true,\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\n\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t\t},\n\n\t\tintersectLine: function ( line, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar direction = line.delta( _vector1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t},\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant -= offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v0$1 = new Vector3();\n\tvar _v1$3 = new Vector3();\n\tvar _v2$1 = new Vector3();\n\tvar _v3 = new Vector3();\n\n\tvar _vab = new Vector3();\n\tvar _vac = new Vector3();\n\tvar _vbc = new Vector3();\n\tvar _vap = new Vector3();\n\tvar _vbp = new Vector3();\n\tvar _vcp = new Vector3();\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tgetNormal: function ( a, b, c, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( c, b );\n\t\t\t_v0$1.subVectors( a, b );\n\t\t\ttarget.cross( _v0$1 );\n\n\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t},\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tgetBarycoord: function ( point, a, b, c, target ) {\n\n\t\t\t_v0$1.subVectors( c, a );\n\t\t\t_v1$3.subVectors( b, a );\n\t\t\t_v2$1.subVectors( point, a );\n\n\t\t\tvar dot00 = _v0$1.dot( _v0$1 );\n\t\t\tvar dot01 = _v0$1.dot( _v1$3 );\n\t\t\tvar dot02 = _v0$1.dot( _v2$1 );\n\t\t\tvar dot11 = _v1$3.dot( _v1$3 );\n\t\t\tvar dot12 = _v1$3.dot( _v2$1 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point, a, b, c ) {\n\n\t\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\n\n\t\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t\t},\n\n\t\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\t\ttarget.set( 0, 0 );\n\t\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tisFrontFacing: function ( a, b, c, direction ) {\n\n\t\t\t_v0$1.subVectors( c, b );\n\t\t\t_v1$3.subVectors( a, b );\n\n\t\t\t// strictly front facing\n\t\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetArea: function () {\n\n\t\t\t_v0$1.subVectors( this.c, this.b );\n\t\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t\t},\n\n\t\tgetMidpoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tgetNormal: function ( target ) {\n\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetPlane: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\t\ttarget = new Plane();\n\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tgetBarycoord: function ( point, target ) {\n\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetUV: function ( point, uv1, uv2, uv3, target ) {\n\n\t\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tisFrontFacing: function ( direction ) {\n\n\t\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsTriangle( this );\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( p, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar a = this.a, b = this.b, c = this.c;\n\t\t\tvar v, w;\n\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors( b, a );\n\t\t\t_vac.subVectors( c, a );\n\t\t\t_vap.subVectors( p, a );\n\t\t\tvar d1 = _vab.dot( _vap );\n\t\t\tvar d2 = _vac.dot( _vap );\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy( a );\n\n\t\t\t}\n\n\t\t\t_vbp.subVectors( p, b );\n\t\t\tvar d3 = _vab.dot( _vbp );\n\t\t\tvar d4 = _vac.dot( _vbp );\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy( b );\n\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t\t}\n\n\t\t\t_vcp.subVectors( p, c );\n\t\t\tvar d5 = _vab.dot( _vcp );\n\t\t\tvar d6 = _vac.dot( _vcp );\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy( c );\n\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t\t_vbc.subVectors( c, b );\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t\t}\n\n\t\t\t// face region\n\t\t\tvar denom = 1 / ( va + vb + vc );\n\t\t\t// u = va * denom\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t\t},\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tvar _hslA = { h: 0, s: 0, l: 0 };\n\tvar _hslB = { h: 0, s: 0, l: 0 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tfunction hue2rgb( p, q, t ) {\n\n\t\tif ( t < 0 ) { t += 1; }\n\t\tif ( t > 1 ) { t -= 1; }\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\n\t\tif ( t < 1 / 2 ) { return q; }\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\n\t\treturn p;\n\n\t}\n\n\tfunction SRGBToLinear( c ) {\n\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t}\n\n\tfunction LinearToSRGB( c ) {\n\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function ( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = _Math.euclideanModulo( h, 1 );\n\t\t\ts = _Math.clamp( s, 0, 1 );\n\t\t\tl = _Math.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) { return; }\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\treturn this.setColorName( style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetColorName: function ( style ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\n\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\n\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopySRGBToLinear: function ( color ) {\n\n\t\t\tthis.r = SRGBToLinear( color.r );\n\t\t\tthis.g = SRGBToLinear( color.g );\n\t\t\tthis.b = SRGBToLinear( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToSRGB: function ( color ) {\n\n\t\t\tthis.r = LinearToSRGB( color.r );\n\t\t\tthis.g = LinearToSRGB( color.g );\n\t\t\tthis.b = LinearToSRGB( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertSRGBToLinear: function () {\n\n\t\t\tthis.copySRGBToLinear( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToSRGB: function () {\n\n\t\t\tthis.copyLinearToSRGB( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( target ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t\t}\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tthis.getHSL( _hslA );\n\n\t\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpHSL: function ( color, alpha ) {\n\n\t\t\tthis.getHSL( _hslA );\n\t\t\tcolor.getHSL( _hslB );\n\n\t\t\tvar h = _Math.lerp( _hslA.h, _hslB.h, alpha );\n\t\t\tvar s = _Math.lerp( _hslA.s, _hslB.s, alpha );\n\t\t\tvar l = _Math.lerp( _hslA.l, _hslB.l, alpha );\n\n\t\t\tthis.setHSL( h, s, l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\tColor.NAMES = _colorKeywords;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexTangents = false;\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function () {},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) { return; }\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\n\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\n\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\n\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\n\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\n\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\n\t\t\tif ( this.vertexColors !== NoColors ) { data.vertexColors = this.vertexColors; }\n\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\n\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\n\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\n\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\n\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\n\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\n\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\n\n\t\t\tif ( this.visible === false ) { data.visible = false; }\n\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\n\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexTangents = source.vertexTangents;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\t{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\n\t\t\tthis.shadowSide = source.shadowSide;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.toneMapped = source.toneMapped;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\n\t\t\t\t\t\tname: morphNormals[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) { return - Infinity; }\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tvar _m1$2 = new Matrix4();\n\tvar _obj = new Object3D();\n\tvar _offset = new Vector3();\n\tvar _box$2 = new Box3();\n\tvar _boxMorphTargets = new Box3();\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: BufferGeometry,\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tsetAttribute: function ( name, attribute ) {\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeleteAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tmatrix.applyToBufferAttribute( position );\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normal );\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif ( tangent !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\t// Tangent is vec4, but the '.w' component is a sign value (+1/-1).\n\t\t\t\tnormalMatrix.applyToBufferAttribute( tangent );\n\t\t\t\ttangent.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$2.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$2.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$2.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$2.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$2.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj.lookAt( vector );\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix( _obj.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position ) {\n\n\t\t\t\t// first, find the center of the bounding sphere\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter( center );\n\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i );\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) {\n\n\t\t\t\toffset = 0;\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$4.x = normals.getX( i );\n\t\t\t\t_vector$4.y = normals.getY( i );\n\t\t\t\t_vector$4.z = normals.getZ( i );\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( array2, itemSize );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\t// attributes\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = morphAttribute[ i ];\n\n\t\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\tdata.data.attributes[ key ] = attributeData;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor ( var key in this.morphAttributes ) {\n\n\t\t\t\tvar attributeArray = this.morphAttributes[ key ];\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = attributeArray[ i ];\n\n\t\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\t\tarray.push( attributeData );\n\n\t\t\t\t}\n\n\t\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\t\thasMorphAttributes = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasMorphAttributes ) {\n\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar name, i, l;\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.setAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\t// user data\n\n\t\t\tthis.userData = source.userData;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tvar _inverseMatrix = new Matrix4();\n\tvar _ray = new Ray();\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\tvar _vB = new Vector3();\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\tvar _tempB = new Vector3();\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\tvar _morphB = new Vector3();\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\tvar _uvB = new Vector2();\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t\tthis.drawMode = TrianglesDrawMode;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tsetDrawMode: function ( value ) {\n\n\t\t\tthis.drawMode = value;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.drawMode = source.drawMode;\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) { return; }\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere.copy( geometry.boundingSphere );\n\t\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\n\n\t\t\t}\n\n\t\t\t// check unsupported draw modes\n\n\t\t\tif ( this.drawMode !== TrianglesDrawMode ) {\n\n\t\t\t\tconsole.warn( 'THREE.Mesh: TriangleStripDrawMode and TriangleFanDrawMode are not supported by .raycast().' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\t\t\t\tvar i, j, il, jl;\n\t\t\t\tvar group, groupMaterial;\n\t\t\t\tvar start, end;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = j;\n\t\t\t\t\t\t\t\tb = j + 1;\n\t\t\t\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = i;\n\t\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\tvar intersect;\n\n\t\tif ( material.side === BackSide ) {\n\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t} else {\n\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t}\n\n\t\tif ( intersect === null ) { return null; }\n\n\t\t_intersectionPointWorld.copy( point );\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\n\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\n\t}\n\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t\t_vA.fromBufferAttribute( position, a );\n\t\t_vB.fromBufferAttribute( position, b );\n\t\t_vC.fromBufferAttribute( position, c );\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tvar influence = morphInfluences[ i ];\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) { continue; }\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\t\tif ( intersection ) {\n\n\t\t\tif ( uv ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tif ( uv2 ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tvar face = new Face3( a, b, c );\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\t\tintersection.face = face;\n\n\t\t}\n\n\t\treturn intersection;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\n\tvar _m1$3 = new Matrix4();\n\tvar _obj$1 = new Object3D();\n\tvar _offset$1 = new Vector3();\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Geometry,\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$3.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$3.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$3.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$3.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$3.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj$1.lookAt( vector );\n\n\t\t\t_obj$1.updateMatrix();\n\n\t\t\tthis.applyMatrix( _obj$1.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( attributes.position === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\n\n\t\t\tfor ( var i = 0; i < positions.length; i += 3 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color().fromArray( colors, i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexColors = ( colors === undefined ) ? [] : [\n\t\t\t\t\tscope.colors[ a ].clone(),\n\t\t\t\t\tscope.colors[ b ].clone(),\n\t\t\t\t\tscope.colors[ c ].clone() ];\n\n\t\t\t\tvar vertexNormals = ( normals === undefined ) ? [] : [\n\t\t\t\t\tnew Vector3().fromArray( normals, a * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, b * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, c * 3 )\n\t\t\t\t];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\n\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar i, il, j, jl, k, kl;\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tvar BoxGeometry = /*@__PURE__*/(function (Geometry) {\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'BoxGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tif ( Geometry ) BoxGeometry.__proto__ = Geometry;\n\t\tBoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t\treturn BoxGeometry;\n\t}(Geometry));\n\n\t// BoxBufferGeometry\n\n\tvar BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'BoxBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = this;\n\n\t\t\twidth = width || 1;\n\t\t\theight = height || 1;\n\t\t\tdepth = depth || 1;\n\n\t\t\t// segments\n\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0;\n\n\t\t\t// build each side of the box geometry\n\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\n\t\t\t\tvar ix, iy;\n\n\t\t\t\tvar vector = new Vector3();\n\n\t\t\t\t// generate vertices, normals and uvs\n\n\t\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// uvs\n\n\t\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t\t// counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// indices\n\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t\t// faces\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t\t// increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t\t// calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\n\t\t\t\t// update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t\treturn BoxBufferGeometry;\n\t}(BufferGeometry));\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tfunction cloneUniforms( src ) {\n\n\t\tvar dst = {};\n\n\t\tfor ( var u in src ) {\n\n\t\t\tdst[ u ] = {};\n\n\t\t\tfor ( var p in src[ u ] ) {\n\n\t\t\t\tvar property = src[ u ][ p ];\n\n\t\t\t\tif ( property && ( property.isColor ||\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\t\tproperty.isTexture ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn dst;\n\n\t}\n\n\tfunction mergeUniforms( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t}\n\n\t// Legacy\n\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = {};\n\n\t\tfor ( var name in this.uniforms ) {\n\n\t\t\tvar uniform = this.uniforms[ name ];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tvar extensions = {};\n\n\t\tfor ( var key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar fov = 90, aspect = 1;\n\n\tfunction CubeCamera( near, far, cubeResolution, options ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\toptions = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\t\trenderer.render( scene, cameraPX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\t\trenderer.render( scene, cameraNX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\t\trenderer.render( scene, cameraPY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\t\trenderer.render( scene, cameraNY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\t\trenderer.render( scene, cameraPZ );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\t\trenderer.render( scene, cameraNZ );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t}\n\n\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n\tWebGLRenderTargetCube.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = texture.format;\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tvar scene = new Scene();\n\n\t\tvar shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\n\n\t\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\n\n\t\t\t\t\"\t#include <begin_vertex>\",\n\t\t\t\t\"\t#include <project_vertex>\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform sampler2D tEquirect;\",\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"#define RECIPROCAL_PI 0.31830988618\",\n\t\t\t\t\"#define RECIPROCAL_PI2 0.15915494\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\n\n\t\t\t\t\"\tvec2 sampleUV;\",\n\n\t\t\t\t\"\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\",\n\n\t\t\t\t\"\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\n\n\t\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\t\t};\n\n\t\tvar material = new ShaderMaterial( {\n\n\t\t\ttype: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\n\n\t\tscene.add( mesh );\n\n\t\tvar camera = new CubeCamera( 1, 10, 1 );\n\n\t\tcamera.renderTarget = this;\n\t\tcamera.renderTarget.texture.name = 'CubeCameraTexture';\n\n\t\tcamera.update( renderer, scene );\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _sphere$1 = new Sphere();\n\tvar _vector$5 = new Vector3();\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSprite: function ( sprite ) {\n\n\t\t\t_sphere$1.center.set( 0, 0, 0 );\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\t\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t// corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = normalMatrix * objectTangent;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = saturate( clearcoat );\\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_normalmap_pars_fragment = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpack2HalfToRGBA( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpack2HalfToRGBA( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\nvoid main() {\\n\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_normalmap_pars_fragment: clearcoat_normalmap_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 },\n\t\t\tmaxMipLevel: { value: 0 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tlightProbe: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\t\trotation: { value: 0.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\tmatcap: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tmatcap: { value: null }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.sprite,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t\t},\n\n\t\tbackground: {\n\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\t\tt2D: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\n\t\t},\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: {\n\t\t\t\ttCube: { value: null },\n\t\t\t\ttFlip: { value: - 1 },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t} ] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\ttransparency: { value: 0 },\n\t\t\t\tclearcoat: { value: 0 },\n\t\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\t\tclearcoatNormalMap: { value: null },\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAnimation() {\n\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tif ( isAnimating === false ) { return; }\n\n\t\t\tanimationLoop( time, frame );\n\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tstart: function () {\n\n\t\t\t\tif ( isAnimating === true ) { return; }\n\t\t\t\tif ( animationLoop === null ) { return; }\n\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t\t\tisAnimating = true;\n\n\t\t\t},\n\n\t\t\tstop: function () {\n\n\t\t\t\tisAnimating = false;\n\n\t\t\t},\n\n\t\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\t\tanimationLoop = callback;\n\n\t\t\t},\n\n\t\t\tsetContext: function ( value ) {\n\n\t\t\t\tcontext = value;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl ) {\n\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = 5126;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = 5126;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = 5122;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = 5125;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = 5124;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = 5120;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = 5121;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\treturn buffers.get( attribute );\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tbuffers.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar ix, iy;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\t\t// Store the current background texture and its `version`\n\t\t// so we can recompile the material accordingly.\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.background;\n\n\t\t\t// Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\t\t\tvar vr = renderer.vr;\n\t\t\tvar session = vr.getSession && vr.getSession();\n\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\t\tbackground = null;\n\n\t\t\t}\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\t\t\t\tcurrentBackground = null;\n\t\t\t\tcurrentBackgroundVersion = 0;\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\t\t\t\tcurrentBackground = null;\n\t\t\t\tcurrentBackgroundVersion = 0;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundCubeMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'map', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.tCube.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = background.isWebGLRenderTargetCube ? background.texture : background;\n\t\t\t\tboxMesh.material.uniforms.tCube.value = texture;\n\t\t\t\tboxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t     currentBackgroundVersion !== texture.version ) {\n\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = texture.version;\n\n\t\t\t\t}\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tbackground.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\t   currentBackgroundVersion !== background.version ) {\n\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\n\t\t\t\t}\n\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\t/* eslint-disable no-undef */\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( 34930 );\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\n\n\t\tvar maxAttributes = gl.getParameter( 34921 );\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\n\t\tvar maxVaryings = gl.getParameter( 36348 );\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\t\treturn {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\t\tmaxSamples: maxSamples\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, info ) {\n\n\t\tvar geometries = new WeakMap();\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tgeometries.delete( geometry );\n\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\twireframeAttributes.delete( buffergeometry );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries.set( geometry, buffergeometry );\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, 34963 );\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateWireframeAttribute( geometry ) {\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\t\tattribute.version = version;\n\n\t\t\tattributes.update( attribute, 34963 );\n\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\n\n\t\t\t//\n\n\t\t\twireframeAttributes.set( geometry, attribute );\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( currentAttribute ) {\n\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get( geometry );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLInfo( gl ) {\n\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update( count, mode, instanceCount ) {\n\n\t\t\tinstanceCount = instanceCount || 1;\n\n\t\t\trender.calls ++;\n\n\t\t\tswitch ( mode ) {\n\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 5:\n\t\t\t\tcase 6:\n\t\t\t\t\trender.triangles += instanceCount * ( count - 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\trender.frame ++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\tvar length = objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\t// Remove current morphAttributes\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\t\tif ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }\n\t\t\t\t\tif ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\t// Add morphAttributes\n\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence ) {\n\n\t\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\tif ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }\n\t\t\t\t\t\tif ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }\n\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\t\tvar updateList = {};\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tupdateList = {};\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction DataTexture2DArray( data, width, height, depth ) {\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\t/**\n\t * @author Artur Trzesiok\n\t */\n\n\tfunction DataTexture3D( data, width, height, depth ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tvar texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\n\t}\n\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * @author tschw\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\tvar mat2array = new Float32Array( 4 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\tfunction arraysEqual( a, b ) {\n\n\t\tif ( a.length !== b.length ) { return false; }\n\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction copyArray( a, b ) {\n\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\t\ta[ i ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( textures, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t{ r[ i ] = textures.allocateTextureUnit(); }\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValueV1f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValueV2f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV3f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\n\t\t\t}\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\t\tcache[ 0 ] = v.r;\n\t\t\t\tcache[ 1 ] = v.g;\n\t\t\t\tcache[ 2 ] = v.b;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV4f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\t\t\t\tcache[ 3 ] = v.w;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValueM2( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat2array.set( elements );\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM3( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat3array.set( elements );\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM4( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat4array.set( elements );\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT2DArray1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n\t}\n\n\tfunction setValueT3D1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValueV1i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\tfunction setValueV2i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV3i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV4i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8b5f: return setValueT3D1; // SAMPLER_3D\n\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\t\t\tcase 0x8DC1: return setValueT2DArray1; // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\tfunction setValueV1fArray( gl, v ) {\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\tfunction setValueV1iArray( gl, v ) {\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV2iArray( gl, v ) {\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV3iArray( gl, v ) {\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV4iArray( gl, v ) {\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t}\n\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 2 );\n\n\t\tgl.uniform2fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV3fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 3 );\n\n\t\tgl.uniform3fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV4fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniform4fv( this.addr, data );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM3Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 9 );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM4Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 16 );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\t\tcase 0x8b5e: return setValueT1Array; // SAMPLER_2D\n\t\t\tcase 0x8b60: return setValueT6Array; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\t\tthis.cache = new Float32Array( data.length );\n\n\t\t}\n\n\t\tcopyArray( cache, data );\n\n\t};\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile ( true ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35718 );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) { r.push( u ); }\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getShaderErrors( gl, shader, type ) {\n\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\n\n\t\tif ( status && log === '' ) { return ''; }\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource( shader );\n\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n\t}\n\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\textensions = extensions || {};\n\n\t\tvar chunks = [\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) { continue; }\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35721 );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n\t}\n\n\tfunction replaceClippingPlaneNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n\t}\n\n\t// Resolve Includes\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes( string ) {\n\n\t\treturn string.replace( includePattern, includeReplacer );\n\n\t}\n\n\tfunction includeReplacer( match, include ) {\n\n\t\tvar string = ShaderChunk[ include ];\n\n\t\tif ( string === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn resolveIncludes( string );\n\n\t}\n\n\t// Unroll Loops\n\n\tvar loopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\tfunction unrollLoops( string ) {\n\n\t\treturn string.replace( loopPattern, loopReplacer );\n\n\t}\n\n\tfunction loopReplacer( match, start, end, snippet ) {\n\n\t\tvar string = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tstring += snippet\n\t\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t\t}\n\n\t\treturn string;\n\n\t}\n\n\t//\n\n\tfunction generatePrecision( parameters ) {\n\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\n\n\t\tif ( parameters.precision === \"highp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"mediump\" ) {\n\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"lowp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\n\n\t\t}\n\n\t\treturn precisionstring;\n\n\t}\n\n\tfunction generateShadowMapTypeDefine( parameters ) {\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapTypeDefine( parameters ) {\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapModeDefine( parameters ) {\n\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapModeDefine;\n\n\t}\n\n\tfunction generateEnvMapBlendingDefine( parameters ) {\n\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\n\t}\n\n\tfunction WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters ) {\n\n\t\tvar gl = renderer.getContext();\n\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = shader.vertexShader;\n\t\tvar fragmentShader = shader.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tvar numMultiviewViews = parameters.numMultiviewViews;\n\n\t\tif ( material.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t\t' attribute mat4 instanceMatrix;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t( ( material.extensions ? material.extensions.shaderTextureLOD : false ) || parameters.envMap ) && ( parameters.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?\n\t\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = resolveIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\t\tfragmentShader = resolveIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\tif ( parameters.isWebGL2 && ! material.isRawShaderMaterial ) {\n\n\t\t\tvar isGLSL3ShaderMaterial = false;\n\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n\t\t\tif ( material.isShaderMaterial &&\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\n\n\t\t\t\tisGLSL3ShaderMaterial = true;\n\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\n\n\t\t\t}\n\n\t\t\t// GLSL 3.0 conversion\n\n\t\t\tprefixVertex = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define attribute in',\n\t\t\t\t'#define varying out',\n\t\t\t\t'#define texture2D texture'\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\t\tprefixFragment = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define varying in',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t\t'#define texture2D texture',\n\t\t\t\t'#define textureCube texture',\n\t\t\t\t'#define texture2DProj textureProj',\n\t\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t\t// Multiview\n\n\t\t\tif ( numMultiviewViews > 0 ) {\n\n\t\t\t\tprefixVertex = prefixVertex.replace(\n\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t[\n\t\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\n\t\t\t\t\t\t'layout(num_views = ' + numMultiviewViews + ') in;',\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t\tprefixVertex = prefixVertex.replace(\n\t\t\t\t\t[\n\t\t\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t\t'uniform mat3 normalMatrix;'\n\t\t\t\t\t].join( '\\n' ),\n\t\t\t\t\t[\n\t\t\t\t\t\t'uniform mat4 modelViewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'uniform mat4 projectionMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'uniform mat3 normalMatrices[' + numMultiviewViews + '];',\n\n\t\t\t\t\t\t'#define modelViewMatrix modelViewMatrices[VIEW_ID]',\n\t\t\t\t\t\t'#define projectionMatrix projectionMatrices[VIEW_ID]',\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]',\n\t\t\t\t\t\t'#define normalMatrix normalMatrices[VIEW_ID]'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t\tprefixFragment = prefixFragment.replace(\n\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t[\n\t\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t\tprefixFragment = prefixFragment.replace(\n\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t[\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\t// check for link errors\n\t\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tthis.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tmaterial: material,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t//\n\n\t\tthis.name = shader.name;\n\t\tthis.id = programIdCount ++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\tthis.numMultiviewViews = numMultiviewViews;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'phong',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"numMultiviewViews\",\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\t\"sheen\"\n\t\t];\n\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\t\tencoding = GammaEncoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\tvar numMultiviewViews = currentRenderTarget && currentRenderTarget.isWebGLMultiviewRenderTarget ? currentRenderTarget.numViews : 0;\n\n\t\t\tvar parameters = {\n\n\t\t\t\tisWebGL2: isWebGL2,\n\n\t\t\t\tshaderID: shaderID,\n\n\t\t\t\tprecision: precision,\n\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\tnumMultiviewViews: numMultiviewViews,\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\t\tmatcap: !! material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),\n\t\t\t\tenvMap: !! material.envMap,\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tsheen: !! material.sheen,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCacheKey = function ( material, parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( material.fragmentShader );\n\t\t\t\tarray.push( material.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( material.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( material.onBeforeCompile.toString() );\n\n\t\t\tarray.push( renderer.gammaOutput );\n\n\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( material, shader, parameters, cacheKey ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar preexistingProgram = programs[ p ];\n\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function ( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get( object ) {\n\n\t\t\tvar map = properties.get( object );\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set( object, map );\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tproperties.delete( object );\n\n\t\t}\n\n\t\tfunction update( object, key, value ) {\n\n\t\t\tproperties.get( object )[ key ] = value;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tproperties = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\n\tfunction WebGLRenderList() {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tvar defaultProgram = { id: - 1 };\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\t\t\trenderItemsIndex ++;\n\n\t\t\treturn renderItem;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t}\n\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\n\n\t\t}\n\n\t\tfunction sort() {\n\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( painterSortStable ); }\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( reversePainterSortStable ); }\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\tlists.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar cameras = lists.get( scene );\n\t\t\tvar list;\n\t\t\tif ( cameras === undefined ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists.set( scene, new WeakMap() );\n\t\t\t\tlists.get( scene ).set( camera, list );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tlist = cameras.get( camera );\n\t\t\t\tif ( list === undefined ) {\n\n\t\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\t\tcameras.set( camera, list );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n\t}\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar state = {\n\n\t\t\tversion: 0,\n\n\t\t\thash: {\n\t\t\t\tdirectionalLength: - 1,\n\t\t\t\tpointLength: - 1,\n\t\t\t\tspotLength: - 1,\n\t\t\t\trectAreaLength: - 1,\n\t\t\t\themiLength: - 1,\n\n\t\t\t\tnumDirectionalShadows: - 1,\n\t\t\t\tnumPointShadows: - 1,\n\t\t\t\tnumSpotShadows: - 1,\n\t\t\t},\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\tpoint: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: [],\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1\n\n\t\t};\n\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tvar hash = state.hash;\n\n\t\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\t\thash.pointLength !== pointLength ||\n\t\t\t\thash.spotLength !== spotLength ||\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\t\thash.hemiLength !== hemiLength ||\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\t\tstate.version = nextVersion ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLRenderState() {\n\n\t\tvar lights = new WebGLLights();\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t}\n\n\t\tfunction pushLight( light ) {\n\n\t\t\tlightsArray.push( light );\n\n\t\t}\n\n\t\tfunction pushShadow( shadowLight ) {\n\n\t\t\tshadowsArray.push( shadowLight );\n\n\t\t}\n\n\t\tfunction setupLights( camera ) {\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\n\t\t\tlights: lights\n\t\t};\n\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderStates() {\n\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\trenderStates.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar renderState;\n\n\t\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates.set( scene, new WeakMap() );\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\n\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn renderState;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\trenderStates = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpack2HalfToRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum(),\n\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_viewportSize = new Vector2(),\n\n\t\t\t_viewport = new Vector4(),\n\n\t\t\t_depthMaterials = [],\n\t\t\t_distanceMaterials = [],\n\n\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: { value: null },\n\t\t\t\tresolution: { value: new Vector2() },\n\t\t\t\tradius: { value: 4.0 }\n\t\t\t},\n\n\t\t\tvertexShader: vsm_vert,\n\n\t\t\tfragmentShader: vsm_frag\n\n\t\t} );\n\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\n\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute(\n\t\t\t\"position\",\n\t\t\tnew BufferAttribute(\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) { return; }\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\n\n\t\t\tif ( lights.length === 0 ) { return; }\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.setBlending( NoBlending );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );\n\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\n\n\t\t\t\t\t_viewport.set(\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t\t);\n\n\t\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t\t}\n\n\t\t\t\t// do blur pass for VSM\n\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t\t};\n\n\t\tfunction VSMPass( shadow, camera ) {\n\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\n\n\t\t\t// vertical pass\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t\t// horizonal pass\n\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\n\n\t\t}\n\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _depthMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDepthMaterial( {\n\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_depthMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _distanceMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_distanceMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( light.isPointLight === true ) {\n\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( customMaterial === undefined ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry.isGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\t\t\tif ( material.skinning === true ) {\n\n\t\t\t\t\t\tuseSkinning = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif ( type === VSMShadowMap ) {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t\t} else {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar enabledCapabilities = {};\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( 35661 );\n\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter( 7938 );\n\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, 10241, 9728 );\n\t\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( 2929 );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( 2884 );\n\n\t\tsetBlending( NoBlending );\n\n\t\t//\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tvar equationToGL = {};\n\t\tequationToGL[ AddEquation ] = 32774;\n\t\tequationToGL[ SubtractEquation ] = 32778;\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\tequationToGL[ MinEquation ] = 32775;\n\t\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t\t} else {\n\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar factorToGL = {};\n\t\tfactorToGL[ ZeroFactor ] = 0;\n\t\tfactorToGL[ OneFactor ] = 1;\n\t\tfactorToGL[ SrcColorFactor ] = 768;\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\n\t\tfactorToGL[ DstColorFactor ] = 774;\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending === NoBlending ) {\n\n\t\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\t\tdisable( 3042 );\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\t\tenable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = true;\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// custom blending\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\n\t\t}\n\n\t\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( 2884 )\n\t\t\t\t: enable( 2884 );\n\n\t\t\tvar flipSided = ( material.side === BackSide );\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\n\n\t\t\tsetFlipSided( flipSided );\n\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t\t? setBlending( NoBlending )\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest( stencilWrite );\n\t\t\tif ( stencilWrite ) {\n\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t\t}\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( 2884 );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 2884 );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( 32823 );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 32823 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( 3089 );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 3089 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unbindTexture() {\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage3D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tenabledCapabilities = {};\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\t\tvar _canvas;\n\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\n\t\tvar useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\t\tfunction createCanvas( width, height ) {\n\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\t\treturn useOffscreenCanvas ?\n\t\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t}\n\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\t\tvar scale = 1;\n\n\t\t\t// handle case if texture exceeds max size\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t}\n\n\t\t\t// only perform resize if necessary\n\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t\t// only perform resize for certain image types\n\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\t\tvar floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;\n\n\t\t\t\t\tvar width = floor( scale * image.width );\n\t\t\t\t\tvar height = floor( scale * image.height );\n\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\n\n\t\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\t\treturn canvas;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( isWebGL2 ) { return false; }\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t\t_gl.generateMipmap( target );\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t\t}\n\n\t\tfunction getInternalFormat( glFormat, glType ) {\n\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif ( glFormat === 6403 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6407 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6408 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\n\n\t\t\t}\n\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t\t} else if ( internalFormat === 34843 || internalFormat === 34837 ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );\n\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\t\treturn 9728;\n\n\t\t\t}\n\n\t\t\treturn 9729;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\t_videoTextures.delete( texture );\n\n\t\t\t}\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) { return; }\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLMultiviewRenderTarget ) {\n\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglColorTexture );\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglDepthStencilTexture );\n\n\t\t\t\tinfo.memory.textures -= 2;\n\n\t\t\t\tfor ( var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglViewFramebuffers[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\n\t\t\ttextureUnits = 0;\n\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture2DArray( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture3D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tif ( texture.image.length !== 6 ) { return; }\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\t\tvar mipmaps;\n\n\t\t\t\tif ( isCompressed ) {\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tvar wrappingToGL = {};\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\n\n\t\tvar filterToGL = {};\n\t\tfilterToGL[ NearestFilter ] = 9728;\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\n\t\tfilterToGL[ LinearFilter ] = 9729;\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\n\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\t\tif ( supportsMips ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction initTexture( textureProperties, texture ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tvar textureType = 3553;\n\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\n\n\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tif ( isWebGL2 === false ) { throw new Error( 'Float Depth Texture only supported in WebGL2.0' ); }\n\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t} else if ( isWebGL2 ) {\n\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\tglInternalFormat = 33189;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( 3553, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\n\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\t\tvar isMultiview = ( renderTarget.isWebGLMultiviewRenderTarget === true );\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( isMultiview ) {\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar numViews = renderTarget.numViews;\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar ext = extensions.get( 'OVR_multiview2' );\n\n\t\t\t\t\tinfo.memory.textures += 2;\n\n\t\t\t\t\tvar colorTexture = _gl.createTexture();\n\t\t\t\t\t_gl.bindTexture( 35866, colorTexture );\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 32856, width, height, numViews, 0, 6408, 5121, null );\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 36064, colorTexture, 0, 0, numViews );\n\n\t\t\t\t\tvar depthStencilTexture = _gl.createTexture();\n\t\t\t\t\t_gl.bindTexture( 35866, depthStencilTexture );\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 35056, width, height, numViews, 0, 34041, 34042, null );\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 33306, depthStencilTexture, 0, 0, numViews );\n\n\t\t\t\t\tvar viewFramebuffers = new Array( numViews );\n\t\t\t\t\tfor ( var i = 0; i < numViews; ++ i ) {\n\n\t\t\t\t\t\tviewFramebuffers[ i ] = _gl.createFramebuffer();\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, viewFramebuffers[ i ] );\n\t\t\t\t\t\t_gl.framebufferTextureLayer( 36160, 36064, colorTexture, 0, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trenderTargetProperties.__webglColorTexture = colorTexture;\n\t\t\t\t\trenderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;\n\t\t\t\t\trenderTargetProperties.__webglViewFramebuffers = viewFramebuffers;\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\t\t\t\t\t_gl.bindTexture( 35866, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 34067, null );\n\n\t\t\t} else if ( ! isMultiview ) {\n\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 3553, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\n\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t\t}\n\n\t\tfunction updateVideoTexture( texture ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\t// Check the last frame we updated the VideoTexture\n\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t\t_videoTextures.set( texture, frame );\n\t\t\t\ttexture.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// backwards compatibility\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTexture2D = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( texture, slot );\n\n\t\t}\n\n\t\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTextureCube = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\tsetTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\n\t}\n\n\t/**\n\t * @author thespite / http://www.twitter.com/thespite\n\t */\n\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\n\n\t\t\tif ( p === ByteType ) { return 5120; }\n\t\t\tif ( p === ShortType ) { return 5122; }\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\n\t\t\tif ( p === IntType ) { return 5124; }\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\n\t\t\tif ( p === FloatType ) { return 5126; }\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\n\t\t\tif ( p === RGBFormat ) { return 6407; }\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\n\t\t\tif ( p === DepthFormat ) { return 6402; }\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\n\t\t\tif ( p === RedFormat ) { return 6403; }\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\t/**\n\t * @author fernandojsg / http://fernandojsg.com\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction WebGLMultiviewRenderTarget( width, height, numViews, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.depthBuffer = false;\n\t\tthis.stencilBuffer = false;\n\n\t\tthis.numViews = numViews;\n\n\t}\n\n\tWebGLMultiviewRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultiviewRenderTarget,\n\n\t\tisWebGLMultiviewRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.numViews = source.numViews;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetNumViews: function ( numViews ) {\n\n\t\t\tif ( this.numViews !== numViews ) {\n\n\t\t\t\tthis.numViews = numViews;\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author fernandojsg / http://fernandojsg.com\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction WebGLMultiview( renderer, gl ) {\n\n\t\tvar DEFAULT_NUMVIEWS = 2;\n\n\t\tvar extensions = renderer.extensions;\n\t\tvar properties = renderer.properties;\n\n\t\tvar renderTarget, currentRenderTarget;\n\t\tvar mat3, mat4, cameraArray, renderSize;\n\n\t\tvar available;\n\t\tvar maxNumViews = 0;\n\n\t\t//\n\n\t\tfunction isAvailable() {\n\n\t\t\tif ( available === undefined ) {\n\n\t\t\t\tvar extension = extensions.get( 'OVR_multiview2' );\n\n\t\t\t\tavailable = extension !== null && gl.getContextAttributes().antialias === false;\n\n\t\t\t\tif ( available ) {\n\n\t\t\t\t\tmaxNumViews = gl.getParameter( extension.MAX_VIEWS_OVR );\n\t\t\t\t\trenderTarget = new WebGLMultiviewRenderTarget( 0, 0, DEFAULT_NUMVIEWS );\n\n\t\t\t\t\trenderSize = new Vector2();\n\t\t\t\t\tmat4 = [];\n\t\t\t\t\tmat3 = [];\n\t\t\t\t\tcameraArray = [];\n\n\t\t\t\t\tfor ( var i = 0; i < maxNumViews; i ++ ) {\n\n\t\t\t\t\t\tmat4[ i ] = new Matrix4();\n\t\t\t\t\t\tmat3[ i ] = new Matrix3();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn available;\n\n\t\t}\n\n\t\tfunction getCameraArray( camera ) {\n\n\t\t\tif ( camera.isArrayCamera ) { return camera.cameras; }\n\n\t\t\tcameraArray[ 0 ] = camera;\n\n\t\t\treturn cameraArray;\n\n\t\t}\n\n\t\tfunction updateCameraProjectionMatricesUniform( camera, uniforms ) {\n\n\t\t\tvar cameras = getCameraArray( camera );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tmat4[ i ].copy( cameras[ i ].projectionMatrix );\n\n\t\t\t}\n\n\t\t\tuniforms.setValue( gl, 'projectionMatrices', mat4 );\n\n\t\t}\n\n\t\tfunction updateCameraViewMatricesUniform( camera, uniforms ) {\n\n\t\t\tvar cameras = getCameraArray( camera );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tmat4[ i ].copy( cameras[ i ].matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\tuniforms.setValue( gl, 'viewMatrices', mat4 );\n\n\t\t}\n\n\t\tfunction updateObjectMatricesUniforms( object, camera, uniforms ) {\n\n\t\t\tvar cameras = getCameraArray( camera );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tmat4[ i ].multiplyMatrices( cameras[ i ].matrixWorldInverse, object.matrixWorld );\n\t\t\t\tmat3[ i ].getNormalMatrix( mat4[ i ] );\n\n\t\t\t}\n\n\t\t\tuniforms.setValue( gl, 'modelViewMatrices', mat4 );\n\t\t\tuniforms.setValue( gl, 'normalMatrices', mat3 );\n\n\t\t}\n\n\t\tfunction isMultiviewCompatible( camera ) {\n\n\t\t\tif ( camera.isArrayCamera === undefined ) { return true; }\n\n\t\t\tvar cameras = camera.cameras;\n\n\t\t\tif ( cameras.length > maxNumViews ) { return false; }\n\n\t\t\tfor ( var i = 1, il = cameras.length; i < il; i ++ ) {\n\n\t\t\t\tif ( cameras[ 0 ].viewport.z !== cameras[ i ].viewport.z ||\n\t\t\t\t\tcameras[ 0 ].viewport.w !== cameras[ i ].viewport.w ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction resizeRenderTarget( camera ) {\n\n\t\t\tif ( currentRenderTarget ) {\n\n\t\t\t\trenderSize.set( currentRenderTarget.width, currentRenderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.getDrawingBufferSize( renderSize );\n\n\t\t\t}\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tvar viewport = camera.cameras[ 0 ].viewport;\n\n\t\t\t\trenderTarget.setSize( viewport.z, viewport.w );\n\t\t\t\trenderTarget.setNumViews( camera.cameras.length );\n\n\t\t\t} else {\n\n\t\t\t\trenderTarget.setSize( renderSize.x, renderSize.y );\n\t\t\t\trenderTarget.setNumViews( DEFAULT_NUMVIEWS );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction attachCamera( camera ) {\n\n\t\t\tif ( isMultiviewCompatible( camera ) === false ) { return; }\n\n\t\t\tcurrentRenderTarget = renderer.getRenderTarget();\n\t\t\tresizeRenderTarget( camera );\n\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tfunction detachCamera( camera ) {\n\n\t\t\tif ( renderTarget !== renderer.getRenderTarget() ) { return; }\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\tflush( camera );\n\n\t\t}\n\n\t\tfunction flush( camera ) {\n\n\t\t\tvar srcRenderTarget = renderTarget;\n\t\t\tvar numViews = srcRenderTarget.numViews;\n\n\t\t\tvar srcFramebuffers = properties.get( srcRenderTarget ).__webglViewFramebuffers;\n\n\t\t\tvar viewWidth = srcRenderTarget.width;\n\t\t\tvar viewHeight = srcRenderTarget.height;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tfor ( var i = 0; i < numViews; i ++ ) {\n\n\t\t\t\t\tvar viewport = camera.cameras[ i ].viewport;\n\n\t\t\t\t\tvar x1 = viewport.x;\n\t\t\t\t\tvar y1 = viewport.y;\n\t\t\t\t\tvar x2 = x1 + viewport.z;\n\t\t\t\t\tvar y2 = y1 + viewport.w;\n\n\t\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ i ] );\n\t\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, x1, y1, x2, y2, 16384, 9728 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ 0 ] );\n\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, 16384, 9728 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.isAvailable = isAvailable;\n\t\tthis.attachCamera = attachCamera;\n\t\tthis.detachCamera = detachCamera;\n\t\tthis.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;\n\t\tthis.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;\n\t\tthis.updateObjectMatricesUniforms = updateObjectMatricesUniforms;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group,\n\n\t\tisGroup: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author jsantell / https://www.jsantell.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar cameraLPos = new Vector3();\n\tvar cameraRPos = new Vector3();\n\n\t/**\n\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t * the cameras' projection and world matrices have already been set.\n\t * And that near and far planes are identical for both cameras.\n\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t */\n\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\tvar projR = cameraR.projectionMatrix.elements;\n\n\t\t// VR systems will have identical far and near planes, and\n\t\t// most likely identical top and bottom frustum extents.\n\t\t// Use the left camera for these values.\n\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\tvar left = near * leftFov;\n\t\tvar right = near * rightFov;\n\n\t\t// Calculate the new camera's position offset from the\n\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\tvar zOffset = ipd / ( - leftFov + rightFov );\n\t\tvar xOffset = zOffset * - leftFov;\n\n\t\t// TODO: Better way to apply this offset?\n\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\tcamera.translateX( xOffset );\n\t\tcamera.translateZ( zOffset );\n\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t// Find the union of the frustum values of the cameras and scale\n\t\t// the values so that the near plane's position does not change in world space,\n\t\t// although must now be relative to the new union camera.\n\t\tvar near2 = near + zOffset;\n\t\tvar far2 = far + zOffset;\n\t\tvar left2 = left - xOffset;\n\t\tvar right2 = right + ( ipd - xOffset );\n\t\tvar top2 = topFov * far / far2 * near2;\n\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebVRManager( renderer ) {\n\n\t\tvar renderWidth, renderHeight;\n\t\tvar scope = this;\n\n\t\tvar device = null;\n\t\tvar frameData = null;\n\n\t\tvar controllers = [];\n\t\tvar standingMatrix = new Matrix4();\n\t\tvar standingMatrixInverse = new Matrix4();\n\n\t\tvar framebufferScaleFactor = 1.0;\n\n\t\tvar referenceSpaceType = 'local-floor';\n\n\t\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\n\n\t\t\tframeData = new window.VRFrameData();\n\t\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\t\t}\n\n\t\tvar matrixWorldInverse = new Matrix4();\n\t\tvar tempQuaternion = new Quaternion();\n\t\tvar tempPosition = new Vector3();\n\n\t\tvar tempCamera = new PerspectiveCamera();\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.viewport = new Vector4();\n\t\tcameraL.layers.enable( 1 );\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.viewport = new Vector4();\n\t\tcameraR.layers.enable( 2 );\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\t//\n\n\t\tfunction isPresenting() {\n\n\t\t\treturn device !== null && device.isPresenting === true;\n\n\t\t}\n\n\t\tvar currentSize = new Vector2(), currentPixelRatio;\n\n\t\tfunction onVRDisplayPresentChange() {\n\n\t\t\tif ( isPresenting() ) {\n\n\t\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\n\t\t\t\trenderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;\n\t\t\t\trenderHeight = eyeParameters.renderHeight * framebufferScaleFactor;\n\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\t\trenderer.getSize( currentSize );\n\n\t\t\t\trenderer.setDrawingBufferSize( renderWidth, renderHeight, 1 );\n\n\t\t\t\tcameraL.viewport.set( 0, 0, renderWidth / 2, renderHeight );\n\t\t\t\tcameraR.viewport.set( renderWidth / 2, 0, renderWidth / 2, renderHeight );\n\n\t\t\t\tanimation.start();\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t\t} else {\n\n\t\t\t\tif ( scope.enabled ) {\n\n\t\t\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\n\n\t\t\t\t}\n\n\t\t\t\tanimation.stop();\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar triggers = [];\n\t\tvar grips = [];\n\n\t\tfunction findGamepad( id ) {\n\n\t\t\tvar gamepads = navigator.getGamepads && navigator.getGamepads();\n\n\t\t\tfor ( var i = 0, l = gamepads.length; i < l; i ++ ) {\n\n\t\t\t\tvar gamepad = gamepads[ i ];\n\n\t\t\t\tif ( gamepad && ( gamepad.id === 'Daydream Controller' ||\n\t\t\t\t\tgamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||\n\t\t\t\t\tgamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||\n\t\t\t\t\tgamepad.id.startsWith( 'HTC Vive Focus' ) ||\n\t\t\t\t\tgamepad.id.startsWith( 'Spatial Controller' ) ) ) {\n\n\t\t\t\t\tvar hand = gamepad.hand;\n\n\t\t\t\t\tif ( id === 0 && ( hand === '' || hand === 'right' ) ) { return gamepad; }\n\t\t\t\t\tif ( id === 1 && ( hand === 'left' ) ) { return gamepad; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateControllers() {\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar gamepad = findGamepad( i );\n\n\t\t\t\tif ( gamepad !== undefined && gamepad.pose !== undefined ) {\n\n\t\t\t\t\tif ( gamepad.pose === null ) { return; }\n\n\t\t\t\t\t// Pose\n\n\t\t\t\t\tvar pose = gamepad.pose;\n\n\t\t\t\t\tif ( pose.hasPosition === false ) { controller.position.set( 0.2, - 0.6, - 0.05 ); }\n\n\t\t\t\t\tif ( pose.position !== null ) { controller.position.fromArray( pose.position ); }\n\t\t\t\t\tif ( pose.orientation !== null ) { controller.quaternion.fromArray( pose.orientation ); }\n\t\t\t\t\tcontroller.matrix.compose( controller.position, controller.quaternion, controller.scale );\n\t\t\t\t\tcontroller.matrix.premultiply( standingMatrix );\n\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.quaternion, controller.scale );\n\t\t\t\t\tcontroller.matrixWorldNeedsUpdate = true;\n\t\t\t\t\tcontroller.visible = true;\n\n\t\t\t\t\t// Trigger\n\n\t\t\t\t\tvar buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;\n\n\t\t\t\t\tif ( triggers[ i ] === undefined ) { triggers[ i ] = false; }\n\n\t\t\t\t\tif ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\n\n\t\t\t\t\t\ttriggers[ i ] = gamepad.buttons[ buttonId ].pressed;\n\n\t\t\t\t\t\tif ( triggers[ i ] === true ) {\n\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectstart' } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectend' } );\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'select' } );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Grip\n\t\t\t\t\tbuttonId = 2;\n\n\t\t\t\t\tif ( grips[ i ] === undefined ) { grips[ i ] = false; }\n\n\t\t\t\t\t// Skip if the grip button doesn't exist on this controller\n\t\t\t\t\tif ( gamepad.buttons[ buttonId ] !== undefined ) {\n\n\t\t\t\t\t\tif ( grips[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\n\n\t\t\t\t\t\t\tgrips[ i ] = gamepad.buttons[ buttonId ].pressed;\n\n\t\t\t\t\t\t\tif ( grips[ i ] === true ) {\n\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeezestart' } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeezeend' } );\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeeze' } );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontroller.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateViewportFromBounds( viewport, bounds ) {\n\n\t\t\tif ( bounds !== null && bounds.length === 4 ) {\n\n\t\t\t\tviewport.set( bounds[ 0 ] * renderWidth, bounds[ 1 ] * renderHeight, bounds[ 2 ] * renderWidth, bounds[ 3 ] * renderHeight );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new Group();\n\t\t\t\tcontroller.matrixAutoUpdate = false;\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller;\n\n\t\t};\n\n\t\tthis.getDevice = function () {\n\n\t\t\treturn device;\n\n\t\t};\n\n\t\tthis.setDevice = function ( value ) {\n\n\t\t\tif ( value !== undefined ) { device = value; }\n\n\t\t\tanimation.setContext( value );\n\n\t\t};\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t};\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tvar userHeight = referenceSpaceType === 'local-floor' ? 1.6 : 0;\n\n\t\t\tdevice.depthNear = camera.near;\n\t\t\tdevice.depthFar = camera.far;\n\n\t\t\tdevice.getFrameData( frameData );\n\n\t\t\t//\n\n\t\t\tif ( referenceSpaceType === 'local-floor' ) {\n\n\t\t\t\tvar stageParameters = device.stageParameters;\n\n\t\t\t\tif ( stageParameters ) {\n\n\t\t\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstandingMatrix.makeTranslation( 0, userHeight, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar pose = frameData.pose;\n\n\t\t\ttempCamera.matrix.copy( standingMatrix );\n\t\t\ttempCamera.matrix.decompose( tempCamera.position, tempCamera.quaternion, tempCamera.scale );\n\n\t\t\tif ( pose.orientation !== null ) {\n\n\t\t\t\ttempQuaternion.fromArray( pose.orientation );\n\t\t\t\ttempCamera.quaternion.multiply( tempQuaternion );\n\n\t\t\t}\n\n\t\t\tif ( pose.position !== null ) {\n\n\t\t\t\ttempQuaternion.setFromRotationMatrix( standingMatrix );\n\t\t\t\ttempPosition.fromArray( pose.position );\n\t\t\t\ttempPosition.applyQuaternion( tempQuaternion );\n\t\t\t\ttempCamera.position.add( tempPosition );\n\n\t\t\t}\n\n\t\t\ttempCamera.updateMatrixWorld();\n\n\t\t\t//\n\n\t\t\tcamera.matrixWorld.copy( tempCamera.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tcameraL.near = camera.near;\n\t\t\tcameraR.near = camera.near;\n\n\t\t\tcameraL.far = camera.far;\n\t\t\tcameraR.far = camera.far;\n\n\t\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\n\t\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\n\n\t\t\t// TODO (mrdoob) Double check this code\n\n\t\t\tstandingMatrixInverse.getInverse( standingMatrix );\n\n\t\t\tif ( referenceSpaceType === 'local-floor' ) {\n\n\t\t\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\n\t\t\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\n\t\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\n\t\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\t// envMap and Mirror needs camera.matrixWorld\n\n\t\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\n\t\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\n\n\t\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\n\t\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\n\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\t//\n\n\t\t\tvar layers = device.getLayers();\n\n\t\t\tif ( layers.length ) {\n\n\t\t\t\tvar layer = layers[ 0 ];\n\n\t\t\t\tupdateViewportFromBounds( cameraL.viewport, layer.leftBounds );\n\t\t\t\tupdateViewportFromBounds( cameraR.viewport, layer.rightBounds );\n\n\t\t\t}\n\n\t\t\tupdateControllers();\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getStandingMatrix = function () {\n\n\t\t\treturn standingMatrix;\n\n\t\t};\n\n\t\tthis.isPresenting = isPresenting;\n\n\t\t// Animation Loop\n\n\t\tvar animation = new WebGLAnimation();\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tanimation.setAnimationLoop( callback );\n\n\t\t\tif ( isPresenting() ) { animation.start(); }\n\n\t\t};\n\n\t\tthis.submitFrame = function () {\n\n\t\t\tif ( isPresenting() ) { device.submitFrame(); }\n\n\t\t};\n\n\t\tthis.dispose = function () {\n\n\t\t\tif ( typeof window !== 'undefined' ) {\n\n\t\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tthis.setFrameOfReferenceType = function () {\n\n\t\t\tconsole.warn( 'THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.' );\n\n\t\t};\n\n\t}\n\n\tObject.assign( WebVRManager.prototype, EventDispatcher.prototype );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebXRManager( renderer, gl ) {\n\n\t\tvar scope = this;\n\n\t\tvar session = null;\n\n\t\t// var framebufferScaleFactor = 1.0;\n\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\n\t\tvar pose = null;\n\n\t\tvar controllers = [];\n\t\tvar sortedInputSources = [];\n\n\t\tfunction isPresenting() {\n\n\t\t\treturn session !== null && referenceSpace !== null;\n\n\t\t}\n\n\t\t//\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new Group();\n\t\t\t\tcontroller.matrixAutoUpdate = false;\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller;\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tif ( sortedInputSources[ i ] === event.inputSource ) {\n\n\t\t\t\t\tcontrollers[ i ].dispatchEvent( { type: event.type } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\trenderer.setFramebuffer( null );\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\t\tanimation.stop();\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tfunction onRequestReferenceSpace( value ) {\n\n\t\t\treferenceSpace = value;\n\n\t\t\tanimation.setContext( session );\n\t\t\tanimation.start();\n\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( /* value */ ) {\n\n\t\t\t// framebufferScaleFactor = value;\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\tsession.updateRenderState( { baseLayer: new XRWebGLLayer( session, gl ) } );\n\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t\t//\n\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t\t\tupdateInputSources();\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction updateInputSources() {\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tsortedInputSources[ i ] = findInputSource( i );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction findInputSource( id ) {\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor ( var i = 0; i < inputSources.length; i ++ ) {\n\n\t\t\t\tvar inputSource = inputSources[ i ];\n\t\t\t\tvar handedness = inputSource.handedness;\n\n\t\t\t\tif ( id === 0 && ( handedness === 'none' || handedness === 'right' ) ) { return inputSource; }\n\t\t\t\tif ( id === 1 && ( handedness === 'left' ) ) { return inputSource; }\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t}\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update camera and its children\n\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.isPresenting = isPresenting;\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tvar view = views[ i ];\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\t\t\t\t\tvar viewMatrix = view.transform.inverse.matrix;\n\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\n\t\t\t\t\tcamera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar inputSource = sortedInputSources[ i ];\n\n\t\t\t\tif ( inputSource ) {\n\n\t\t\t\t\tvar inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\tcontroller.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.rotation, controller.scale );\n\t\t\t\t\t\tcontroller.visible = true;\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t\t// DEPRECATED\n\n\t\tthis.getStandingMatrix = function () {\n\n\t\t\tconsole.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );\n\t\t\treturn new Matrix4();\n\n\t\t};\n\n\t\tthis.getDevice = function () {\n\n\t\t\tconsole.warn( 'THREE.WebXRManager: getDevice() has been deprecated.' );\n\n\t\t};\n\n\t\tthis.setDevice = function () {\n\n\t\t\tconsole.warn( 'THREE.WebXRManager: setDevice() has been deprecated.' );\n\n\t\t};\n\n\t\tthis.setFrameOfReferenceType = function () {\n\n\t\t\tconsole.warn( 'THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.' );\n\n\t\t};\n\n\t\tthis.submitFrame = function () {};\n\n\t}\n\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null;\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.gammaInput = false;\n\t\tthis.gammaOutput = false;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t\t_isContextLost = false,\n\n\t\t\t// internal state cache\n\n\t\t\t_framebuffer = null,\n\n\t\t\t_currentActiveCubeFace = 0,\n\t\t\t_currentActiveMipmapLevel = 0,\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\n\t\t\t// geometry and program caching\n\n\t\t\t_currentGeometryProgram = {\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false\n\t\t\t},\n\n\t\t\t_currentCamera = null,\n\t\t\t_currentArrayCamera = null,\n\n\t\t\t_currentViewport = new Vector4(),\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\n\t\t\t//\n\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\n\t\t\t_pixelRatio = 1,\n\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\n\t\t\t// frustum\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t// clipping\n\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\n\t\t\t// camera matrices cache\n\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_vector3 = new Vector3();\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\n\t\t\t\txrCompatible: true\n\t\t\t};\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, attributes, geometries, objects;\n\t\tvar programCache, renderLists, renderStates;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tvar utils;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\t\textensions.get( 'OES_texture_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tattributes = new WebGLAttributes( _gl );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates();\n\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// vr\n\n\t\tvar vr = ( typeof navigator !== 'undefined' && 'xr' in navigator ) ? new WebXRManager( _this, _gl ) : new WebVRManager( _this );\n\n\t\tthis.vr = vr;\n\n\t\t// Multiview\n\n\t\tvar multiview = new WebGLMultiview( _this, _gl );\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.loseContext(); }\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.restoreContext(); }\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) { return; }\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tif ( vr.isPresenting() ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\t\ttarget = new Vector4();\n\n\t\t\t}\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tobjects.dispose();\n\n\t\t\tvr.dispose();\n\n\t\t\tanimation.stop();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.color );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( 4, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\n\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\n\t\t\t\t_currentGeometryProgram.program = program.id;\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tif ( index !== null && index.count === 0 ) { return; }\n\t\t\tif ( position === undefined || position.count === 0 ) { return; }\n\n\t\t\t//\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( object, geometry, material, program );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( 34963, attribute.buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = Infinity;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdataCount = index.count;\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\tdataCount = position.count;\n\n\t\t\t}\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) { return; }\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( 4 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( 5 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( 6 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( 0 );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( object, geometry, material, program ) {\n\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\n\n\t\t\t}\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\n\n\t\t\t\t\t\tvar attribute = attributes.get( object.instanceMatrix );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 0, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 1, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 2, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 3, 1 );\n\n\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.material ) {\n\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( vr.isPresenting() ) { return; }\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\tvr.setAnimationLoop( callback );\n\n\t\t\tanimation.start();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t\t}\n\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\t\tforceClear = arguments[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost ) { return; }\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t_currentGeometryProgram.program = null;\n\t\t\t_currentGeometryProgram.wireframe = false;\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\n\n\t\t\tif ( vr.enabled && vr.isPresenting() ) {\n\n\t\t\t\tcamera = vr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) { _clipping.beginShadows(); }\n\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tif ( _clippingEnabled ) { _clipping.endShadows(); }\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset ) { this.info.reset(); }\n\n\t\t\tif ( renderTarget !== undefined ) {\n\n\t\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tif ( vr.enabled && multiview.isAvailable() ) {\n\n\t\t\t\tmultiview.attachCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\tif ( vr.enabled ) {\n\n\t\t\t\tif ( multiview.isAvailable() ) {\n\n\t\t\t\t\tmultiview.detachCamera( camera );\n\n\t\t\t\t}\n\n\t\t\t\tvr.submitFrame();\n\n\t\t\t}\n\n\t\t\t// _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tif ( vr.enabled && multiview.isAvailable() ) {\n\n\t\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\n\t\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t\t_currentGeometryProgram.program = null;\n\t\t\t\t_currentGeometryProgram.wireframe = false;\n\n\t\t\t\trenderObjectImmediate( object, program );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t}\n\n\t\tfunction initMaterial( material, fog, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tvar lightsStateVersion = lights.state.version;\n\n\t\t\tvar parameters = programCache.getParameters(\n\t\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( material, parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\t\tprogramChange = false;\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.onBeforeCompile( materialProperties.shader, _this );\n\n\t\t\t\t// Computing cache key again as onBeforeCompile may have changed the shaders\n\t\t\t\tprogramCacheKey = programCache.getProgramCacheKey( material, parameters );\n\n\t\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, programCacheKey );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tvar materialProperties = properties.get( material );\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.version !== materialProperties.__version ) {\n\n\t\t\t\tinitMaterial( material, fog, object );\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\t\tmultiview.updateCameraProjectionMatricesUniform( camera, p_uniforms );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\t\t\tmultiview.updateCameraViewMatricesUniform( camera, p_uniforms );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// not sure why, but otherwise weird things happen\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t\trefreshUniformsMatcap( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\t\tm_uniforms.color.value.copy( material.color );\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t\t}\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\tmultiview.updateObjectMatricesUniforms( object, camera, p_uniforms );\n\n\t\t\t} else {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\n\t\t\t}\n\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\t\tuniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniforms.transparency.value = material.transparency;\n\n\t\t}\n\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\t\tif ( material.matcap ) {\n\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\t//\n\t\tthis.setFramebuffer = function ( value ) {\n\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\n\n\t\t\t_framebuffer = value;\n\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace || 0 ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar levelScale = Math.pow( 2, - level );\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\n\t\t\tvar glFormat = utils.convert( texture.format );\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tObject.assign( FogExp2.prototype, {\n\n\t\tisFogExp2: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new FogExp2( this.color, this.density );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tObject.assign( Fog.prototype, {\n\n\t\tisFog: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new Fog( this.color, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *  rotation: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\tvar _worldScale = new Vector3();\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\tvar _rotatedPosition = new Vector2();\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\tvar _vB$1 = new Vector3();\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\tvar _uvB$1 = new Vector2();\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tvar float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tif ( raycaster.camera === null ) {\n\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\t\t\tif ( rotation !== 0 ) {\n\n\t\t\t\tcos = Math.cos( rotation );\n\t\t\t\tsin = Math.sin( rotation );\n\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t\t_uvA$1.set( 0, 0 );\n\t\t\t_uvB$1.set( 1, 0 );\n\t\t\t_uvC$1.set( 1, 1 );\n\n\t\t\t// check first triangle\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\n\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t\t_uvB$1.set( 0, 1 );\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\n\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\n\n\t\t\treturn this;\n\n\t\t}\n\n\n\t} );\n\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t\t// to check if rotation is not zero\n\t\tif ( sin !== undefined ) {\n\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t\t} else {\n\n\t\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t\t}\n\n\n\t\tvertexPosition.copy( mvPosition );\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y;\n\n\t\t// transform to world space\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n\t}\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v1$4 = new Vector3();\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tisLOD: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) { distance = 0; }\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn levels[ i - 1 ].object;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 );\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar vector = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\t\tvector.x = skinWeight.getX( i );\n\t\t\t\tvector.y = skinWeight.getY( i );\n\t\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tvar _offsetMatrix = new Matrix4();\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\tthis.frame = - 1;\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone, i, il;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t},\n\n\t\tgetBoneByName: function ( name ) {\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone.name === name ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh( geometry, material, count ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\t\tthis.count = count;\n\n\t}\n\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: InstancedMesh,\n\n\t\tisInstancedMesh: true,\n\n\t\tgetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\n\t\t\tif ( _mesh.material === undefined ) { return; }\n\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t\t// calculate the world matrix for each instance\n\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t\t// the mesh represents this single instance\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t\t// process the result of raycast\n\n\t\t\t\tif ( _instanceIntersects.length > 0 ) {\n\n\t\t\t\t\t_instanceIntersects[ 0 ].instanceId = instanceId;\n\t\t\t\t\t_instanceIntersects[ 0 ].object = this;\n\n\t\t\t\t\tintersects.push( _instanceIntersects[ 0 ] );\n\n\t\t\t\t\t_instanceIntersects.length = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start = new Vector3();\n\tvar _end = new Vector3();\n\tvar _inverseMatrix$1 = new Matrix4();\n\tvar _ray$1 = new Ray();\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tlineDistances[ 0 ] = 0;\n\n\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar precision = raycaster.linePrecision;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\n\t\t\t_sphere$2.radius += precision;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\t\tvar localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localPrecisionSq = localPrecision * localPrecision;\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start$1 = new Vector3();\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t_start$1.copy( vertices[ i ] );\n\t\t\t\t\t_end$1.copy( vertices[ i + 1 ] );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t *\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\tvar _ray$2 = new Ray();\n\tvar _sphere$3 = new Sphere();\n\tvar _position$1 = new Vector3();\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\n\t\t\t_sphere$3.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t_position$1.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\n\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\t\tconstructor: VideoTexture,\n\n\t\tisVideoTexture: true,\n\n\t\tupdate: function () {\n\n\t\t\tvar video = this.image;\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar i, j, l, o, ol;\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\t\tvar vertex;\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar position, indices, groups;\n\t\t\tvar group, start, count;\n\t\t\tvar index1, index2;\n\n\t\t\tvertex = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\t\t\t\tindices = geometry.index;\n\t\t\t\tgroups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\t\tstart = group.start;\n\t\t\t\t\tcount = group.count;\n\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( key in edges ) {\n\n\t\t\t\t\te = edges[ key ];\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tvar i, j;\n\n\t\tif ( func.length < 3 ) {\n\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t\t}\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\tvar a = i * sliceCount + j;\n\t\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\n\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\n\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t, 0, - r, t,\n\t\t\t 0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t r, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar P = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\tTubeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, j;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * Port from https://github.com/mapbox/earcut (v2.1.5)\n\t */\n\n\tvar Earcut = {\n\n\t\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\t\tdim = dim || 2;\n\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\t\ttriangles = [];\n\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\n\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\n\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\t\tif ( data.length > 80 * dim ) {\n\n\t\t\t\tminX = maxX = data[ 0 ];\n\t\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\t\tx = data[ i ];\n\t\t\t\t\ty = data[ i + 1 ];\n\t\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\n\n\t\t\t\t}\n\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t\t}\n\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\t\treturn triangles;\n\n\t\t}\n\n\t};\n\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\tfunction linkedList( data, start, end, dim, clockwise ) {\n\n\t\tvar i, last;\n\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t} else {\n\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t}\n\n\t\tif ( last && equals( last, last.next ) ) {\n\n\t\t\tremoveNode( last );\n\t\t\tlast = last.next;\n\n\t\t}\n\n\t\treturn last;\n\n\t}\n\n\t// eliminate colinear or duplicate points\n\tfunction filterPoints( start, end ) {\n\n\t\tif ( ! start ) { return start; }\n\t\tif ( ! end ) { end = start; }\n\n\t\tvar p = start,\n\t\t\tagain;\n\t\tdo {\n\n\t\t\tagain = false;\n\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif ( p === p.next ) { break; }\n\t\t\t\tagain = true;\n\n\t\t\t} else {\n\n\t\t\t\tp = p.next;\n\n\t\t\t}\n\n\t\t} while ( again || p !== end );\n\n\t\treturn end;\n\n\t}\n\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\t\tif ( ! ear ) { return; }\n\n\t\t// interlink polygon nodes in z-order\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\n\n\t\tvar stop = ear,\n\t\t\tprev, next;\n\n\t\t// iterate through ears, slicing them one by one\n\t\twhile ( ear.prev !== ear.next ) {\n\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push( prev.i / dim );\n\t\t\t\ttriangles.push( ear.i / dim );\n\t\t\t\ttriangles.push( next.i / dim );\n\n\t\t\t\tremoveNode( ear );\n\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tear = next;\n\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\t\tif ( ear === stop ) {\n\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif ( ! pass ) {\n\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\tfunction isEar( ear ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// now make sure we don't have other points inside the potential ear\n\t\tvar p = ear.next.next;\n\n\t\twhile ( p !== ear.prev ) {\n\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// triangle bbox; min & max are calculated like this for speed\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t\t// z-order range for the current triangle bbox;\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t\tvar p = ear.prevZ,\n\t\t\tn = ear.nextZ;\n\n\t\t// look for points inside the triangle in both directions\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\t// look for remaining points in decreasing z-order\n\t\twhile ( p && p.z >= minZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t}\n\n\t\t// look for remaining points in increasing z-order\n\t\twhile ( n && n.z <= maxZ ) {\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// go through all polygon nodes and cure small local self-intersections\n\tfunction cureLocalIntersections( start, triangles, dim ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tvar a = p.prev,\n\t\t\t\tb = p.next.next;\n\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\t\ttriangles.push( a.i / dim );\n\t\t\t\ttriangles.push( p.i / dim );\n\t\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t\t// remove two nodes involved\n\t\t\t\tremoveNode( p );\n\t\t\t\tremoveNode( p.next );\n\n\t\t\t\tp = start = b;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn p;\n\n\t}\n\n\t// try splitting polygon into two and triangulate them independently\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\t\tdo {\n\n\t\t\tvar b = a.next.next;\n\t\t\twhile ( b !== a.prev ) {\n\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t\t// filter colinear points around the cuts\n\t\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t\t// run earcut on each half\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\n\t\t\t}\n\n\t\t\ta = a.next;\n\n\t\t} while ( a !== start );\n\n\t}\n\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\t\tvar queue = [],\n\t\t\ti, len, start, end, list;\n\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\t\tstart = holeIndices[ i ] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\t\tlist = linkedList( data, start, end, dim, false );\n\t\t\tif ( list === list.next ) { list.steiner = true; }\n\t\t\tqueue.push( getLeftmost( list ) );\n\n\t\t}\n\n\t\tqueue.sort( compareX );\n\n\t\t// process holes from left to right\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\t\teliminateHole( queue[ i ], outerNode );\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t\t}\n\n\t\treturn outerNode;\n\n\t}\n\n\tfunction compareX( a, b ) {\n\n\t\treturn a.x - b.x;\n\n\t}\n\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\tfunction eliminateHole( hole, outerNode ) {\n\n\t\touterNode = findHoleBridge( hole, outerNode );\n\t\tif ( outerNode ) {\n\n\t\t\tvar b = splitPolygon( outerNode, hole );\n\t\t\tfilterPoints( b, b.next );\n\n\t\t}\n\n\t}\n\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\tfunction findHoleBridge( hole, outerNode ) {\n\n\t\tvar p = outerNode,\n\t\t\thx = hole.x,\n\t\t\thy = hole.y,\n\t\t\tqx = - Infinity,\n\t\t\tm;\n\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\t\tdo {\n\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\t\tqx = x;\n\t\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== outerNode );\n\n\t\tif ( ! m ) { return null; }\n\n\t\tif ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint\n\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\tmx = m.x,\n\t\t\tmy = m.y,\n\t\t\ttanMin = Infinity,\n\t\t\ttan;\n\n\t\tp = m.next;\n\n\t\twhile ( p !== stop ) {\n\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn m;\n\n\t}\n\n\t// interlink polygon nodes in z-order\n\tfunction indexCurve( start, minX, minY, invSize ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\n\t\tsortLinked( p );\n\n\t}\n\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\tfunction sortLinked( list ) {\n\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\n\t\t\tinSize = 1;\n\n\t\tdo {\n\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile ( p ) {\n\n\t\t\t\tnumMerges ++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\t\tpSize ++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif ( ! q ) { break; }\n\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize --;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\n\t\t\t\t\telse { list = e; }\n\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\n\t\t} while ( numMerges > 1 );\n\n\t\treturn list;\n\n\t}\n\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\tfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * ( x - minX ) * invSize;\n\t\ty = 32767 * ( y - minY ) * invSize;\n\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\t\treturn x | ( y << 1 );\n\n\t}\n\n\t// find the leftmost node of a polygon ring\n\tfunction getLeftmost( start ) {\n\n\t\tvar p = start,\n\t\t\tleftmost = start;\n\t\tdo {\n\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn leftmost;\n\n\t}\n\n\t// check if a point lies within a convex triangle\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n\t}\n\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\tfunction isValidDiagonal( a, b ) {\n\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\t\t   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n\t}\n\n\t// signed area of a triangle\n\tfunction area( p, q, r ) {\n\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n\t}\n\n\t// check if two points are equal\n\tfunction equals( p1, p2 ) {\n\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\n\t}\n\n\t// check if two segments intersect\n\tfunction intersects( p1, q1, p2, q2 ) {\n\n\t\tif ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t\t   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n\t}\n\n\t// check if a polygon diagonal intersects any polygon segments\n\tfunction intersectsPolygon( a, b ) {\n\n\t\tvar p = a;\n\t\tdo {\n\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn false;\n\n\t}\n\n\t// check if a polygon diagonal is locally inside the polygon\n\tfunction locallyInside( a, b ) {\n\n\t\treturn area( a.prev, a, a.next ) < 0 ?\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n\t}\n\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\tfunction middleInside( a, b ) {\n\n\t\tvar p = a,\n\t\t\tinside = false,\n\t\t\tpx = ( a.x + b.x ) / 2,\n\t\t\tpy = ( a.y + b.y ) / 2;\n\t\tdo {\n\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\t\t{ inside = ! inside; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn inside;\n\n\t}\n\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\tfunction splitPolygon( a, b ) {\n\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\t\tan = a.next,\n\t\t\tbp = b.prev;\n\n\t\ta.next = b;\n\t\tb.prev = a;\n\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\n\t\treturn b2;\n\n\t}\n\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\tfunction insertNode( i, x, y, last ) {\n\n\t\tvar p = new Node( i, x, y );\n\n\t\tif ( ! last ) {\n\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\n\t\t} else {\n\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\n\t\t}\n\n\t\treturn p;\n\n\t}\n\n\tfunction removeNode( p ) {\n\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\n\n\t}\n\n\tfunction Node( i, x, y ) {\n\n\t\t// vertex index in coordinates array\n\t\tthis.i = i;\n\n\t\t// vertex coordinates\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\t// previous and next vertex nodes in a polygon ring\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\n\t\t// z-order curve value\n\t\tthis.z = null;\n\n\t\t// previous and next nodes in z-order\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null;\n\n\t\t// indicates whether this is a steiner point\n\t\tthis.steiner = false;\n\n\t}\n\n\tfunction signedArea( data, start, end, dim ) {\n\n\t\tvar sum = 0;\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\t\tj = i;\n\n\t\t}\n\n\t\treturn sum;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\t\tvar holeIndices = []; // array of hole indices\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\taddContour( vertices, contour );\n\n\t\t\t//\n\n\t\t\tvar holeIndex = contour.length;\n\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\t\tholeIndices.push( holeIndex );\n\t\t\t\tholeIndex += holes[ i ].length;\n\t\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t\t}\n\n\t\t\treturn faces;\n\n\t\t}\n\n\t};\n\n\tfunction removeDupEndPts( points ) {\n\n\t\tvar l = points.length;\n\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.pop();\n\n\t\t}\n\n\t}\n\n\tfunction addContour( vertices, contour ) {\n\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\tvertices.push( contour[ i ].x );\n\t\t\tvertices.push( contour[ i ].y );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  depth: <float>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\tExtrudeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tvar scope = this;\n\n\t\tvar verticesArray = [];\n\t\tvar uvArray = [];\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar placeholder = [];\n\n\t\t\t// options\n\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tvar extrudePath = options.extrudePath;\n\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar extrudePts, extrudeByPath = false;\n\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tvar ahole, h, hl; // looping of holes\n\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tvar b, bs, t, z,\n\t\t\t\tvert, vlen = vertices.length,\n\t\t\t\tface, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tvar contourMovements = [];\n\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tvar holesMovements = [],\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tvar s;\n\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\tvar layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tvar j, k;\n\t\t\t\ti = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = i - 1;\n\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tvar s = 0,\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t//\n\n\tvar WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tfunction toJSON( shapes, options, data ) {\n\n\t\t//\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\n\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\n\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tvar ix, iy;\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tvar uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 0.5;\n\t\touterRadius = outerRadius || 1;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\tShapeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar i, l, shapeHole;\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\tShapeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t//\n\n\tfunction toJSON$1( shapes, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\theight = height || 1;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\n\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, s;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  color: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 0.5;\n\t\tthis.metalness = 0.5;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  reflectivity: <float>\n\t *  clearcoat: <float>\n\t *  clearcoatRoughness: <float>\n\t *\n\t *  sheen: <Color>\n\t *\n\t *  clearcoatNormalScale: <Vector2>,\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatRoughness = 0.0;\n\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.transparency = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\n\t\tif ( source.sheen ) { this.sheen = ( this.sheen || new Color() ).copy( source.sheen ); }\n\t\telse { this.sheen = null; }\n\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.transparency = source.transparency;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.MultiplyOperation,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  gradientMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMeshPhongMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.gradientMap = null;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshPhongMaterial.prototype.copy.call( this, source );\n\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  matcap: new THREE.Texture( <Image> ),\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) { return; } // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) { return; } // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\n\n\t\t\tfps = fps || 30;\n\n\t\t\tvar clip = sourceClip.clone();\n\n\t\t\tclip.name = name;\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tvar track = clip.tracks[ i ];\n\t\t\t\tvar valueSize = track.getValueSize();\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\n\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\n\n\t\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( times.length === 0 ) { continue; }\n\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\t\ttracks.push( track );\n\n\t\t\t}\n\n\t\t\tclip.tracks = tracks;\n\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// shift all tracks such that clip begins at t=0\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Static methods\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( KeyframeTrack.prototype, {\n\n\t\tconstructor: KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t\t++ from;\n\n\t\t\t}\n\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t\t-- to;\n\n\t\t\t}\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) { to = Math.max( to, 1 ), from = to - 1; }\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tkeep = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\t\treturn track;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrack.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n\tfunction parseKeyframeTrack( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks, duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tvar index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\n\t}\n\n\tObject.assign( Loader.prototype, {\n\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\n\n\t\tparse: function ( /* data */ ) {},\n\n\t\tsetCrossOrigin: function ( crossOrigin ) {\n\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( path ) {\n\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( resourcePath ) {\n\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FileLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\t\tdata = decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = this.response;\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\n\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\n\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( value ) {\n\n\t\t\tthis.requestHeader = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io/\n\t */\n\n\tfunction AnimationLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AnimationLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CompressedTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: DataTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\t\tif ( ! texData ) { return; }\n\n\t\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\tfunction onImageLoad() {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\tfunction onImageError( event ) {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tif ( onError ) { onError( event ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CubeTextureLoader,\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: TextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = image;\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\n\tEllipseCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension || 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t};\n\n\tSplineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = this.curves[ i ];\n\t\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = json.curves[ i ];\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tconstructor: Path,\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = this.holes[ i ];\n\t\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = json.holes[ i ];\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\n\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\n\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\t_projScreenMatrix: new Matrix4(),\n\n\t\t_lightPositionWorld: new Vector3(),\n\n\t\t_lookTarget: new Vector3(),\n\n\t\tgetViewportCount: function () {\n\n\t\t\treturn this._viewportCount;\n\n\t\t},\n\n\t\tgetFrustum: function () {\n\n\t\t\treturn this._frustum;\n\n\t\t},\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\tshadowCamera.lookAt( lookTarget );\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromMatrix( projScreenMatrix );\n\n\t\t\tshadowMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t},\n\n\t\tgetViewport: function ( viewportIndex ) {\n\n\t\t\treturn this._viewports[ viewportIndex ];\n\n\t\t},\n\n\t\tgetFrameExtents: function () {\n\n\t\t\treturn this._frameExtents;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction PointLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: PointLightShadow,\n\n\t\tisPointLightShadow: true,\n\n\t\tupdateMatrices: function ( light, viewportIndex ) {\n\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\n\n\t\t\tvar camera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tcamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.copy( camera.position );\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\t\tcamera.lookAt( lookTarget );\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\n\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromMatrix( projScreenMatrix );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\n\t\tthis.right = ( right !== undefined ) ? right : 1;\n\t\tthis.top = ( top !== undefined ) ? top : 1;\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow() {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow,\n\n\t\tisDirectionalLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t}\n\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.textures = {};\n\n\t}\n\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: MaterialLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\n\t\t\tif ( json.vertexColors !== undefined ) { material.vertexColors = json.vertexColors; }\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\n\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\n\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\n\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\n\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\n\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\n\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\n\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\n\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\n\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\n\n\t\t\t// Shader Material\n\n\t\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\n\n\t\t\tif ( json.extensions !== undefined ) {\n\n\t\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\n\n\t\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\t\tmaterial.transparent = true;\n\n\t\t\t}\n\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\n\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\n\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\n\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\n\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\n\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\n\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\n\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\n\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\n\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\n\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tvar LoaderUtils = {\n\n\t\tdecodeText: function ( array ) {\n\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\t\treturn new TextDecoder().decode( array );\n\n\t\t\t}\n\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t\t} catch ( e ) { // see #16358\n\n\t\t\t\treturn s;\n\n\t\t\t}\n\n\t\t},\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar index = url.lastIndexOf( '/' );\n\n\t\t\tif ( index === - 1 ) { return './'; }\n\n\t\t\treturn url.substr( 0, index + 1 );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tdata.maxInstancedCount = this.maxInstancedCount;\n\n\t\t\tdata.isInstancedBufferGeometry = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\n\n\t\tif ( typeof ( normalized ) === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ()\t{\n\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\n\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\tdata.isInstancedBufferAttribute = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: BufferGeometryLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tvar bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif ( morphAttributes ) {\n\n\t\t\t\tfor ( var key in morphAttributes ) {\n\n\t\t\t\t\tvar attributeArray = morphAttributes[ key ];\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar attribute = attributeArray[ i ];\n\t\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\t\t\tvar bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\tif ( json.name ) { geometry.name = json.name; }\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ObjectLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar shapes = this.parseShape( json.shapes );\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseShape: function ( json ) {\n\n\t\t\tvar shapes = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t},\n\n\t\tparseGeometries: function ( json, shapes ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.closed\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tif ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {\n\n\t\t\t\t\t\t\t\tvar geometryLoader = new THREE.LegacyJSONLoader();\n\t\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.resourcePath ).geometry;\n\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type \"Geometry\".' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar cache = {}; // MultiMaterial\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\n\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\n\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// load single image\n\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\n\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\n\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\n\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\n\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\n\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) { return undefined; }\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\n\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\n\n\t\t\tif ( data.drawMode !== undefined ) { object.setDrawMode( data.drawMode ); }\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\t/**\n\t * @author thespite / http://clicktorelease.com/\n\t */\n\n\n\tfunction ImageBitmapLoader( manager ) {\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.options = undefined;\n\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageBitmapLoader,\n\n\t\tsetOptions: function setOptions( options ) {\n\n\t\t\tthis.options = options;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tfetch( url ).then( function ( res ) {\n\n\t\t\t\treturn res.blob();\n\n\t\t\t} ).then( function ( blob ) {\n\n\t\t\t\tif ( scope.options === undefined ) {\n\n\t\t\t\t\t// Workaround for FireFox. It causes an error if you pass options.\n\t\t\t\t\treturn createImageBitmap( blob );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t\t}\n\n\t\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\t\tCache.add( url, imageBitmap );\n\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} ).catch( function ( e ) {\n\n\t\t\t\tif ( onError ) { onError( e ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) { return []; }\n\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\t{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size ) {\n\n\t\t\tif ( size === undefined ) { size = 100; }\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths( text, size, this.data );\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction createPaths( text, size, data ) {\n\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\tvar paths = [];\n\n\t\tvar offsetX = 0, offsetY = 0;\n\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\tvar char = chars[ i ];\n\n\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\n\t\t\t} else {\n\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn paths;\n\n\t}\n\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) {\n\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar path = new ShapePath();\n\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif ( glyph.o ) {\n\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FontLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( _context === undefined ) {\n\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn _context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\t_context = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AudioLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Primary reference:\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\n\t// 3-band SH defined by 9 coefficients\n\n\tfunction SphericalHarmonics3() {\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tObject.assign( SphericalHarmonics3.prototype, {\n\n\t\tisSphericalHarmonics3: true,\n\n\t\tset: function ( coefficients ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tzero: function () {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\tgetAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t\t// band 1\n\t\t\ttarget.addScale( coeff[ 1 ], 0.488603 * y );\n\t\t\ttarget.addScale( coeff[ 2 ], 0.488603 * z );\n\t\t\ttarget.addScale( coeff[ 3 ], 0.488603 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\t\ttarget.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\t\ttarget.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\t\ttarget.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\t\ttarget.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\tgetIrradianceAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t\t// band 1\n\t\t\ttarget.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\t\ttarget.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\t\ttarget.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\t\ttarget.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\t\ttarget.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\t\ttarget.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\t\ttarget.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tadd: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\n\t\tscale: function ( s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( sh, alpha ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcopy: function ( sh ) {\n\n\t\t\treturn this.set( sh.coefficients );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( SphericalHarmonics3, {\n\n\t\t// evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\tgetBasisAt: function ( normal, shBasis ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\t// band 0\n\t\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t\t// band 1\n\t\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t\t// band 2\n\t\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * A LightProbe is a source of indirect-diffuse light\n\t */\n\n\tfunction LightProbe( sh, intensity ) {\n\n\t\tLight.call( this, undefined, intensity );\n\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\n\n\t}\n\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: LightProbe,\n\n\t\tisLightProbe: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.sh.copy( source.sh );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( skyColor );\n\t\tvar color2 = new Color().set( groundColor );\n\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tvar c0 = Math.sqrt( Math.PI );\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: HemisphereLightProbe,\n\n\t\tisHemisphereLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying colors not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction AmbientLightProbe( color, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: AmbientLightProbe,\n\n\t\tisAmbientLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying color not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tvar _eyeRight = new Matrix4();\n\tvar _eyeLeft = new Matrix4();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar cache = this._cache;\n\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = ( cache.near * Math.tan( _Math.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$2 = new Vector3();\n\tvar _quaternion$3 = new Quaternion();\n\tvar _scale$1 = new Vector3();\n\tvar _orientation = new Vector3();\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\n\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t// code path for Chrome (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._pausedAt = 0;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaElementSource: function ( mediaElement ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaStreamSource: function ( mediaStream ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) { this.play(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function ( delay ) {\n\n\t\t\tif ( delay === undefined ) { delay = 0; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.start( this._startedAt, this._pausedAt + this.offset, this.duration );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\tthis.setDetune( this.detune );\n\t\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis._pausedAt = ( this.context.currentTime - this._startedAt ) * this.playbackRate;\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._pausedAt = 0;\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) { value = []; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDetune: function ( value ) {\n\n\t\t\tthis.detune = value;\n\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDetune: function () {\n\n\t\t\treturn this.detune;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopStart: function ( value ) {\n\n\t\t\tthis.loopStart = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopEnd: function ( value ) {\n\n\t\t\tthis.loopEnd = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$3 = new Vector3();\n\tvar _quaternion$4 = new Quaternion();\n\tvar _scale$2 = new Vector3();\n\tvar _orientation$1 = new Vector3();\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\n\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\n\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif ( panner.positionX ) {\n\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tbufferType = Array;\n\t\t\t\tmixFunction = this._select;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n\t// Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n\t// Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\n\tvar _trackRe = new RegExp( ''\n\t\t+ '^'\n\t\t+ _directoryRe\n\t\t+ _nodeRe\n\t\t+ _objectRe\n\t\t+ _propertyRe\n\t\t+ '$'\n\t);\n\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t\t},\n\n\t\tparseTrackName: function ( trackName ) {\n\n\t\t\tvar matches = _trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t},\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) { return result; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *  - Add objects you would otherwise pass as 'root' to the\n\t *    constructor or the .clipAction method of AnimationMixer.\n\t *\n\t *  - Instead pass this object as 'root'.\n\t *\n\t *  - You can also add and remove objects later when the mixer\n\t *    is running.\n\t *\n\t * Note:\n\t *\n\t *    Objects of this class appear as one object to the mixer,\n\t *    so cache control of the individual objects must be done\n\t *    on the group.\n\t *\n\t * Limitation:\n\t *\n\t *  - The animated properties must be compatible among the\n\t *    all objects in the group.\n\t *\n\t *  - A single property can either be controlled through a\n\t *    target group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length,\n\t\t\t\tknownObject = undefined;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function () {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function () {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0; // restart clip\n\t\t\tthis._loopCount = - 1;// forget previous loops\n\t\t\tthis._startTime = null;// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function () {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function () {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function ( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function ( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function ( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function () {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif ( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function () {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function () {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function ( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function ( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function ( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function () {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function () {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function () {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function () {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function ( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function ( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function ( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar loopCount = this._loopCount;\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( deltaTime === 0 ) {\n\n\t\t\t\tif ( loopCount === - 1 ) { return time; }\n\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t\t}\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\n\t\t\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: AnimationMixer,\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) { return null; }\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function ( timeInSeconds ) {\n\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t\t}\n\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) { return; }\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function () {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\t\tthis.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector$6 = new Vector2();\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$6.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$6.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _startP = new Vector3();\n\tvar _startEnd = new Vector3();\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function ( point, clampToLine ) {\n\n\t\t\t_startP.subVectors( point, this.start );\n\t\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = _startEnd.dot( _startEnd );\n\t\t\tvar startEnd_startP = _startEnd.dot( _startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = _Math.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$5 = new Vector3();\n\tvar _v2$3 = new Vector3();\n\tvar _normalMatrix$1 = new Matrix3();\n\tvar _keys = [ 'a', 'b', 'c' ];\n\n\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length * 3;\n\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.setAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n\tVertexNormalsHelper.prototype.update = function () {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\t_normalMatrix$1.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar vertex = vertices[ face[ _keys[ j ] ] ];\n\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\t_v1$5.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t_v2$3.copy( normal ).applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );\n\n\t\t\t\t\tposition.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\tvar idx = 0;\n\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\t_v1$5.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\t_v2$3.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\t_v2$3.applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );\n\n\t\t\t\tposition.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector$7 = new Vector3();\n\n\tfunction SpotLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$7.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$7 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$8 = new Vector3();\n\tvar _boneMatrix = new Matrix4();\n\tvar _matrixWorldInv = new Matrix4();\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar bones = this.bones;\n\n\t\tvar geometry = this.geometry;\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$8.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$8.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t *  This helper must be added as a child of the light\n\t */\n\n\tfunction RectAreaLightHelper( light, color ) {\n\n\t\tthis.type = 'RectAreaLightHelper';\n\n\t\tthis.light = light;\n\n\t\tthis.color = color; // optional hardwired color for the helper\n\n\t\tvar positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tLine.call( this, geometry, material );\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );\n\n\t\tthis.update();\n\n\t}\n\n\tRectAreaLightHelper.prototype = Object.create( Line.prototype );\n\tRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n\n\tRectAreaLightHelper.prototype.update = function () {\n\n\t\tthis.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\t\t\tthis.children[ 0 ].material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\t\t// prevent hue shift\n\t\t\tvar c = this.material.color;\n\t\t\tvar max = Math.max( c.r, c.g, c.b );\n\t\t\tif ( max > 1 ) { c.multiplyScalar( 1 / max ); }\n\n\t\t\tthis.children[ 0 ].material.color.copy( this.material.color );\n\n\t\t}\n\n\t};\n\n\tRectAreaLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$9 = new Vector3();\n\tvar _color1 = new Color();\n\tvar _color2 = new Color();\n\n\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\tif ( this.color === undefined ) { this.material.vertexColors = VertexColors; }\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$9.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction LightProbeHelper( lightProbe, size ) {\n\n\t\tthis.lightProbe = lightProbe;\n\n\t\tthis.size = size;\n\n\t\tvar defines = {};\n\t\tdefines[ 'GAMMA_OUTPUT' ] = \"\";\n\n\t\t// material\n\t\tvar material = new ShaderMaterial( {\n\n\t\t\tdefines: defines,\n\n\t\t\tuniforms: {\n\n\t\t\t\tsh: { value: this.lightProbe.sh.coefficients }, // by reference\n\n\t\t\t\tintensity: { value: this.lightProbe.intensity }\n\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t'varying vec3 vNormal;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvNormal = normalize( normalMatrix * normal );',\n\n\t\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n\t\t\t\t'}' ].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t'#define RECIPROCAL_PI 0.318309886',\n\n\t\t\t\t'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',\n\n\t\t\t\t'\t// matrix is assumed to be orthogonal',\n\n\t\t\t\t'\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',\n\n\t\t\t\t'}',\n\n\t\t\t\t'vec3 linearToOutput( in vec3 a ) {',\n\n\t\t\t\t'\t#ifdef GAMMA_OUTPUT',\n\n\t\t\t\t'\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\treturn a;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'}',\n\n\t\t\t\t'// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',\n\t\t\t\t'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',\n\n\t\t\t\t'\t// normal is assumed to have unit length',\n\n\t\t\t\t'\tfloat x = normal.x, y = normal.y, z = normal.z;',\n\n\t\t\t\t'\t// band 0',\n\t\t\t\t'\tvec3 result = shCoefficients[ 0 ] * 0.886227;',\n\n\t\t\t\t'\t// band 1',\n\t\t\t\t'\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',\n\t\t\t\t'\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',\n\t\t\t\t'\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',\n\n\t\t\t\t'\t// band 2',\n\t\t\t\t'\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',\n\t\t\t\t'\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',\n\t\t\t\t'\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',\n\t\t\t\t'\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',\n\t\t\t\t'\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',\n\n\t\t\t\t'\treturn result;',\n\n\t\t\t\t'}',\n\n\t\t\t\t'uniform vec3 sh[ 9 ]; // sh coefficients',\n\n\t\t\t\t'uniform float intensity; // light probe intensity',\n\n\t\t\t\t'varying vec3 vNormal;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvec3 normal = normalize( vNormal );',\n\n\t\t\t\t'\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',\n\n\t\t\t\t'\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );',\n\n\t\t\t\t'\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',\n\n\t\t\t\t'\toutgoingLight = linearToOutput( outgoingLight );',\n\n\t\t\t\t'\tgl_FragColor = vec4( outgoingLight, 1.0 );',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' )\n\n\t\t} );\n\n\t\tvar geometry = new SphereBufferGeometry( 1, 32, 16 );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.onBeforeRender();\n\n\t}\n\n\tLightProbeHelper.prototype = Object.create( Mesh.prototype );\n\tLightProbeHelper.prototype.constructor = LightProbeHelper;\n\n\tLightProbeHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tLightProbeHelper.prototype.onBeforeRender = function () {\n\n\t\tthis.position.copy( this.lightProbe.position );\n\n\t\tthis.scale.set( 1, 1, 1 ).multiplyScalar( this.size );\n\n\t\tthis.material.uniforms.intensity.value = this.lightProbe.intensity;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\n\n\t\tconstructor: GridHelper,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\t\tthis.geometry.copy( source.geometry );\n\t\t\tthis.material.copy( source.material );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar x, z;\n\t\tvar v, i, j, r, color;\n\n\t\t// create the radials\n\n\t\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * radius;\n\t\t\tz = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tr = radius - ( radius / circles * i );\n\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tfunction PositionalAudioHelper( audio, range, divisionsInnerAngle, divisionsOuterAngle ) {\n\n\t\tthis.audio = audio;\n\t\tthis.range = range || 1;\n\t\tthis.divisionsInnerAngle = divisionsInnerAngle || 16;\n\t\tthis.divisionsOuterAngle = divisionsOuterAngle || 2;\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;\n\t\tvar positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tvar materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );\n\t\tvar materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );\n\n\t\tLine.call( this, geometry, [ materialOuterAngle, materialInnerAngle ] );\n\n\t\tthis.update();\n\n\t}\n\n\tPositionalAudioHelper.prototype = Object.create( Line.prototype );\n\tPositionalAudioHelper.prototype.constructor = PositionalAudioHelper;\n\n\tPositionalAudioHelper.prototype.update = function () {\n\n\t\tvar audio = this.audio;\n\t\tvar range = this.range;\n\t\tvar divisionsInnerAngle = this.divisionsInnerAngle;\n\t\tvar divisionsOuterAngle = this.divisionsOuterAngle;\n\n\t\tvar coneInnerAngle = _Math.degToRad( audio.panner.coneInnerAngle );\n\t\tvar coneOuterAngle = _Math.degToRad( audio.panner.coneOuterAngle );\n\n\t\tvar halfConeInnerAngle = coneInnerAngle / 2;\n\t\tvar halfConeOuterAngle = coneOuterAngle / 2;\n\n\t\tvar start = 0;\n\t\tvar count = 0;\n\t\tvar i, stride;\n\n\t\tvar geometry = this.geometry;\n\t\tvar positionAttribute = geometry.attributes.position;\n\n\t\tgeometry.clearGroups();\n\n\t\t//\n\n\t\tfunction generateSegment( from, to, divisions, materialIndex ) {\n\n\t\t\tvar step = ( to - from ) / divisions;\n\n\t\t\tpositionAttribute.setXYZ( start, 0, 0, 0 );\n\t\t\tcount ++;\n\n\t\t\tfor ( i = from; i < to; i += step ) {\n\n\t\t\t\tstride = start + count;\n\n\t\t\t\tpositionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );\n\t\t\t\tpositionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );\n\t\t\t\tpositionAttribute.setXYZ( stride + 2, 0, 0, 0 );\n\n\t\t\t\tcount += 3;\n\n\t\t\t}\n\n\t\t\tgeometry.addGroup( start, count, materialIndex );\n\n\t\t\tstart += count;\n\t\t\tcount = 0;\n\n\t\t}\n\n\t\t//\n\n\t\tgenerateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );\n\t\tgenerateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );\n\t\tgenerateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );\n\n\t\t//\n\n\t\tpositionAttribute.needsUpdate = true;\n\n\t\tif ( coneInnerAngle === coneOuterAngle ) { this.material[ 0 ].visible = false; }\n\n\t};\n\n\tPositionalAudioHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material[ 0 ].dispose();\n\t\tthis.material[ 1 ].dispose();\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$6 = new Vector3();\n\tvar _v2$4 = new Vector3();\n\tvar _normalMatrix$2 = new Matrix3();\n\n\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\n\t\t// FaceNormalsHelper only supports THREE.Geometry\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.setAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\t\tthis.update();\n\n\t}\n\n\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n\tFaceNormalsHelper.prototype.update = function () {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\t_normalMatrix$2.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tvar vertices = objGeometry.vertices;\n\n\t\tvar faces = objGeometry.faces;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar normal = face.normal;\n\n\t\t\t_v1$6.copy( vertices[ face.a ] )\n\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t.divideScalar( 3 )\n\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\t_v2$4.copy( normal ).applyMatrix3( _normalMatrix$2 ).normalize().multiplyScalar( this.size ).add( _v1$6 );\n\n\t\t\tposition.setXYZ( idx, _v1$6.x, _v1$6.y, _v1$6.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t\tposition.setXYZ( idx, _v2$4.x, _v2$4.y, _v2$4.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$7 = new Vector3();\n\tvar _v2$5 = new Vector3();\n\tvar _v3$1 = new Vector3();\n\n\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) { size = 1; }\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\t_v1$7.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2$5.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3$1.subVectors( _v2$5, _v1$7 );\n\n\t\tthis.lightPlane.lookAt( _v2$5 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2$5 );\n\t\tthis.targetLine.scale.z = _v3$1.length();\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tvar _vector$a = new Vector3();\n\tvar _camera = new Camera();\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar pointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t};\n\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t\t_vector$a.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], _vector$a.x, _vector$a.y, _vector$a.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tvar _box$3 = new Box3();\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = function ( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box$3.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box$3.isEmpty() ) { return; }\n\n\t\tvar min = _box$3.min;\n\t\tvar max = _box$3.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\n\t};\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.copy = function ( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3Helper( box, color ) {\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.box = box;\n\n\t\tcolor = color || 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\tBox3Helper.prototype.constructor = Box3Helper;\n\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar box = this.box;\n\n\t\tif ( box.isEmpty() ) { return; }\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\n\n\t}\n\n\tPlaneHelper.prototype = Object.create( Line.prototype );\n\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar _axis = new Vector3();\n\tvar _lineGeometry, _coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\n\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\n\t\tif ( length === undefined ) { length = 1; }\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = function ( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tvar radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t};\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t};\n\n\tArrowHelper.prototype.copy = function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t};\n\n\tArrowHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxesHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\tAxesHelper.prototype.constructor = AxesHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\n\tvar LinePieces = 1;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) { materials = []; }\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\treturn this.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tObject.assign( Loader.prototype, {\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t} );\n\n\tLoader.Handlers = {\n\n\t\tadd: function ( /* regex, loader */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t\t},\n\n\t\tget: function ( /* file */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t\t}\n\n\t};\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\t\treturn this.setResourcePath( value );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( _Math, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn _Math.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn _Math.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tarea: function () {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\t\treturn this.getArea();\n\n\t\t},\n\t\tbarycoordFromPoint: function ( point, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn this.getBarycoord( point, target );\n\n\t\t},\n\t\tmidpoint: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\t\treturn this.getMidpoint( target );\n\n\t\t},\n\t\tnormal: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn this.getNormal( target );\n\n\t\t},\n\t\tplane: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\t\treturn this.getPlane( target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle, {\n\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t\t},\n\t\tnormal: function ( a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Geometry.prototype, {\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeLineDistances: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t},\n\t\tgetWorldRotation: function () {\n\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tSkinnedMesh.prototype.initBones = function () {\n\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n\t};\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\treturn this.setAttribute( name, attribute );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t},\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\t\t\treturn this.deleteAttribute( name );\n\n\t\t}\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InterleavedBuffer.prototype, {\n\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( value );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\t\tgetArrays: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t\t},\n\n\t\taddShapeList: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t\t},\n\n\t\taddShape: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\toverdraw: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t},\n\n\t\tstencilMask: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\treturn this.stencilFuncMask;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\tthis.stencilFuncMask = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t},\n\t\tanimate: function ( callback ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\t\tthis.setAnimationLoop( callback );\n\n\t\t},\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t},\n\t\tsetFaceCulling: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t\t},\n\t\tallocTextureUnit: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n\t\t},\n\t\tsetTexture: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n\t\t},\n\t\tsetTexture2D: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n\t\t},\n\t\tsetTextureCube: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n\t\t},\n\t\tgetActiveMipMapLevel: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\t\t\treturn this.getActiveMipmapLevel();\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\t\treturn this.getContext();\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* cullFace */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTargetCube.prototype, {\n\n\t\tactiveCubeFace: {\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().' );\n\n\t\t\t}\n\t\t},\n\t\tactiveMipMapLevel: {\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebVRManager.prototype, {\n\n\t\tstanding: {\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tuserHeight: {\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .userHeight has been removed.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Audio.prototype, {\n\n\t\tload: {\n\t\t\tvalue: function ( file ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\t\t\tscope.setBuffer( buffer );\n\n\t\t\t\t} );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n\t}\n\n\t//\n\n\tfunction JSONLoader() {\n\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n\t}\n\n\t//\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tattach: function ( /* child, scene, parent */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction LensFlare() {\n\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\n\n\t}\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\t\trevision: REVISION,\n\t\t} } ) );\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeGeometry = BoxGeometry;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FaceNormalsHelper = FaceNormalsHelper;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GammaEncoding = GammaEncoding;\n\texports.Geometry = Geometry;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.LightProbeHelper = LightProbeHelper;\n\texports.LightShadow = LightShadow;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = _Math;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PositionalAudioHelper = PositionalAudioHelper;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RectAreaLightHelper = RectAreaLightHelper;\n\texports.RedFormat = RedFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VertexNormalsHelper = VertexNormalsHelper;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n    return exports;\n});\n\ndefine('skylark-threejs/main',[\r\n    \"./three\"\r\n], function(langx,webgl,threejs) {\r\n    langx.mixin(webgl,threejs);\r\n\r\n    return skylark.attach(\"intg.threejs\",threejs);\r\n});\r\n\ndefine('skylark-threejs', ['skylark-threejs/main'], function (main) { return main; });\n\n"]}