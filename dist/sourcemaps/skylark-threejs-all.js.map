{"version":3,"sources":["skylark-threejs-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","exports","undefined","Number","EPSILON","Math","pow","isInteger","value","isFinite","floor","sign","x","Function","prototype","Object","defineProperty","get","this","toString","match","assign","target","TypeError","output","index","arguments","source","nextKey","hasOwnProperty","call","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","ACESFilmicToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","EventDispatcher","addEventListener","type","listener","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","slice","l","_lut","_Math","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","uuid","toUpperCase","clamp","min","max","euclideanModulo","n","m","mapLinear","a1","a2","b1","b2","lerp","y","t","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","Vector2","Quaternion","z","w","_x","_y","_z","_w","defineProperties","width","set","height","isVector2","setScalar","scalar","setX","setY","setComponent","Error","getComponent","clone","constructor","copy","v","add","console","warn","addVectors","addScalar","s","a","b","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","elements","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","c","cos","sin","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","f","_onChangeCallback","isQuaternion","quaternion","setFromEuler","euler","update","isEuler","order","c1","c2","c3","s1","s2","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","r","angleTo","q","acos","rotateTowards","step","inverse","conjugate","p","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","_vector","Vector3","_quaternion","isVector3","setZ","multiplyVectors","applyEuler","error","applyQuaternion","applyAxisAngle","applyNormalMatrix","applyMatrix4","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","denominator","theta","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","getZ","_canvas","_vector$1","Matrix3","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","setFromMatrix4","applyToBufferAttribute","count","setXYZ","multiplyMatrices","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","g","h","getInverse","matrix","throwOnDegenerate","isMatrix4","t11","t12","t13","det","msg","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","rotation","cx","cy","scale","rotate","translate","ImageUtils","getDataURL","image","canvas","HTMLCanvasElement","src","document","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","Array","isArray","dispose","transformUv","uv","isVector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","xx","yy","zz","xy","xz","yz","getW","isWebGLRenderTarget","setSize","isWebGLMultisampleRenderTarget","_v1","_m1","Matrix4","_zero","_one","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","lookAt","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","position","x2","y2","z2","wx","wy","wz","decompose","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","_matrix","_quaternion$1","Euler","_order","DefaultOrder","Layers","mask","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","enableAll","toggle","disable","disableAll","test","layers","_object3DId","_v1$1","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","parent","children","DefaultUp","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Scene","background","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","CustomEvent","detail","isObject3D","onBeforeRender","onAfterRender","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","vector","worldToLocal","updateWorldMatrix","isCamera","isLight","object","remove","getObjectById","id","getObjectByProperty","getObjectByName","child","getWorldPosition","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","force","updateParents","updateChildren","geometries","materials","shapes","serialize","library","element","JSON","stringify","isMesh","drawMode","isInstancedMesh","instanceMatrix","isLine","isPoints","geometry","parameters","shape","material","uuids","extractFromCache","cache","values","key","data","recursive","parse","isScene","_points","_vector$2","_box","Box3","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","Infinity","satForAxes","axes","v0","extents","j","p0","p1","p2","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","boundingBox","computeBoundingBox","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","distanceToPoint","clampedPoint","getBoundingSphere","intersect","union","_box$1","Sphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","_vector$3","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_vector1","_vector2","_normalMatrix","Plane","isPlane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","Color","setRGB","hue2rgb","SRGBToLinear","LinearToSRGB","Face3","color","materialIndex","vertexNormals","isColor","vertexColors","setHex","setStyle","hex","setHSL","style","handleAlpha","string","parseFloat","exec","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","NAMES","materialId","Material","blending","side","flatShading","vertexTangents","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","BufferAttribute","itemSize","normalized","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","DirectGeometry","vertices","normals","colors","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","lineDistancesNeedUpdate","lineDistance","fromDirectGeometry","morphAttributesPosition","morphAttribute","isNaN","jl","computeFaceNormals","computeVertexNormals","vA","vB","vC","pA","pB","pC","cb","ab","indices","normalizeNormals","merge","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","keys","attributeData","hasMorphAttributes","attributeArray","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","intersection","setDrawMode","morphTargetDictionary","ml","String","intersects","groupMaterial","faceIndex","fvA","fvB","fvC","isMultiMaterial","fl","faceMaterial","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","vertex","fromBufferGeometry","scope","addFace","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","uvsCopy","k","kl","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","uvs1","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","srcVertexNormal","destVertexNormal","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","__proto__","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Camera","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","uniform","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLRenderTargetCube","renderer","scene","currentRenderTarget","getRenderTarget","setRenderTarget","render","clear","stencil","DataTexture","isWebGLRenderTargetCube","fromEquirectangularTexture","shader","tEquirect","join","isDataTexture","_sphere$1","_vector$5","Frustum","p4","p5","planes","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","shadow","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotShadowMap","spotShadowMatrix","pointLights","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","t2D","cube","tCube","tFlip","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","WebGLAnimation","isAnimating","animationLoop","onAnimationFrame","time","frame","requestAnimationFrame","stop","setAnimationLoop","setContext","WebGLAttributes","gl","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","buffer","delete","bufferType","createBuffer","bindBuffer","bufferData","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","absNumericalSort","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","transparency","isCubeTexture","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","unit","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","info","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","getShaderSource","lines","addLineNumbers","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","loopPattern","unrollLoops","loopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","isWebGL2","rendererExtensions","envMapCubeUV","tangentSpaceNormalMap","logarithmicDepthBuffer","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","numMultiviewViews","isRawShaderMaterial","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","toneMapping","toneMappingName","getToneMappingFunction","outputEncoding","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","cachedUniforms","cachedAttributes","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","deleteShader","getUniforms","getAttributes","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","capabilities","programs","floatVertexTextures","maxVertexUniforms","vertexTextures","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","getParameters","shadows","nClipPlanes","nClipIntersection","shaderID","isSkinnedMesh","bones","skeleton","nVertexUniforms","nVertexMatrices","allocateBones","getMaxPrecision","isWebGLMultiviewRenderTarget","numViews","gammaOutput","gammaInput","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","init","unshift","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","light","halfWidth","halfHeight","state","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","vector3","matrix42","setup","viewMatrix","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_renderer","_objects","maxTextureSize","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","1","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","result","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","depthMaterial","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setClear","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLTextures","_gl","utils","maxTextures","maxCubemapSize","maxSamples","_videoTextures","useOffscreenCanvas","OffscreenCanvas","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","textureProperties","__maxMipLevel","LOG2E","getInternalFormat","glFormat","glType","internalFormat","filterFallback","onTextureDispose","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","memory","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglColorTexture","__webglDepthStencilTexture","__webglViewFramebuffers","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","activeTexture","bindTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","compressedTexImage2D","texImage2D","mipmapImage","setTextureCubeDynamic","wrappingToGL","filterToGL","textureType","texParameteri","extension","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","createTexture","textureNeedsPowerOfTwo","isDepthTexture","texImage3D","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isMultiview","createFramebuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","ext","colorTexture","framebufferTextureMultiviewOVR","depthStencilTexture","viewFramebuffers","framebufferTextureLayer","updateRenderTargetMipmap","webglTexture","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","UNSIGNED_INT_24_8_WEBGL","WebGLMultiviewRenderTarget","WebGLMultiview","mat3","mat4","cameraArray","renderSize","available","DEFAULT_NUMVIEWS","maxNumViews","getCameraArray","isArrayCamera","cameras","isAvailable","getContextAttributes","antialias","MAX_VIEWS_OVR","attachCamera","isMultiviewCompatible","getDrawingBufferSize","setNumViews","resizeRenderTarget","detachCamera","srcRenderTarget","srcFramebuffers","viewWidth","viewHeight","flush","updateCameraProjectionMatricesUniform","updateCameraViewMatricesUniform","updateObjectMatricesUniforms","Group","ArrayCamera","isGroup","_geometry","cameraLPos","cameraRPos","setProjectionFromUnion","cameraL","cameraR","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","WebVRManager","renderWidth","renderHeight","device","frameData","controllers","standingMatrix","standingMatrixInverse","framebufferScaleFactor","referenceSpaceType","window","VRFrameData","onVRDisplayPresentChange","tempQuaternion","tempPosition","tempCamera","cameraVR","isPresenting","currentPixelRatio","currentSize","eyeParameters","getEyeParameters","getPixelRatio","setDrawingBufferSize","animation","triggers","grips","findGamepad","gamepads","navigator","getGamepads","gamepad","startsWith","hand","updateViewportFromBounds","bounds","getController","controller","getDevice","setDevice","setFramebufferScaleFactor","setReferenceSpaceType","getCamera","userHeight","depthNear","depthFar","getFrameData","stageParameters","sittingToStandingTransform","pose","orientation","leftViewMatrix","rightViewMatrix","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","hasPosition","buttonId","buttons","pressed","updateControllers","getStandingMatrix","submitFrame","setFrameOfReferenceType","WebXRManager","session","referenceSpace","sortedInputSources","onSessionEvent","inputSource","onSessionEnd","setFramebuffer","onRequestReferenceSpace","updateInputSources","findInputSource","inputSources","handedness","updateCamera","getSession","setSession","updateRenderState","baseLayer","XRWebGLLayer","requestReferenceSpace","then","onAnimationFrameCallback","getViewerPose","views","renderState","transform","inputPose","getPose","targetRaySpace","WebGLRenderer","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","toneMappingExposure","toneMappingWhitePoint","objects","programCache","renderLists","renderStates","morphtargets","bufferRenderer","indexedBufferRenderer","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_scissor","_scissorTest","_clipping","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","getTargetPixelRatio","contextAttributes","xrCompatible","onContextLost","onContextRestore","getShaderPrecisionFormat","rangeMin","rangeMax","message","initGLContext","getExtension","maxAnisotropy","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","maxVertexTextures","maxAttributes","maxVaryings","maxFragmentUniforms","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","clearColor","reset","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","factor","webglSlot","initAttributes","enableAttribute","disableUnusedAttributes","disableVertexAttribArray","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","boundTexture","unbindTexture","apply","calls","triangles","autoReset","mode","instanceCount","wireframeAttributes","onGeometryDispose","buffergeometry","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","geometryAttributes","getWireframeAttribute","currentAttribute","updateList","influencesList","objectInfluences","influences","morphInfluencesSum","morphBaseInfluence","lists","onSceneDispose","list","has","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","vr","environmentBlendMode","setMode","drawArrays","renderInstances","primcount","methodName","drawElements","multiview","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","setPixelRatio","updateStyle","setViewport","pixelRatio","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","programAttributes","positionArray","vertexAttribPointer","normalArray","uvArray","colorArray","setProgram","updateBuffers","rangeFactor","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","maxInstancedCount","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","initMaterial","renderObjects","camera2","isImmediateRenderObject","renderObjectImmediate","materialProperties","lightsStateVersion","programCacheKey","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","isShadowMaterial","materialNeedsLights","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","isFog","density","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsPhong","refreshUniformsToon","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","uvScaleMap","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","ltc_1","LTC_1","ltc_2","LTC_2","projectObject","isLOD","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","InterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","isInterleavedBuffer","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","float32Array","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getObjectForDistance","bind","calculateInverses","normalizeSkinWeights","skinWeight","_offsetMatrix","_identityMatrix","Skeleton","boneInverses","Bone","bone","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","positionAttribute","linePrecision","localPrecision","localPrecisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","localThresholdSq","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","o","ol","edge1","edge2","edge","edges","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","threshold","params","localThreshold","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","triangulate","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","forEach","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","ahole","hl","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","concat","scalePt2","pt","vec","bs","vert","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","shift","resetDuration","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","parseKeyframeTrack","json","trackType","typeName","toLowerCase","getTrackTypeForValueTypeName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","createInterpolant","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","global","DefaultLoadingManager","Loader","manager","crossOrigin","resourcePath","load","setCrossOrigin","setPath","setResourcePath","loading","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t3","cached","setTimeout","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","header","open","callbacks","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setResponseType","setWithCredentials","setMimeType","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","onImageLoad","onImageError","substr","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","weight","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","MaterialLoader","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","zoomW","zoomH","scaleW","scaleH","isDirectionalLightShadow","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","typedArray","TYPED_ARRAYS","bufferAttributeConstr","bufferAttribute","drawcalls","offsets","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","bufferGeometryLoader","details","geometryShapes","THREE","geometryLoader","LegacyJSONLoader","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","ha","familyName","FontLoader","setOptions","res","blob","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","SphericalHarmonics3","LightProbe","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isSphericalHarmonics3","zero","getAt","coeff","addScale","getIrradianceAt","getBasisAt","shBasis","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","Clock","autoStart","oldTime","elapsedTime","running","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","performance","Date","now","getElapsedTime","getDelta","newTime","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_pausedAt","filters","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","Raycaster","PointCloud","ascSort","intersectObject","Spherical","Cylindrical","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$6","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","_v1$5","_v2$3","_normalMatrix$1","_keys","VertexNormalsHelper","nNormals","objGeometry","objPos","objNorm","_vector$7","SpotLightHelper","cone","coneLength","coneWidth","_vector$8","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","RectAreaLightHelper","_vector$9","_color1","_color2","HemisphereLightHelper","LightProbeHelper","GAMMA_OUTPUT","GridHelper","PolarGridHelper","radials","circles","PositionalAudioHelper","divisionsInnerAngle","divisionsOuterAngle","materialInnerAngle","materialOuterAngle","halfConeInnerAngle","halfConeOuterAngle","_v1$6","_v2$4","_normalMatrix$2","FaceNormalsHelper","_v1$7","_v2$5","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$a","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$3","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","setColor","ClosedSplineCurve3","SplineCurve3","Spline","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","isIntersectionBox","isIntersectionSphere","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","renderReverseSided","renderSingleSided","activeMipMapLevel","standing","audioLoader","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CubeGeometry","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicDrawUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FlatShading","Float32Attribute","Float64Attribute","FrontFaceDirectionCCW","FrontFaceDirectionCW","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","threejs"],"mappings":"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","file":"../skylark-threejs-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-threejs/three',[], function () { \n\t'use strict';\n\n\tvar exports = {};\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t}\n\n\tvar REVISION = '111';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar ACESFilmicToneMapping = 5;\n\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return false; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _lut = [];\n\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t}\n\n\tvar _Math = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\treturn uuid.toUpperCase();\n\n\t\t},\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * _Math.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * _Math.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tcross: function ( v ) {\n\n\t\t\treturn this.x * v.y - this.y * v.x;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\t\tif ( angle < 0 ) { angle += 2 * Math.PI; }\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tisQuaternion: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tangleTo: function ( q ) {\n\n\t\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t\t},\n\n\t\trotateTowards: function ( q, step ) {\n\n\t\t\tvar angle = this.angleTo( q );\n\n\t\t\tif ( angle === 0 ) { return this; }\n\n\t\t\tvar t = Math.min( 1, step / angle );\n\n\t\t\tthis.slerp( q, t );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tinverse: function () {\n\n\t\t\t// quaternion is assumed to have unit length\n\n\t\t\treturn this.conjugate();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) { return this; }\n\t\t\tif ( t === 1 ) { return this.copy( qb ); }\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\t\tthis.normalize();\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector = new Vector3();\n\tvar _quaternion = new Quaternion();\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t\t},\n\n\t\tapplyAxisAngle: function ( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\treturn this.applyMatrix3( m ).normalize();\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t\t},\n\n\t\tunproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\treturn this.crossVectors( this, v );\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( v ) {\n\n\t\t\t// v cannot be the zero v\n\n\t\t\tvar scalar = v.dot( this ) / v.lengthSq();\n\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function ( planeNormal ) {\n\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( _vector );\n\n\t\t},\n\n\t\treflect: function ( normal ) {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t},\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\t\tif ( denominator === 0 ) { console.error( 'THREE.Vector3: angleTo() can\\'t handle zero length vectors.' ); }\n\n\t\t\tvar theta = this.dot( v ) / denominator;\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t\t},\n\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\t\tthis.y = Math.cos( phi ) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t\t},\n\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\t\tthis.x = radius * Math.sin( theta );\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tvar _vector$1 = new Vector3();\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$1.x = attribute.getX( i );\n\t\t\t\t_vector$1.y = attribute.getY( i );\n\t\t\t\t_vector$1.z = attribute.getZ( i );\n\n\t\t\t\t_vector$1.applyMatrix3( this );\n\n\t\t\t\tattribute.setXYZ( i, _vector$1.x, _vector$1.y, _vector$1.z );\n\n\t\t\t}\n\n\t\t\treturn attribute;\n\n\t\t},\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\t\tvar c = Math.cos( rotation );\n\t\t\tvar s = Math.sin( rotation );\n\n\t\t\tthis.set(\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t\t0, 0, 1\n\t\t\t);\n\n\t\t},\n\n\t\tscale: function ( sx, sy ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotate: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta );\n\t\t\tvar s = Math.sin( theta );\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\t\tte[ 0 ] = c * a11 + s * a21;\n\t\t\tte[ 3 ] = c * a12 + s * a22;\n\t\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( tx, ty ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\n\t\tgetDataURL: function ( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t} else if ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\n\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tvar output = {\n\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY,\n\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// process single image\n\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t\treturn uv;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.defineProperties( Vector4.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.z = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.w = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.texture.image = {};\n\t\tthis.texture.image.width = width;\n\t\tthis.texture.image.height = height;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: WebGLRenderTarget,\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author Matt DesLauriers / @mattdesl\n\t */\n\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.samples = 4;\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultisampleRenderTarget,\n\n\t\tisWebGLMultisampleRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.samples = source.samples;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar _v1 = new Vector3();\n\tvar _m1 = new Matrix4();\n\tvar _zero = new Vector3( 0, 0, 0 );\n\tvar _one = new Vector3( 1, 1, 1 );\n\tvar _x = new Vector3();\n\tvar _y = new Vector3();\n\tvar _z = new Vector3();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function ( m ) {\n\n\t\t\t// this method does not support reflection matrices\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// bottom row\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// last column\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\treturn this.compose( _zero, q, _one );\n\n\t\t},\n\n\t\tlookAt: function ( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors( eye, target );\n\n\t\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t_z.z = 1;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t\t// up and z are parallel\n\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t_z.x += 0.0001;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_z.z += 0.0001;\n\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\t\t\t\t_x.crossVectors( up, _z );\n\n\t\t\t}\n\n\t\t\t_x.normalize();\n\t\t\t_y.crossVectors( _z, _x );\n\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t_v1.x = attribute.getX( i );\n\t\t\t\t_v1.y = attribute.getY( i );\n\t\t\t\t_v1.z = attribute.getZ( i );\n\n\t\t\t\t_v1.applyMatrix4( this );\n\n\t\t\t\tattribute.setXYZ( i, _v1.x, _v1.y, _v1.z );\n\n\t\t\t}\n\n\t\t\treturn attribute;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( x, y, z ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\tte[ 12 ] = x.x;\n\t\t\t\tte[ 13 ] = x.y;\n\t\t\t\tte[ 14 ] = x.z;\n\n\t\t\t} else {\n\n\t\t\t\tte[ 12 ] = x;\n\t\t\t\tte[ 13 ] = y;\n\t\t\t\tte[ 14 ] = z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s, c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts, c, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = position.x;\n\t\t\tte[ 13 ] = position.y;\n\t\t\tte[ 14 ] = position.z;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) { sx = - sx; }\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\t\t\t_m1.copy( this );\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t_m1.elements[ 0 ] *= invSX;\n\t\t\t_m1.elements[ 1 ] *= invSX;\n\t\t\t_m1.elements[ 2 ] *= invSX;\n\n\t\t\t_m1.elements[ 4 ] *= invSY;\n\t\t\t_m1.elements[ 5 ] *= invSY;\n\t\t\t_m1.elements[ 6 ] *= invSY;\n\n\t\t\t_m1.elements[ 8 ] *= invSZ;\n\t\t\t_m1.elements[ 9 ] *= invSZ;\n\t\t\t_m1.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _matrix = new Matrix4();\n\tvar _quaternion$1 = new Quaternion();\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = _Math.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function ( q, order, update ) {\n\n\t\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t\t},\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function ( newOrder ) {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\t_quaternion$1.setFromEuler( this );\n\n\t\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\n\n\t\t},\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\tenableAll: function () {\n\n\t\t\tthis.mask = 0xffffffff | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\tdisableAll: function () {\n\n\t\t\tthis.mask = 0;\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\tvar _object3DId = 0;\n\n\tvar _v1$1 = new Vector3();\n\tvar _q1 = new Quaternion();\n\tvar _m1$1 = new Matrix4();\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\tvar _scale = new Vector3();\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3( 1, 0, 0 );\n\tvar _yAxis = new Vector3( 0, 1, 0 );\n\tvar _zAxis = new Vector3( 0, 0, 1 );\n\n\tvar _addedEvent = { type: 'added' };\n\tvar _removedEvent = { type: 'removed' };\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Object3D,\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tthis.matrix.premultiply( matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateOnWorldAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t\t},\n\n\t\ttranslateOnAxis: function ( axis, distance ) {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslateX: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t\t},\n\n\t\ttranslateY: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t\t},\n\n\t\ttranslateZ: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t\t},\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\n\n\t\t},\n\n\t\tlookAt: function ( x, y, z ) {\n\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t_target.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\t_target.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\n\n\t\t\t} else {\n\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\n\n\t\t\t}\n\n\t\t},\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push( object );\n\n\t\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tattach: function ( object ) {\n\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.getInverse( this.matrixWorld );\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t\t}\n\n\t\t\tobject.applyMatrix( _m1$1 );\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) { return this; }\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\ttarget = new Quaternion();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldScale: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) { return; }\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t\t}\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tif ( updateChildren === true ) {\n\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\n\t\t\tif ( this.visible === false ) { object.visible = false; }\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\n\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\n\n\t\t\t// object specific properties\n\n\t\t\tif ( this.isMesh && this.drawMode !== TrianglesDrawMode ) { object.drawMode = this.drawMode; }\n\n\t\t\tif ( this.isInstancedMesh ) {\n\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\n\t\t\t\tif ( shapes.length > 0 ) { output.shapes = shapes; }\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) { recursive = true; }\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.fog = null;\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tisScene: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tvar _points = [\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3()\n\t];\n\n\tvar _vector$2 = new Vector3();\n\n\tvar _box = new Box3();\n\n\t// triangle centered vertices\n\n\tvar _v0 = new Vector3();\n\tvar _v1$2 = new Vector3();\n\tvar _v2 = new Vector3();\n\n\t// triangle edge vectors\n\n\tvar _f0 = new Vector3();\n\tvar _f1 = new Vector3();\n\tvar _f2 = new Vector3();\n\n\tvar _center = new Vector3();\n\tvar _extents = new Vector3();\n\tvar _triangleNormal = new Vector3();\n\tvar _testAxis = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$2.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function ( object ) {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.expandByPoint( _box.min );\n\t\t\t\tthis.expandByPoint( _box.max );\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, _vector$2 );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn _vector$2.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t\t},\n\n\t\tintersectsTriangle: function ( triangle ) {\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// compute box center and extents\n\t\t\tthis.getCenter( _center );\n\t\t\t_extents.subVectors( this.max, _center );\n\n\t\t\t// translate triangle to aabb origin\n\t\t\t_v0.subVectors( triangle.a, _center );\n\t\t\t_v1$2.subVectors( triangle.b, _center );\n\t\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t\t// compute edge vectors for triangle\n\t\t\t_f0.subVectors( _v1$2, _v0 );\n\t\t\t_f1.subVectors( _v2, _v1$2 );\n\t\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\tvar axes = [\n\t\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t\t];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// test 3 face normals from the aabb\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\t\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$2.copy( point ).clamp( this.min, this.max );\n\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tgetBoundingSphere: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t\t}\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$2 ).length() * 0.5;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif ( this.isEmpty() ) { return this; }\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\t\tthis.setFromPoints( _points );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\t\tvar i, j;\n\n\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t_testAxis.fromArray( axes, i );\n\t\t\t// project the aabb onto the seperating axis\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\tvar p0 = v0.dot( _testAxis );\n\t\t\tvar p1 = v1.dot( _testAxis );\n\t\t\tvar p2 = v2.dot( _testAxis );\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tvar _box$1 = new Box3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\t_box$1.setFromPoints( points ).getCenter( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\ttarget.sub( this.center ).normalize();\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\t\ttarget = new Box3();\n\n\t\t\t}\n\n\t\t\ttarget.set( this.center, this.center );\n\t\t\ttarget.expandByScalar( this.radius );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\tvar _vector$3 = new Vector3();\n\tvar _segCenter = new Vector3();\n\tvar _segDir = new Vector3();\n\tvar _diff = new Vector3();\n\n\tvar _edge1 = new Vector3();\n\tvar _edge2 = new Vector3();\n\tvar _normal = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function ( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, _vector$3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( point, this.origin );\n\n\t\t\tvar directionDistance = target.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn target.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function ( point ) {\n\n\t\t\tvar directionDistance = _vector$3.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\t_vector$3.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn _vector$3.distanceToSquared( point );\n\n\t\t},\n\n\t\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( _segDir );\n\t\t\tvar b0 = _diff.dot( this.direction );\n\t\t\tvar b1 = - _diff.dot( _segDir );\n\t\t\tvar c = _diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t},\n\n\t\tintersectSphere: function ( sphere, target ) {\n\n\t\t\t_vector$3.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = _vector$3.dot( this.direction );\n\t\t\tvar d2 = _vector$3.dot( _vector$3 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) { return null; }\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, target );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, target ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, target );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, target ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) { return null; }\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn this.intersectBox( box, _vector$3 ) !== null;\n\n\t\t},\n\n\t\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t_edge1.subVectors( b, a );\n\t\t\t_edge2.subVectors( c, a );\n\t\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( _normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) { return null; }\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t_diff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * _diff.dot( _normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector1 = new Vector3();\n\tvar _vector2 = new Vector3();\n\tvar _normalMatrix = new Matrix3();\n\n\tfunction Plane( normal, constant ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tisPlane: true,\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\n\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t\t},\n\n\t\tintersectLine: function ( line, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar direction = line.delta( _vector1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t},\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant -= offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v0$1 = new Vector3();\n\tvar _v1$3 = new Vector3();\n\tvar _v2$1 = new Vector3();\n\tvar _v3 = new Vector3();\n\n\tvar _vab = new Vector3();\n\tvar _vac = new Vector3();\n\tvar _vbc = new Vector3();\n\tvar _vap = new Vector3();\n\tvar _vbp = new Vector3();\n\tvar _vcp = new Vector3();\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tgetNormal: function ( a, b, c, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( c, b );\n\t\t\t_v0$1.subVectors( a, b );\n\t\t\ttarget.cross( _v0$1 );\n\n\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t},\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tgetBarycoord: function ( point, a, b, c, target ) {\n\n\t\t\t_v0$1.subVectors( c, a );\n\t\t\t_v1$3.subVectors( b, a );\n\t\t\t_v2$1.subVectors( point, a );\n\n\t\t\tvar dot00 = _v0$1.dot( _v0$1 );\n\t\t\tvar dot01 = _v0$1.dot( _v1$3 );\n\t\t\tvar dot02 = _v0$1.dot( _v2$1 );\n\t\t\tvar dot11 = _v1$3.dot( _v1$3 );\n\t\t\tvar dot12 = _v1$3.dot( _v2$1 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point, a, b, c ) {\n\n\t\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\n\n\t\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t\t},\n\n\t\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\t\ttarget.set( 0, 0 );\n\t\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tisFrontFacing: function ( a, b, c, direction ) {\n\n\t\t\t_v0$1.subVectors( c, b );\n\t\t\t_v1$3.subVectors( a, b );\n\n\t\t\t// strictly front facing\n\t\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetArea: function () {\n\n\t\t\t_v0$1.subVectors( this.c, this.b );\n\t\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t\t},\n\n\t\tgetMidpoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tgetNormal: function ( target ) {\n\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetPlane: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\t\ttarget = new Plane();\n\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tgetBarycoord: function ( point, target ) {\n\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetUV: function ( point, uv1, uv2, uv3, target ) {\n\n\t\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tisFrontFacing: function ( direction ) {\n\n\t\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsTriangle( this );\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( p, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar a = this.a, b = this.b, c = this.c;\n\t\t\tvar v, w;\n\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors( b, a );\n\t\t\t_vac.subVectors( c, a );\n\t\t\t_vap.subVectors( p, a );\n\t\t\tvar d1 = _vab.dot( _vap );\n\t\t\tvar d2 = _vac.dot( _vap );\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy( a );\n\n\t\t\t}\n\n\t\t\t_vbp.subVectors( p, b );\n\t\t\tvar d3 = _vab.dot( _vbp );\n\t\t\tvar d4 = _vac.dot( _vbp );\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy( b );\n\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t\t}\n\n\t\t\t_vcp.subVectors( p, c );\n\t\t\tvar d5 = _vab.dot( _vcp );\n\t\t\tvar d6 = _vac.dot( _vcp );\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy( c );\n\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t\t_vbc.subVectors( c, b );\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t\t}\n\n\t\t\t// face region\n\t\t\tvar denom = 1 / ( va + vb + vc );\n\t\t\t// u = va * denom\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t\t},\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tvar _hslA = { h: 0, s: 0, l: 0 };\n\tvar _hslB = { h: 0, s: 0, l: 0 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tfunction hue2rgb( p, q, t ) {\n\n\t\tif ( t < 0 ) { t += 1; }\n\t\tif ( t > 1 ) { t -= 1; }\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\n\t\tif ( t < 1 / 2 ) { return q; }\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\n\t\treturn p;\n\n\t}\n\n\tfunction SRGBToLinear( c ) {\n\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t}\n\n\tfunction LinearToSRGB( c ) {\n\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function ( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = _Math.euclideanModulo( h, 1 );\n\t\t\ts = _Math.clamp( s, 0, 1 );\n\t\t\tl = _Math.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) { return; }\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\treturn this.setColorName( style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetColorName: function ( style ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\n\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\n\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopySRGBToLinear: function ( color ) {\n\n\t\t\tthis.r = SRGBToLinear( color.r );\n\t\t\tthis.g = SRGBToLinear( color.g );\n\t\t\tthis.b = SRGBToLinear( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToSRGB: function ( color ) {\n\n\t\t\tthis.r = LinearToSRGB( color.r );\n\t\t\tthis.g = LinearToSRGB( color.g );\n\t\t\tthis.b = LinearToSRGB( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertSRGBToLinear: function () {\n\n\t\t\tthis.copySRGBToLinear( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToSRGB: function () {\n\n\t\t\tthis.copyLinearToSRGB( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( target ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t\t}\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tthis.getHSL( _hslA );\n\n\t\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpHSL: function ( color, alpha ) {\n\n\t\t\tthis.getHSL( _hslA );\n\t\t\tcolor.getHSL( _hslB );\n\n\t\t\tvar h = _Math.lerp( _hslA.h, _hslB.h, alpha );\n\t\t\tvar s = _Math.lerp( _hslA.s, _hslB.s, alpha );\n\t\t\tvar l = _Math.lerp( _hslA.l, _hslB.l, alpha );\n\n\t\t\tthis.setHSL( h, s, l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\tColor.NAMES = _colorKeywords;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexTangents = false;\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function () {},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) { return; }\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\n\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\n\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\n\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\n\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\n\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\n\t\t\tif ( this.vertexColors !== NoColors ) { data.vertexColors = this.vertexColors; }\n\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\n\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\n\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\n\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\n\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\n\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\n\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\n\n\t\t\tif ( this.visible === false ) { data.visible = false; }\n\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\n\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexTangents = source.vertexTangents;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\t{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\n\t\t\tthis.shadowSide = source.shadowSide;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.toneMapped = source.toneMapped;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\n\t\t\t\t\t\tname: morphNormals[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) { return - Infinity; }\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tvar _m1$2 = new Matrix4();\n\tvar _obj = new Object3D();\n\tvar _offset = new Vector3();\n\tvar _box$2 = new Box3();\n\tvar _boxMorphTargets = new Box3();\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: BufferGeometry,\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tsetAttribute: function ( name, attribute ) {\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeleteAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tmatrix.applyToBufferAttribute( position );\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normal );\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif ( tangent !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\t// Tangent is vec4, but the '.w' component is a sign value (+1/-1).\n\t\t\t\tnormalMatrix.applyToBufferAttribute( tangent );\n\t\t\t\ttangent.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$2.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$2.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$2.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$2.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$2.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj.lookAt( vector );\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix( _obj.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position ) {\n\n\t\t\t\t// first, find the center of the bounding sphere\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter( center );\n\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i );\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) {\n\n\t\t\t\toffset = 0;\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$4.x = normals.getX( i );\n\t\t\t\t_vector$4.y = normals.getY( i );\n\t\t\t\t_vector$4.z = normals.getZ( i );\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( array2, itemSize );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\t// attributes\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = morphAttribute[ i ];\n\n\t\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\tdata.data.attributes[ key ] = attributeData;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor ( var key in this.morphAttributes ) {\n\n\t\t\t\tvar attributeArray = this.morphAttributes[ key ];\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = attributeArray[ i ];\n\n\t\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\t\tarray.push( attributeData );\n\n\t\t\t\t}\n\n\t\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\t\thasMorphAttributes = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasMorphAttributes ) {\n\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar name, i, l;\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.setAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\t// user data\n\n\t\t\tthis.userData = source.userData;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tvar _inverseMatrix = new Matrix4();\n\tvar _ray = new Ray();\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\tvar _vB = new Vector3();\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\tvar _tempB = new Vector3();\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\tvar _morphB = new Vector3();\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\tvar _uvB = new Vector2();\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t\tthis.drawMode = TrianglesDrawMode;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tsetDrawMode: function ( value ) {\n\n\t\t\tthis.drawMode = value;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.drawMode = source.drawMode;\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) { return; }\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere.copy( geometry.boundingSphere );\n\t\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\n\n\t\t\t}\n\n\t\t\t// check unsupported draw modes\n\n\t\t\tif ( this.drawMode !== TrianglesDrawMode ) {\n\n\t\t\t\tconsole.warn( 'THREE.Mesh: TriangleStripDrawMode and TriangleFanDrawMode are not supported by .raycast().' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\t\t\t\tvar i, j, il, jl;\n\t\t\t\tvar group, groupMaterial;\n\t\t\t\tvar start, end;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = j;\n\t\t\t\t\t\t\t\tb = j + 1;\n\t\t\t\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = i;\n\t\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\tvar intersect;\n\n\t\tif ( material.side === BackSide ) {\n\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t} else {\n\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t}\n\n\t\tif ( intersect === null ) { return null; }\n\n\t\t_intersectionPointWorld.copy( point );\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\n\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\n\t}\n\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t\t_vA.fromBufferAttribute( position, a );\n\t\t_vB.fromBufferAttribute( position, b );\n\t\t_vC.fromBufferAttribute( position, c );\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tvar influence = morphInfluences[ i ];\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) { continue; }\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\t\tif ( intersection ) {\n\n\t\t\tif ( uv ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tif ( uv2 ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tvar face = new Face3( a, b, c );\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\t\tintersection.face = face;\n\n\t\t}\n\n\t\treturn intersection;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\n\tvar _m1$3 = new Matrix4();\n\tvar _obj$1 = new Object3D();\n\tvar _offset$1 = new Vector3();\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Geometry,\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$3.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$3.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$3.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$3.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$3.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj$1.lookAt( vector );\n\n\t\t\t_obj$1.updateMatrix();\n\n\t\t\tthis.applyMatrix( _obj$1.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( attributes.position === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\n\n\t\t\tfor ( var i = 0; i < positions.length; i += 3 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color().fromArray( colors, i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexColors = ( colors === undefined ) ? [] : [\n\t\t\t\t\tscope.colors[ a ].clone(),\n\t\t\t\t\tscope.colors[ b ].clone(),\n\t\t\t\t\tscope.colors[ c ].clone() ];\n\n\t\t\t\tvar vertexNormals = ( normals === undefined ) ? [] : [\n\t\t\t\t\tnew Vector3().fromArray( normals, a * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, b * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, c * 3 )\n\t\t\t\t];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\n\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar i, il, j, jl, k, kl;\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tvar BoxGeometry = /*@__PURE__*/(function (Geometry) {\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'BoxGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tif ( Geometry ) BoxGeometry.__proto__ = Geometry;\n\t\tBoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t\treturn BoxGeometry;\n\t}(Geometry));\n\n\t// BoxBufferGeometry\n\n\tvar BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'BoxBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = this;\n\n\t\t\twidth = width || 1;\n\t\t\theight = height || 1;\n\t\t\tdepth = depth || 1;\n\n\t\t\t// segments\n\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0;\n\n\t\t\t// build each side of the box geometry\n\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\n\t\t\t\tvar ix, iy;\n\n\t\t\t\tvar vector = new Vector3();\n\n\t\t\t\t// generate vertices, normals and uvs\n\n\t\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// uvs\n\n\t\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t\t// counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// indices\n\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t\t// faces\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t\t// increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t\t// calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\n\t\t\t\t// update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t\treturn BoxBufferGeometry;\n\t}(BufferGeometry));\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tfunction cloneUniforms( src ) {\n\n\t\tvar dst = {};\n\n\t\tfor ( var u in src ) {\n\n\t\t\tdst[ u ] = {};\n\n\t\t\tfor ( var p in src[ u ] ) {\n\n\t\t\t\tvar property = src[ u ][ p ];\n\n\t\t\t\tif ( property && ( property.isColor ||\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\t\tproperty.isTexture ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn dst;\n\n\t}\n\n\tfunction mergeUniforms( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t}\n\n\t// Legacy\n\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = {};\n\n\t\tfor ( var name in this.uniforms ) {\n\n\t\t\tvar uniform = this.uniforms[ name ];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tvar extensions = {};\n\n\t\tfor ( var key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar fov = 90, aspect = 1;\n\n\tfunction CubeCamera( near, far, cubeResolution, options ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\toptions = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\t\trenderer.render( scene, cameraPX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\t\trenderer.render( scene, cameraNX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\t\trenderer.render( scene, cameraPY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\t\trenderer.render( scene, cameraNY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\t\trenderer.render( scene, cameraPZ );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\t\trenderer.render( scene, cameraNZ );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t}\n\n\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n\tWebGLRenderTargetCube.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = texture.format;\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tvar scene = new Scene();\n\n\t\tvar shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\n\n\t\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\n\n\t\t\t\t\"\t#include <begin_vertex>\",\n\t\t\t\t\"\t#include <project_vertex>\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform sampler2D tEquirect;\",\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"#define RECIPROCAL_PI 0.31830988618\",\n\t\t\t\t\"#define RECIPROCAL_PI2 0.15915494\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\n\n\t\t\t\t\"\tvec2 sampleUV;\",\n\n\t\t\t\t\"\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\",\n\n\t\t\t\t\"\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\n\n\t\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\t\t};\n\n\t\tvar material = new ShaderMaterial( {\n\n\t\t\ttype: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\n\n\t\tscene.add( mesh );\n\n\t\tvar camera = new CubeCamera( 1, 10, 1 );\n\n\t\tcamera.renderTarget = this;\n\t\tcamera.renderTarget.texture.name = 'CubeCameraTexture';\n\n\t\tcamera.update( renderer, scene );\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _sphere$1 = new Sphere();\n\tvar _vector$5 = new Vector3();\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSprite: function ( sprite ) {\n\n\t\t\t_sphere$1.center.set( 0, 0, 0 );\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\t\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t// corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = normalMatrix * objectTangent;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = saturate( clearcoat );\\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_normalmap_pars_fragment = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpack2HalfToRGBA( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpack2HalfToRGBA( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\nvoid main() {\\n\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_normalmap_pars_fragment: clearcoat_normalmap_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 },\n\t\t\tmaxMipLevel: { value: 0 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tlightProbe: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\t\trotation: { value: 0.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\tmatcap: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tmatcap: { value: null }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.sprite,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t\t},\n\n\t\tbackground: {\n\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\t\tt2D: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\n\t\t},\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: {\n\t\t\t\ttCube: { value: null },\n\t\t\t\ttFlip: { value: - 1 },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t} ] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\ttransparency: { value: 0 },\n\t\t\t\tclearcoat: { value: 0 },\n\t\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\t\tclearcoatNormalMap: { value: null },\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAnimation() {\n\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tif ( isAnimating === false ) { return; }\n\n\t\t\tanimationLoop( time, frame );\n\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tstart: function () {\n\n\t\t\t\tif ( isAnimating === true ) { return; }\n\t\t\t\tif ( animationLoop === null ) { return; }\n\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t\t\tisAnimating = true;\n\n\t\t\t},\n\n\t\t\tstop: function () {\n\n\t\t\t\tisAnimating = false;\n\n\t\t\t},\n\n\t\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\t\tanimationLoop = callback;\n\n\t\t\t},\n\n\t\t\tsetContext: function ( value ) {\n\n\t\t\t\tcontext = value;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl ) {\n\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = 5126;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = 5126;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = 5122;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = 5125;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = 5124;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = 5120;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = 5121;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\treturn buffers.get( attribute );\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tbuffers.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar ix, iy;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\t\t// Store the current background texture and its `version`\n\t\t// so we can recompile the material accordingly.\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.background;\n\n\t\t\t// Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\t\t\tvar vr = renderer.vr;\n\t\t\tvar session = vr.getSession && vr.getSession();\n\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\t\tbackground = null;\n\n\t\t\t}\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\t\t\t\tcurrentBackground = null;\n\t\t\t\tcurrentBackgroundVersion = 0;\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\t\t\t\tcurrentBackground = null;\n\t\t\t\tcurrentBackgroundVersion = 0;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundCubeMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'map', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.tCube.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = background.isWebGLRenderTargetCube ? background.texture : background;\n\t\t\t\tboxMesh.material.uniforms.tCube.value = texture;\n\t\t\t\tboxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t     currentBackgroundVersion !== texture.version ) {\n\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = texture.version;\n\n\t\t\t\t}\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tbackground.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\t   currentBackgroundVersion !== background.version ) {\n\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\n\t\t\t\t}\n\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\t/* eslint-disable no-undef */\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( 34930 );\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\n\n\t\tvar maxAttributes = gl.getParameter( 34921 );\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\n\t\tvar maxVaryings = gl.getParameter( 36348 );\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\t\treturn {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\t\tmaxSamples: maxSamples\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, info ) {\n\n\t\tvar geometries = new WeakMap();\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tgeometries.delete( geometry );\n\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\twireframeAttributes.delete( buffergeometry );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries.set( geometry, buffergeometry );\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, 34963 );\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateWireframeAttribute( geometry ) {\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\t\tattribute.version = version;\n\n\t\t\tattributes.update( attribute, 34963 );\n\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\n\n\t\t\t//\n\n\t\t\twireframeAttributes.set( geometry, attribute );\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( currentAttribute ) {\n\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get( geometry );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLInfo( gl ) {\n\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update( count, mode, instanceCount ) {\n\n\t\t\tinstanceCount = instanceCount || 1;\n\n\t\t\trender.calls ++;\n\n\t\t\tswitch ( mode ) {\n\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 5:\n\t\t\t\tcase 6:\n\t\t\t\t\trender.triangles += instanceCount * ( count - 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\trender.frame ++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\tvar length = objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\t// Remove current morphAttributes\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\t\tif ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }\n\t\t\t\t\tif ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\t// Add morphAttributes\n\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence ) {\n\n\t\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\tif ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }\n\t\t\t\t\t\tif ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }\n\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\t\tvar updateList = {};\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tupdateList = {};\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction DataTexture2DArray( data, width, height, depth ) {\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\t/**\n\t * @author Artur Trzesiok\n\t */\n\n\tfunction DataTexture3D( data, width, height, depth ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tvar texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\n\t}\n\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * @author tschw\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\tvar mat2array = new Float32Array( 4 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\tfunction arraysEqual( a, b ) {\n\n\t\tif ( a.length !== b.length ) { return false; }\n\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction copyArray( a, b ) {\n\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\t\ta[ i ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( textures, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t{ r[ i ] = textures.allocateTextureUnit(); }\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValueV1f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValueV2f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV3f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\n\t\t\t}\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\t\tcache[ 0 ] = v.r;\n\t\t\t\tcache[ 1 ] = v.g;\n\t\t\t\tcache[ 2 ] = v.b;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV4f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\t\t\t\tcache[ 3 ] = v.w;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValueM2( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat2array.set( elements );\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM3( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat3array.set( elements );\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM4( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat4array.set( elements );\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT2DArray1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n\t}\n\n\tfunction setValueT3D1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValueV1i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\tfunction setValueV2i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV3i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV4i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8b5f: return setValueT3D1; // SAMPLER_3D\n\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\t\t\tcase 0x8DC1: return setValueT2DArray1; // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\tfunction setValueV1fArray( gl, v ) {\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\tfunction setValueV1iArray( gl, v ) {\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV2iArray( gl, v ) {\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV3iArray( gl, v ) {\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV4iArray( gl, v ) {\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t}\n\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 2 );\n\n\t\tgl.uniform2fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV3fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 3 );\n\n\t\tgl.uniform3fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV4fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniform4fv( this.addr, data );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM3Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 9 );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM4Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 16 );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\t\tcase 0x8b5e: return setValueT1Array; // SAMPLER_2D\n\t\t\tcase 0x8b60: return setValueT6Array; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\t\tthis.cache = new Float32Array( data.length );\n\n\t\t}\n\n\t\tcopyArray( cache, data );\n\n\t};\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile ( true ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35718 );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) { r.push( u ); }\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getShaderErrors( gl, shader, type ) {\n\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\n\n\t\tif ( status && log === '' ) { return ''; }\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource( shader );\n\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n\t}\n\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\textensions = extensions || {};\n\n\t\tvar chunks = [\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) { continue; }\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35721 );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n\t}\n\n\tfunction replaceClippingPlaneNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n\t}\n\n\t// Resolve Includes\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes( string ) {\n\n\t\treturn string.replace( includePattern, includeReplacer );\n\n\t}\n\n\tfunction includeReplacer( match, include ) {\n\n\t\tvar string = ShaderChunk[ include ];\n\n\t\tif ( string === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn resolveIncludes( string );\n\n\t}\n\n\t// Unroll Loops\n\n\tvar loopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\tfunction unrollLoops( string ) {\n\n\t\treturn string.replace( loopPattern, loopReplacer );\n\n\t}\n\n\tfunction loopReplacer( match, start, end, snippet ) {\n\n\t\tvar string = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tstring += snippet\n\t\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t\t}\n\n\t\treturn string;\n\n\t}\n\n\t//\n\n\tfunction generatePrecision( parameters ) {\n\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\n\n\t\tif ( parameters.precision === \"highp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"mediump\" ) {\n\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"lowp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\n\n\t\t}\n\n\t\treturn precisionstring;\n\n\t}\n\n\tfunction generateShadowMapTypeDefine( parameters ) {\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapTypeDefine( parameters ) {\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapModeDefine( parameters ) {\n\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapModeDefine;\n\n\t}\n\n\tfunction generateEnvMapBlendingDefine( parameters ) {\n\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\n\t}\n\n\tfunction WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters ) {\n\n\t\tvar gl = renderer.getContext();\n\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = shader.vertexShader;\n\t\tvar fragmentShader = shader.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tvar numMultiviewViews = parameters.numMultiviewViews;\n\n\t\tif ( material.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t\t' attribute mat4 instanceMatrix;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t( ( material.extensions ? material.extensions.shaderTextureLOD : false ) || parameters.envMap ) && ( parameters.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?\n\t\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = resolveIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\t\tfragmentShader = resolveIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\tif ( parameters.isWebGL2 && ! material.isRawShaderMaterial ) {\n\n\t\t\tvar isGLSL3ShaderMaterial = false;\n\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n\t\t\tif ( material.isShaderMaterial &&\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\n\n\t\t\t\tisGLSL3ShaderMaterial = true;\n\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\n\n\t\t\t}\n\n\t\t\t// GLSL 3.0 conversion\n\n\t\t\tprefixVertex = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define attribute in',\n\t\t\t\t'#define varying out',\n\t\t\t\t'#define texture2D texture'\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\t\tprefixFragment = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define varying in',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t\t'#define texture2D texture',\n\t\t\t\t'#define textureCube texture',\n\t\t\t\t'#define texture2DProj textureProj',\n\t\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t\t// Multiview\n\n\t\t\tif ( numMultiviewViews > 0 ) {\n\n\t\t\t\tprefixVertex = prefixVertex.replace(\n\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t[\n\t\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\n\t\t\t\t\t\t'layout(num_views = ' + numMultiviewViews + ') in;',\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t\tprefixVertex = prefixVertex.replace(\n\t\t\t\t\t[\n\t\t\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t\t'uniform mat3 normalMatrix;'\n\t\t\t\t\t].join( '\\n' ),\n\t\t\t\t\t[\n\t\t\t\t\t\t'uniform mat4 modelViewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'uniform mat4 projectionMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'uniform mat3 normalMatrices[' + numMultiviewViews + '];',\n\n\t\t\t\t\t\t'#define modelViewMatrix modelViewMatrices[VIEW_ID]',\n\t\t\t\t\t\t'#define projectionMatrix projectionMatrices[VIEW_ID]',\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]',\n\t\t\t\t\t\t'#define normalMatrix normalMatrices[VIEW_ID]'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t\tprefixFragment = prefixFragment.replace(\n\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t[\n\t\t\t\t\t\t'#version 300 es\\n',\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t\tprefixFragment = prefixFragment.replace(\n\t\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t\t[\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]'\n\t\t\t\t\t].join( '\\n' )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\t// check for link errors\n\t\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tthis.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tmaterial: material,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t//\n\n\t\tthis.name = shader.name;\n\t\tthis.id = programIdCount ++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\tthis.numMultiviewViews = numMultiviewViews;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'phong',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"numMultiviewViews\",\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\t\"sheen\"\n\t\t];\n\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\t\tencoding = GammaEncoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\tvar numMultiviewViews = currentRenderTarget && currentRenderTarget.isWebGLMultiviewRenderTarget ? currentRenderTarget.numViews : 0;\n\n\t\t\tvar parameters = {\n\n\t\t\t\tisWebGL2: isWebGL2,\n\n\t\t\t\tshaderID: shaderID,\n\n\t\t\t\tprecision: precision,\n\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\tnumMultiviewViews: numMultiviewViews,\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\t\tmatcap: !! material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),\n\t\t\t\tenvMap: !! material.envMap,\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tsheen: !! material.sheen,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCacheKey = function ( material, parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( material.fragmentShader );\n\t\t\t\tarray.push( material.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( material.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( material.onBeforeCompile.toString() );\n\n\t\t\tarray.push( renderer.gammaOutput );\n\n\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( material, shader, parameters, cacheKey ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar preexistingProgram = programs[ p ];\n\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function ( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get( object ) {\n\n\t\t\tvar map = properties.get( object );\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set( object, map );\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tproperties.delete( object );\n\n\t\t}\n\n\t\tfunction update( object, key, value ) {\n\n\t\t\tproperties.get( object )[ key ] = value;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tproperties = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\n\tfunction WebGLRenderList() {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tvar defaultProgram = { id: - 1 };\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\t\t\trenderItemsIndex ++;\n\n\t\t\treturn renderItem;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t}\n\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\n\n\t\t}\n\n\t\tfunction sort() {\n\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( painterSortStable ); }\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( reversePainterSortStable ); }\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\tlists.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar cameras = lists.get( scene );\n\t\t\tvar list;\n\t\t\tif ( cameras === undefined ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists.set( scene, new WeakMap() );\n\t\t\t\tlists.get( scene ).set( camera, list );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tlist = cameras.get( camera );\n\t\t\t\tif ( list === undefined ) {\n\n\t\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\t\tcameras.set( camera, list );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n\t}\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar state = {\n\n\t\t\tversion: 0,\n\n\t\t\thash: {\n\t\t\t\tdirectionalLength: - 1,\n\t\t\t\tpointLength: - 1,\n\t\t\t\tspotLength: - 1,\n\t\t\t\trectAreaLength: - 1,\n\t\t\t\themiLength: - 1,\n\n\t\t\t\tnumDirectionalShadows: - 1,\n\t\t\t\tnumPointShadows: - 1,\n\t\t\t\tnumSpotShadows: - 1,\n\t\t\t},\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\tpoint: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: [],\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1\n\n\t\t};\n\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tvar hash = state.hash;\n\n\t\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\t\thash.pointLength !== pointLength ||\n\t\t\t\thash.spotLength !== spotLength ||\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\t\thash.hemiLength !== hemiLength ||\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\t\tstate.version = nextVersion ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLRenderState() {\n\n\t\tvar lights = new WebGLLights();\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t}\n\n\t\tfunction pushLight( light ) {\n\n\t\t\tlightsArray.push( light );\n\n\t\t}\n\n\t\tfunction pushShadow( shadowLight ) {\n\n\t\t\tshadowsArray.push( shadowLight );\n\n\t\t}\n\n\t\tfunction setupLights( camera ) {\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\n\t\t\tlights: lights\n\t\t};\n\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderStates() {\n\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\trenderStates.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar renderState;\n\n\t\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates.set( scene, new WeakMap() );\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\n\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn renderState;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\trenderStates = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpack2HalfToRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum(),\n\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_viewportSize = new Vector2(),\n\n\t\t\t_viewport = new Vector4(),\n\n\t\t\t_depthMaterials = [],\n\t\t\t_distanceMaterials = [],\n\n\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: { value: null },\n\t\t\t\tresolution: { value: new Vector2() },\n\t\t\t\tradius: { value: 4.0 }\n\t\t\t},\n\n\t\t\tvertexShader: vsm_vert,\n\n\t\t\tfragmentShader: vsm_frag\n\n\t\t} );\n\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\n\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute(\n\t\t\t\"position\",\n\t\t\tnew BufferAttribute(\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) { return; }\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\n\n\t\t\tif ( lights.length === 0 ) { return; }\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.setBlending( NoBlending );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );\n\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\n\n\t\t\t\t\t_viewport.set(\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t\t);\n\n\t\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t\t}\n\n\t\t\t\t// do blur pass for VSM\n\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t\t};\n\n\t\tfunction VSMPass( shadow, camera ) {\n\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\n\n\t\t\t// vertical pass\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t\t// horizonal pass\n\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\n\n\t\t}\n\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _depthMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDepthMaterial( {\n\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_depthMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _distanceMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_distanceMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( light.isPointLight === true ) {\n\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( customMaterial === undefined ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry.isGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\t\t\tif ( material.skinning === true ) {\n\n\t\t\t\t\t\tuseSkinning = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif ( type === VSMShadowMap ) {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t\t} else {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar enabledCapabilities = {};\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( 35661 );\n\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter( 7938 );\n\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, 10241, 9728 );\n\t\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( 2929 );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( 2884 );\n\n\t\tsetBlending( NoBlending );\n\n\t\t//\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tvar equationToGL = {};\n\t\tequationToGL[ AddEquation ] = 32774;\n\t\tequationToGL[ SubtractEquation ] = 32778;\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\tequationToGL[ MinEquation ] = 32775;\n\t\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t\t} else {\n\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar factorToGL = {};\n\t\tfactorToGL[ ZeroFactor ] = 0;\n\t\tfactorToGL[ OneFactor ] = 1;\n\t\tfactorToGL[ SrcColorFactor ] = 768;\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\n\t\tfactorToGL[ DstColorFactor ] = 774;\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending === NoBlending ) {\n\n\t\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\t\tdisable( 3042 );\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\t\tenable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = true;\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// custom blending\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\n\t\t}\n\n\t\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( 2884 )\n\t\t\t\t: enable( 2884 );\n\n\t\t\tvar flipSided = ( material.side === BackSide );\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\n\n\t\t\tsetFlipSided( flipSided );\n\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t\t? setBlending( NoBlending )\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest( stencilWrite );\n\t\t\tif ( stencilWrite ) {\n\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t\t}\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( 2884 );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 2884 );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( 32823 );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 32823 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( 3089 );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 3089 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unbindTexture() {\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage3D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tenabledCapabilities = {};\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\t\tvar _canvas;\n\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\n\t\tvar useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\t\tfunction createCanvas( width, height ) {\n\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\t\treturn useOffscreenCanvas ?\n\t\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t}\n\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\t\tvar scale = 1;\n\n\t\t\t// handle case if texture exceeds max size\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t}\n\n\t\t\t// only perform resize if necessary\n\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t\t// only perform resize for certain image types\n\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\t\tvar floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;\n\n\t\t\t\t\tvar width = floor( scale * image.width );\n\t\t\t\t\tvar height = floor( scale * image.height );\n\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\n\n\t\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\t\treturn canvas;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( isWebGL2 ) { return false; }\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t\t_gl.generateMipmap( target );\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t\t}\n\n\t\tfunction getInternalFormat( glFormat, glType ) {\n\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif ( glFormat === 6403 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6407 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6408 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\n\n\t\t\t}\n\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t\t} else if ( internalFormat === 34843 || internalFormat === 34837 ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );\n\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\t\treturn 9728;\n\n\t\t\t}\n\n\t\t\treturn 9729;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\t_videoTextures.delete( texture );\n\n\t\t\t}\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) { return; }\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLMultiviewRenderTarget ) {\n\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglColorTexture );\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglDepthStencilTexture );\n\n\t\t\t\tinfo.memory.textures -= 2;\n\n\t\t\t\tfor ( var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglViewFramebuffers[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\n\t\t\ttextureUnits = 0;\n\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture2DArray( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture3D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tif ( texture.image.length !== 6 ) { return; }\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\t\tvar mipmaps;\n\n\t\t\t\tif ( isCompressed ) {\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tvar wrappingToGL = {};\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\n\n\t\tvar filterToGL = {};\n\t\tfilterToGL[ NearestFilter ] = 9728;\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\n\t\tfilterToGL[ LinearFilter ] = 9729;\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\n\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\t\tif ( supportsMips ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction initTexture( textureProperties, texture ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tvar textureType = 3553;\n\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\n\n\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tif ( isWebGL2 === false ) { throw new Error( 'Float Depth Texture only supported in WebGL2.0' ); }\n\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t} else if ( isWebGL2 ) {\n\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\tglInternalFormat = 33189;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( 3553, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\n\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\t\tvar isMultiview = ( renderTarget.isWebGLMultiviewRenderTarget === true );\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( isMultiview ) {\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar numViews = renderTarget.numViews;\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar ext = extensions.get( 'OVR_multiview2' );\n\n\t\t\t\t\tinfo.memory.textures += 2;\n\n\t\t\t\t\tvar colorTexture = _gl.createTexture();\n\t\t\t\t\t_gl.bindTexture( 35866, colorTexture );\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 32856, width, height, numViews, 0, 6408, 5121, null );\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 36064, colorTexture, 0, 0, numViews );\n\n\t\t\t\t\tvar depthStencilTexture = _gl.createTexture();\n\t\t\t\t\t_gl.bindTexture( 35866, depthStencilTexture );\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 35056, width, height, numViews, 0, 34041, 34042, null );\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 33306, depthStencilTexture, 0, 0, numViews );\n\n\t\t\t\t\tvar viewFramebuffers = new Array( numViews );\n\t\t\t\t\tfor ( var i = 0; i < numViews; ++ i ) {\n\n\t\t\t\t\t\tviewFramebuffers[ i ] = _gl.createFramebuffer();\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, viewFramebuffers[ i ] );\n\t\t\t\t\t\t_gl.framebufferTextureLayer( 36160, 36064, colorTexture, 0, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trenderTargetProperties.__webglColorTexture = colorTexture;\n\t\t\t\t\trenderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;\n\t\t\t\t\trenderTargetProperties.__webglViewFramebuffers = viewFramebuffers;\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\t\t\t\t\t_gl.bindTexture( 35866, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 34067, null );\n\n\t\t\t} else if ( ! isMultiview ) {\n\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 3553, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\n\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t\t}\n\n\t\tfunction updateVideoTexture( texture ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\t// Check the last frame we updated the VideoTexture\n\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t\t_videoTextures.set( texture, frame );\n\t\t\t\ttexture.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// backwards compatibility\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTexture2D = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( texture, slot );\n\n\t\t}\n\n\t\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTextureCube = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\tsetTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\n\t}\n\n\t/**\n\t * @author thespite / http://www.twitter.com/thespite\n\t */\n\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\n\n\t\t\tif ( p === ByteType ) { return 5120; }\n\t\t\tif ( p === ShortType ) { return 5122; }\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\n\t\t\tif ( p === IntType ) { return 5124; }\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\n\t\t\tif ( p === FloatType ) { return 5126; }\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\n\t\t\tif ( p === RGBFormat ) { return 6407; }\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\n\t\t\tif ( p === DepthFormat ) { return 6402; }\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\n\t\t\tif ( p === RedFormat ) { return 6403; }\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\t/**\n\t * @author fernandojsg / http://fernandojsg.com\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction WebGLMultiviewRenderTarget( width, height, numViews, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.depthBuffer = false;\n\t\tthis.stencilBuffer = false;\n\n\t\tthis.numViews = numViews;\n\n\t}\n\n\tWebGLMultiviewRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultiviewRenderTarget,\n\n\t\tisWebGLMultiviewRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.numViews = source.numViews;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetNumViews: function ( numViews ) {\n\n\t\t\tif ( this.numViews !== numViews ) {\n\n\t\t\t\tthis.numViews = numViews;\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author fernandojsg / http://fernandojsg.com\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction WebGLMultiview( renderer, gl ) {\n\n\t\tvar DEFAULT_NUMVIEWS = 2;\n\n\t\tvar extensions = renderer.extensions;\n\t\tvar properties = renderer.properties;\n\n\t\tvar renderTarget, currentRenderTarget;\n\t\tvar mat3, mat4, cameraArray, renderSize;\n\n\t\tvar available;\n\t\tvar maxNumViews = 0;\n\n\t\t//\n\n\t\tfunction isAvailable() {\n\n\t\t\tif ( available === undefined ) {\n\n\t\t\t\tvar extension = extensions.get( 'OVR_multiview2' );\n\n\t\t\t\tavailable = extension !== null && gl.getContextAttributes().antialias === false;\n\n\t\t\t\tif ( available ) {\n\n\t\t\t\t\tmaxNumViews = gl.getParameter( extension.MAX_VIEWS_OVR );\n\t\t\t\t\trenderTarget = new WebGLMultiviewRenderTarget( 0, 0, DEFAULT_NUMVIEWS );\n\n\t\t\t\t\trenderSize = new Vector2();\n\t\t\t\t\tmat4 = [];\n\t\t\t\t\tmat3 = [];\n\t\t\t\t\tcameraArray = [];\n\n\t\t\t\t\tfor ( var i = 0; i < maxNumViews; i ++ ) {\n\n\t\t\t\t\t\tmat4[ i ] = new Matrix4();\n\t\t\t\t\t\tmat3[ i ] = new Matrix3();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn available;\n\n\t\t}\n\n\t\tfunction getCameraArray( camera ) {\n\n\t\t\tif ( camera.isArrayCamera ) { return camera.cameras; }\n\n\t\t\tcameraArray[ 0 ] = camera;\n\n\t\t\treturn cameraArray;\n\n\t\t}\n\n\t\tfunction updateCameraProjectionMatricesUniform( camera, uniforms ) {\n\n\t\t\tvar cameras = getCameraArray( camera );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tmat4[ i ].copy( cameras[ i ].projectionMatrix );\n\n\t\t\t}\n\n\t\t\tuniforms.setValue( gl, 'projectionMatrices', mat4 );\n\n\t\t}\n\n\t\tfunction updateCameraViewMatricesUniform( camera, uniforms ) {\n\n\t\t\tvar cameras = getCameraArray( camera );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tmat4[ i ].copy( cameras[ i ].matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\tuniforms.setValue( gl, 'viewMatrices', mat4 );\n\n\t\t}\n\n\t\tfunction updateObjectMatricesUniforms( object, camera, uniforms ) {\n\n\t\t\tvar cameras = getCameraArray( camera );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tmat4[ i ].multiplyMatrices( cameras[ i ].matrixWorldInverse, object.matrixWorld );\n\t\t\t\tmat3[ i ].getNormalMatrix( mat4[ i ] );\n\n\t\t\t}\n\n\t\t\tuniforms.setValue( gl, 'modelViewMatrices', mat4 );\n\t\t\tuniforms.setValue( gl, 'normalMatrices', mat3 );\n\n\t\t}\n\n\t\tfunction isMultiviewCompatible( camera ) {\n\n\t\t\tif ( camera.isArrayCamera === undefined ) { return true; }\n\n\t\t\tvar cameras = camera.cameras;\n\n\t\t\tif ( cameras.length > maxNumViews ) { return false; }\n\n\t\t\tfor ( var i = 1, il = cameras.length; i < il; i ++ ) {\n\n\t\t\t\tif ( cameras[ 0 ].viewport.z !== cameras[ i ].viewport.z ||\n\t\t\t\t\tcameras[ 0 ].viewport.w !== cameras[ i ].viewport.w ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction resizeRenderTarget( camera ) {\n\n\t\t\tif ( currentRenderTarget ) {\n\n\t\t\t\trenderSize.set( currentRenderTarget.width, currentRenderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.getDrawingBufferSize( renderSize );\n\n\t\t\t}\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tvar viewport = camera.cameras[ 0 ].viewport;\n\n\t\t\t\trenderTarget.setSize( viewport.z, viewport.w );\n\t\t\t\trenderTarget.setNumViews( camera.cameras.length );\n\n\t\t\t} else {\n\n\t\t\t\trenderTarget.setSize( renderSize.x, renderSize.y );\n\t\t\t\trenderTarget.setNumViews( DEFAULT_NUMVIEWS );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction attachCamera( camera ) {\n\n\t\t\tif ( isMultiviewCompatible( camera ) === false ) { return; }\n\n\t\t\tcurrentRenderTarget = renderer.getRenderTarget();\n\t\t\tresizeRenderTarget( camera );\n\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tfunction detachCamera( camera ) {\n\n\t\t\tif ( renderTarget !== renderer.getRenderTarget() ) { return; }\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\tflush( camera );\n\n\t\t}\n\n\t\tfunction flush( camera ) {\n\n\t\t\tvar srcRenderTarget = renderTarget;\n\t\t\tvar numViews = srcRenderTarget.numViews;\n\n\t\t\tvar srcFramebuffers = properties.get( srcRenderTarget ).__webglViewFramebuffers;\n\n\t\t\tvar viewWidth = srcRenderTarget.width;\n\t\t\tvar viewHeight = srcRenderTarget.height;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tfor ( var i = 0; i < numViews; i ++ ) {\n\n\t\t\t\t\tvar viewport = camera.cameras[ i ].viewport;\n\n\t\t\t\t\tvar x1 = viewport.x;\n\t\t\t\t\tvar y1 = viewport.y;\n\t\t\t\t\tvar x2 = x1 + viewport.z;\n\t\t\t\t\tvar y2 = y1 + viewport.w;\n\n\t\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ i ] );\n\t\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, x1, y1, x2, y2, 16384, 9728 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ 0 ] );\n\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, 16384, 9728 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.isAvailable = isAvailable;\n\t\tthis.attachCamera = attachCamera;\n\t\tthis.detachCamera = detachCamera;\n\t\tthis.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;\n\t\tthis.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;\n\t\tthis.updateObjectMatricesUniforms = updateObjectMatricesUniforms;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group,\n\n\t\tisGroup: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author jsantell / https://www.jsantell.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar cameraLPos = new Vector3();\n\tvar cameraRPos = new Vector3();\n\n\t/**\n\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t * the cameras' projection and world matrices have already been set.\n\t * And that near and far planes are identical for both cameras.\n\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t */\n\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\tvar projR = cameraR.projectionMatrix.elements;\n\n\t\t// VR systems will have identical far and near planes, and\n\t\t// most likely identical top and bottom frustum extents.\n\t\t// Use the left camera for these values.\n\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\tvar left = near * leftFov;\n\t\tvar right = near * rightFov;\n\n\t\t// Calculate the new camera's position offset from the\n\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\tvar zOffset = ipd / ( - leftFov + rightFov );\n\t\tvar xOffset = zOffset * - leftFov;\n\n\t\t// TODO: Better way to apply this offset?\n\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\tcamera.translateX( xOffset );\n\t\tcamera.translateZ( zOffset );\n\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t// Find the union of the frustum values of the cameras and scale\n\t\t// the values so that the near plane's position does not change in world space,\n\t\t// although must now be relative to the new union camera.\n\t\tvar near2 = near + zOffset;\n\t\tvar far2 = far + zOffset;\n\t\tvar left2 = left - xOffset;\n\t\tvar right2 = right + ( ipd - xOffset );\n\t\tvar top2 = topFov * far / far2 * near2;\n\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebVRManager( renderer ) {\n\n\t\tvar renderWidth, renderHeight;\n\t\tvar scope = this;\n\n\t\tvar device = null;\n\t\tvar frameData = null;\n\n\t\tvar controllers = [];\n\t\tvar standingMatrix = new Matrix4();\n\t\tvar standingMatrixInverse = new Matrix4();\n\n\t\tvar framebufferScaleFactor = 1.0;\n\n\t\tvar referenceSpaceType = 'local-floor';\n\n\t\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\n\n\t\t\tframeData = new window.VRFrameData();\n\t\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\t\t}\n\n\t\tvar matrixWorldInverse = new Matrix4();\n\t\tvar tempQuaternion = new Quaternion();\n\t\tvar tempPosition = new Vector3();\n\n\t\tvar tempCamera = new PerspectiveCamera();\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.viewport = new Vector4();\n\t\tcameraL.layers.enable( 1 );\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.viewport = new Vector4();\n\t\tcameraR.layers.enable( 2 );\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\t//\n\n\t\tfunction isPresenting() {\n\n\t\t\treturn device !== null && device.isPresenting === true;\n\n\t\t}\n\n\t\tvar currentSize = new Vector2(), currentPixelRatio;\n\n\t\tfunction onVRDisplayPresentChange() {\n\n\t\t\tif ( isPresenting() ) {\n\n\t\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\n\t\t\t\trenderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;\n\t\t\t\trenderHeight = eyeParameters.renderHeight * framebufferScaleFactor;\n\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\t\trenderer.getSize( currentSize );\n\n\t\t\t\trenderer.setDrawingBufferSize( renderWidth, renderHeight, 1 );\n\n\t\t\t\tcameraL.viewport.set( 0, 0, renderWidth / 2, renderHeight );\n\t\t\t\tcameraR.viewport.set( renderWidth / 2, 0, renderWidth / 2, renderHeight );\n\n\t\t\t\tanimation.start();\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t\t} else {\n\n\t\t\t\tif ( scope.enabled ) {\n\n\t\t\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\n\n\t\t\t\t}\n\n\t\t\t\tanimation.stop();\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar triggers = [];\n\t\tvar grips = [];\n\n\t\tfunction findGamepad( id ) {\n\n\t\t\tvar gamepads = navigator.getGamepads && navigator.getGamepads();\n\n\t\t\tfor ( var i = 0, l = gamepads.length; i < l; i ++ ) {\n\n\t\t\t\tvar gamepad = gamepads[ i ];\n\n\t\t\t\tif ( gamepad && ( gamepad.id === 'Daydream Controller' ||\n\t\t\t\t\tgamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||\n\t\t\t\t\tgamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||\n\t\t\t\t\tgamepad.id.startsWith( 'HTC Vive Focus' ) ||\n\t\t\t\t\tgamepad.id.startsWith( 'Spatial Controller' ) ) ) {\n\n\t\t\t\t\tvar hand = gamepad.hand;\n\n\t\t\t\t\tif ( id === 0 && ( hand === '' || hand === 'right' ) ) { return gamepad; }\n\t\t\t\t\tif ( id === 1 && ( hand === 'left' ) ) { return gamepad; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateControllers() {\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar gamepad = findGamepad( i );\n\n\t\t\t\tif ( gamepad !== undefined && gamepad.pose !== undefined ) {\n\n\t\t\t\t\tif ( gamepad.pose === null ) { return; }\n\n\t\t\t\t\t// Pose\n\n\t\t\t\t\tvar pose = gamepad.pose;\n\n\t\t\t\t\tif ( pose.hasPosition === false ) { controller.position.set( 0.2, - 0.6, - 0.05 ); }\n\n\t\t\t\t\tif ( pose.position !== null ) { controller.position.fromArray( pose.position ); }\n\t\t\t\t\tif ( pose.orientation !== null ) { controller.quaternion.fromArray( pose.orientation ); }\n\t\t\t\t\tcontroller.matrix.compose( controller.position, controller.quaternion, controller.scale );\n\t\t\t\t\tcontroller.matrix.premultiply( standingMatrix );\n\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.quaternion, controller.scale );\n\t\t\t\t\tcontroller.matrixWorldNeedsUpdate = true;\n\t\t\t\t\tcontroller.visible = true;\n\n\t\t\t\t\t// Trigger\n\n\t\t\t\t\tvar buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;\n\n\t\t\t\t\tif ( triggers[ i ] === undefined ) { triggers[ i ] = false; }\n\n\t\t\t\t\tif ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\n\n\t\t\t\t\t\ttriggers[ i ] = gamepad.buttons[ buttonId ].pressed;\n\n\t\t\t\t\t\tif ( triggers[ i ] === true ) {\n\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectstart' } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectend' } );\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'select' } );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Grip\n\t\t\t\t\tbuttonId = 2;\n\n\t\t\t\t\tif ( grips[ i ] === undefined ) { grips[ i ] = false; }\n\n\t\t\t\t\t// Skip if the grip button doesn't exist on this controller\n\t\t\t\t\tif ( gamepad.buttons[ buttonId ] !== undefined ) {\n\n\t\t\t\t\t\tif ( grips[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\n\n\t\t\t\t\t\t\tgrips[ i ] = gamepad.buttons[ buttonId ].pressed;\n\n\t\t\t\t\t\t\tif ( grips[ i ] === true ) {\n\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeezestart' } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeezeend' } );\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeeze' } );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontroller.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateViewportFromBounds( viewport, bounds ) {\n\n\t\t\tif ( bounds !== null && bounds.length === 4 ) {\n\n\t\t\t\tviewport.set( bounds[ 0 ] * renderWidth, bounds[ 1 ] * renderHeight, bounds[ 2 ] * renderWidth, bounds[ 3 ] * renderHeight );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new Group();\n\t\t\t\tcontroller.matrixAutoUpdate = false;\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller;\n\n\t\t};\n\n\t\tthis.getDevice = function () {\n\n\t\t\treturn device;\n\n\t\t};\n\n\t\tthis.setDevice = function ( value ) {\n\n\t\t\tif ( value !== undefined ) { device = value; }\n\n\t\t\tanimation.setContext( value );\n\n\t\t};\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t};\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tvar userHeight = referenceSpaceType === 'local-floor' ? 1.6 : 0;\n\n\t\t\tdevice.depthNear = camera.near;\n\t\t\tdevice.depthFar = camera.far;\n\n\t\t\tdevice.getFrameData( frameData );\n\n\t\t\t//\n\n\t\t\tif ( referenceSpaceType === 'local-floor' ) {\n\n\t\t\t\tvar stageParameters = device.stageParameters;\n\n\t\t\t\tif ( stageParameters ) {\n\n\t\t\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstandingMatrix.makeTranslation( 0, userHeight, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar pose = frameData.pose;\n\n\t\t\ttempCamera.matrix.copy( standingMatrix );\n\t\t\ttempCamera.matrix.decompose( tempCamera.position, tempCamera.quaternion, tempCamera.scale );\n\n\t\t\tif ( pose.orientation !== null ) {\n\n\t\t\t\ttempQuaternion.fromArray( pose.orientation );\n\t\t\t\ttempCamera.quaternion.multiply( tempQuaternion );\n\n\t\t\t}\n\n\t\t\tif ( pose.position !== null ) {\n\n\t\t\t\ttempQuaternion.setFromRotationMatrix( standingMatrix );\n\t\t\t\ttempPosition.fromArray( pose.position );\n\t\t\t\ttempPosition.applyQuaternion( tempQuaternion );\n\t\t\t\ttempCamera.position.add( tempPosition );\n\n\t\t\t}\n\n\t\t\ttempCamera.updateMatrixWorld();\n\n\t\t\t//\n\n\t\t\tcamera.matrixWorld.copy( tempCamera.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tcameraL.near = camera.near;\n\t\t\tcameraR.near = camera.near;\n\n\t\t\tcameraL.far = camera.far;\n\t\t\tcameraR.far = camera.far;\n\n\t\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\n\t\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\n\n\t\t\t// TODO (mrdoob) Double check this code\n\n\t\t\tstandingMatrixInverse.getInverse( standingMatrix );\n\n\t\t\tif ( referenceSpaceType === 'local-floor' ) {\n\n\t\t\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\n\t\t\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\n\t\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\n\t\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\t// envMap and Mirror needs camera.matrixWorld\n\n\t\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\n\t\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\n\n\t\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\n\t\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\n\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\t//\n\n\t\t\tvar layers = device.getLayers();\n\n\t\t\tif ( layers.length ) {\n\n\t\t\t\tvar layer = layers[ 0 ];\n\n\t\t\t\tupdateViewportFromBounds( cameraL.viewport, layer.leftBounds );\n\t\t\t\tupdateViewportFromBounds( cameraR.viewport, layer.rightBounds );\n\n\t\t\t}\n\n\t\t\tupdateControllers();\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getStandingMatrix = function () {\n\n\t\t\treturn standingMatrix;\n\n\t\t};\n\n\t\tthis.isPresenting = isPresenting;\n\n\t\t// Animation Loop\n\n\t\tvar animation = new WebGLAnimation();\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tanimation.setAnimationLoop( callback );\n\n\t\t\tif ( isPresenting() ) { animation.start(); }\n\n\t\t};\n\n\t\tthis.submitFrame = function () {\n\n\t\t\tif ( isPresenting() ) { device.submitFrame(); }\n\n\t\t};\n\n\t\tthis.dispose = function () {\n\n\t\t\tif ( typeof window !== 'undefined' ) {\n\n\t\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tthis.setFrameOfReferenceType = function () {\n\n\t\t\tconsole.warn( 'THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.' );\n\n\t\t};\n\n\t}\n\n\tObject.assign( WebVRManager.prototype, EventDispatcher.prototype );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebXRManager( renderer, gl ) {\n\n\t\tvar scope = this;\n\n\t\tvar session = null;\n\n\t\t// var framebufferScaleFactor = 1.0;\n\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\n\t\tvar pose = null;\n\n\t\tvar controllers = [];\n\t\tvar sortedInputSources = [];\n\n\t\tfunction isPresenting() {\n\n\t\t\treturn session !== null && referenceSpace !== null;\n\n\t\t}\n\n\t\t//\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new Group();\n\t\t\t\tcontroller.matrixAutoUpdate = false;\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller;\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tif ( sortedInputSources[ i ] === event.inputSource ) {\n\n\t\t\t\t\tcontrollers[ i ].dispatchEvent( { type: event.type } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\trenderer.setFramebuffer( null );\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\t\tanimation.stop();\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tfunction onRequestReferenceSpace( value ) {\n\n\t\t\treferenceSpace = value;\n\n\t\t\tanimation.setContext( session );\n\t\t\tanimation.start();\n\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( /* value */ ) {\n\n\t\t\t// framebufferScaleFactor = value;\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\tsession.updateRenderState( { baseLayer: new XRWebGLLayer( session, gl ) } );\n\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t\t//\n\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t\t\tupdateInputSources();\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction updateInputSources() {\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tsortedInputSources[ i ] = findInputSource( i );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction findInputSource( id ) {\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor ( var i = 0; i < inputSources.length; i ++ ) {\n\n\t\t\t\tvar inputSource = inputSources[ i ];\n\t\t\t\tvar handedness = inputSource.handedness;\n\n\t\t\t\tif ( id === 0 && ( handedness === 'none' || handedness === 'right' ) ) { return inputSource; }\n\t\t\t\tif ( id === 1 && ( handedness === 'left' ) ) { return inputSource; }\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t}\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update camera and its children\n\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.isPresenting = isPresenting;\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tvar view = views[ i ];\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\t\t\t\t\tvar viewMatrix = view.transform.inverse.matrix;\n\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\n\t\t\t\t\tcamera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar inputSource = sortedInputSources[ i ];\n\n\t\t\t\tif ( inputSource ) {\n\n\t\t\t\t\tvar inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\tcontroller.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.rotation, controller.scale );\n\t\t\t\t\t\tcontroller.visible = true;\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t\t// DEPRECATED\n\n\t\tthis.getStandingMatrix = function () {\n\n\t\t\tconsole.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );\n\t\t\treturn new Matrix4();\n\n\t\t};\n\n\t\tthis.getDevice = function () {\n\n\t\t\tconsole.warn( 'THREE.WebXRManager: getDevice() has been deprecated.' );\n\n\t\t};\n\n\t\tthis.setDevice = function () {\n\n\t\t\tconsole.warn( 'THREE.WebXRManager: setDevice() has been deprecated.' );\n\n\t\t};\n\n\t\tthis.setFrameOfReferenceType = function () {\n\n\t\t\tconsole.warn( 'THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.' );\n\n\t\t};\n\n\t\tthis.submitFrame = function () {};\n\n\t}\n\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null;\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.gammaInput = false;\n\t\tthis.gammaOutput = false;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t\t_isContextLost = false,\n\n\t\t\t// internal state cache\n\n\t\t\t_framebuffer = null,\n\n\t\t\t_currentActiveCubeFace = 0,\n\t\t\t_currentActiveMipmapLevel = 0,\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\n\t\t\t// geometry and program caching\n\n\t\t\t_currentGeometryProgram = {\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false\n\t\t\t},\n\n\t\t\t_currentCamera = null,\n\t\t\t_currentArrayCamera = null,\n\n\t\t\t_currentViewport = new Vector4(),\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\n\t\t\t//\n\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\n\t\t\t_pixelRatio = 1,\n\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\n\t\t\t// frustum\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t// clipping\n\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\n\t\t\t// camera matrices cache\n\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_vector3 = new Vector3();\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\n\t\t\t\txrCompatible: true\n\t\t\t};\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, attributes, geometries, objects;\n\t\tvar programCache, renderLists, renderStates;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tvar utils;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\t\textensions.get( 'OES_texture_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tattributes = new WebGLAttributes( _gl );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates();\n\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// vr\n\n\t\tvar vr = ( typeof navigator !== 'undefined' && 'xr' in navigator ) ? new WebXRManager( _this, _gl ) : new WebVRManager( _this );\n\n\t\tthis.vr = vr;\n\n\t\t// Multiview\n\n\t\tvar multiview = new WebGLMultiview( _this, _gl );\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.loseContext(); }\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.restoreContext(); }\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) { return; }\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tif ( vr.isPresenting() ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\t\ttarget = new Vector4();\n\n\t\t\t}\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tobjects.dispose();\n\n\t\t\tvr.dispose();\n\n\t\t\tanimation.stop();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.color );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( 4, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\n\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\n\t\t\t\t_currentGeometryProgram.program = program.id;\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tif ( index !== null && index.count === 0 ) { return; }\n\t\t\tif ( position === undefined || position.count === 0 ) { return; }\n\n\t\t\t//\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( object, geometry, material, program );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( 34963, attribute.buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = Infinity;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdataCount = index.count;\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\tdataCount = position.count;\n\n\t\t\t}\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) { return; }\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( 4 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( 5 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( 6 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( 0 );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( object, geometry, material, program ) {\n\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\n\n\t\t\t}\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\n\n\t\t\t\t\t\tvar attribute = attributes.get( object.instanceMatrix );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 0, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 1, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 2, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 3, 1 );\n\n\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.material ) {\n\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( vr.isPresenting() ) { return; }\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\tvr.setAnimationLoop( callback );\n\n\t\t\tanimation.start();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t\t}\n\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\t\tforceClear = arguments[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost ) { return; }\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t_currentGeometryProgram.program = null;\n\t\t\t_currentGeometryProgram.wireframe = false;\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\n\n\t\t\tif ( vr.enabled && vr.isPresenting() ) {\n\n\t\t\t\tcamera = vr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) { _clipping.beginShadows(); }\n\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tif ( _clippingEnabled ) { _clipping.endShadows(); }\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset ) { this.info.reset(); }\n\n\t\t\tif ( renderTarget !== undefined ) {\n\n\t\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tif ( vr.enabled && multiview.isAvailable() ) {\n\n\t\t\t\tmultiview.attachCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\tif ( vr.enabled ) {\n\n\t\t\t\tif ( multiview.isAvailable() ) {\n\n\t\t\t\t\tmultiview.detachCamera( camera );\n\n\t\t\t\t}\n\n\t\t\t\tvr.submitFrame();\n\n\t\t\t}\n\n\t\t\t// _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tif ( vr.enabled && multiview.isAvailable() ) {\n\n\t\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\n\t\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t\t_currentGeometryProgram.program = null;\n\t\t\t\t_currentGeometryProgram.wireframe = false;\n\n\t\t\t\trenderObjectImmediate( object, program );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t}\n\n\t\tfunction initMaterial( material, fog, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tvar lightsStateVersion = lights.state.version;\n\n\t\t\tvar parameters = programCache.getParameters(\n\t\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( material, parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\t\tprogramChange = false;\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.onBeforeCompile( materialProperties.shader, _this );\n\n\t\t\t\t// Computing cache key again as onBeforeCompile may have changed the shaders\n\t\t\t\tprogramCacheKey = programCache.getProgramCacheKey( material, parameters );\n\n\t\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, programCacheKey );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tvar materialProperties = properties.get( material );\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.version !== materialProperties.__version ) {\n\n\t\t\t\tinitMaterial( material, fog, object );\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\t\tmultiview.updateCameraProjectionMatricesUniform( camera, p_uniforms );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\t\t\tmultiview.updateCameraViewMatricesUniform( camera, p_uniforms );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// not sure why, but otherwise weird things happen\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t\trefreshUniformsMatcap( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\t\tm_uniforms.color.value.copy( material.color );\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t\t}\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tif ( program.numMultiviewViews > 0 ) {\n\n\t\t\t\tmultiview.updateObjectMatricesUniforms( object, camera, p_uniforms );\n\n\t\t\t} else {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\n\t\t\t}\n\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\t\tuniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniforms.transparency.value = material.transparency;\n\n\t\t}\n\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\t\tif ( material.matcap ) {\n\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\t//\n\t\tthis.setFramebuffer = function ( value ) {\n\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\n\n\t\t\t_framebuffer = value;\n\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace || 0 ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar levelScale = Math.pow( 2, - level );\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\n\t\t\tvar glFormat = utils.convert( texture.format );\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tObject.assign( FogExp2.prototype, {\n\n\t\tisFogExp2: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new FogExp2( this.color, this.density );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tObject.assign( Fog.prototype, {\n\n\t\tisFog: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new Fog( this.color, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *  rotation: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\tvar _worldScale = new Vector3();\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\tvar _rotatedPosition = new Vector2();\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\tvar _vB$1 = new Vector3();\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\tvar _uvB$1 = new Vector2();\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tvar float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tif ( raycaster.camera === null ) {\n\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\t\t\tif ( rotation !== 0 ) {\n\n\t\t\t\tcos = Math.cos( rotation );\n\t\t\t\tsin = Math.sin( rotation );\n\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t\t_uvA$1.set( 0, 0 );\n\t\t\t_uvB$1.set( 1, 0 );\n\t\t\t_uvC$1.set( 1, 1 );\n\n\t\t\t// check first triangle\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\n\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t\t_uvB$1.set( 0, 1 );\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\n\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\n\n\t\t\treturn this;\n\n\t\t}\n\n\n\t} );\n\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t\t// to check if rotation is not zero\n\t\tif ( sin !== undefined ) {\n\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t\t} else {\n\n\t\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t\t}\n\n\n\t\tvertexPosition.copy( mvPosition );\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y;\n\n\t\t// transform to world space\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n\t}\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v1$4 = new Vector3();\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tisLOD: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) { distance = 0; }\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn levels[ i - 1 ].object;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 );\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar vector = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\t\tvector.x = skinWeight.getX( i );\n\t\t\t\tvector.y = skinWeight.getY( i );\n\t\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tvar _offsetMatrix = new Matrix4();\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\tthis.frame = - 1;\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone, i, il;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t},\n\n\t\tgetBoneByName: function ( name ) {\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone.name === name ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh( geometry, material, count ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\t\tthis.count = count;\n\n\t}\n\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: InstancedMesh,\n\n\t\tisInstancedMesh: true,\n\n\t\tgetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\n\t\t\tif ( _mesh.material === undefined ) { return; }\n\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t\t// calculate the world matrix for each instance\n\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t\t// the mesh represents this single instance\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t\t// process the result of raycast\n\n\t\t\t\tif ( _instanceIntersects.length > 0 ) {\n\n\t\t\t\t\t_instanceIntersects[ 0 ].instanceId = instanceId;\n\t\t\t\t\t_instanceIntersects[ 0 ].object = this;\n\n\t\t\t\t\tintersects.push( _instanceIntersects[ 0 ] );\n\n\t\t\t\t\t_instanceIntersects.length = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start = new Vector3();\n\tvar _end = new Vector3();\n\tvar _inverseMatrix$1 = new Matrix4();\n\tvar _ray$1 = new Ray();\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tlineDistances[ 0 ] = 0;\n\n\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar precision = raycaster.linePrecision;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\n\t\t\t_sphere$2.radius += precision;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\t\tvar localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localPrecisionSq = localPrecision * localPrecision;\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start$1 = new Vector3();\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t_start$1.copy( vertices[ i ] );\n\t\t\t\t\t_end$1.copy( vertices[ i + 1 ] );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t *\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\tvar _ray$2 = new Ray();\n\tvar _sphere$3 = new Sphere();\n\tvar _position$1 = new Vector3();\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\n\t\t\t_sphere$3.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t_position$1.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\n\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\t\tconstructor: VideoTexture,\n\n\t\tisVideoTexture: true,\n\n\t\tupdate: function () {\n\n\t\t\tvar video = this.image;\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar i, j, l, o, ol;\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\t\tvar vertex;\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar position, indices, groups;\n\t\t\tvar group, start, count;\n\t\t\tvar index1, index2;\n\n\t\t\tvertex = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\t\t\t\tindices = geometry.index;\n\t\t\t\tgroups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\t\tstart = group.start;\n\t\t\t\t\tcount = group.count;\n\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( key in edges ) {\n\n\t\t\t\t\te = edges[ key ];\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tvar i, j;\n\n\t\tif ( func.length < 3 ) {\n\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t\t}\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\tvar a = i * sliceCount + j;\n\t\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\n\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\n\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t, 0, - r, t,\n\t\t\t 0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t r, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar P = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\tTubeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, j;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * Port from https://github.com/mapbox/earcut (v2.1.5)\n\t */\n\n\tvar Earcut = {\n\n\t\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\t\tdim = dim || 2;\n\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\t\ttriangles = [];\n\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\n\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\n\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\t\tif ( data.length > 80 * dim ) {\n\n\t\t\t\tminX = maxX = data[ 0 ];\n\t\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\t\tx = data[ i ];\n\t\t\t\t\ty = data[ i + 1 ];\n\t\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\n\n\t\t\t\t}\n\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t\t}\n\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\t\treturn triangles;\n\n\t\t}\n\n\t};\n\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\tfunction linkedList( data, start, end, dim, clockwise ) {\n\n\t\tvar i, last;\n\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t} else {\n\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t}\n\n\t\tif ( last && equals( last, last.next ) ) {\n\n\t\t\tremoveNode( last );\n\t\t\tlast = last.next;\n\n\t\t}\n\n\t\treturn last;\n\n\t}\n\n\t// eliminate colinear or duplicate points\n\tfunction filterPoints( start, end ) {\n\n\t\tif ( ! start ) { return start; }\n\t\tif ( ! end ) { end = start; }\n\n\t\tvar p = start,\n\t\t\tagain;\n\t\tdo {\n\n\t\t\tagain = false;\n\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif ( p === p.next ) { break; }\n\t\t\t\tagain = true;\n\n\t\t\t} else {\n\n\t\t\t\tp = p.next;\n\n\t\t\t}\n\n\t\t} while ( again || p !== end );\n\n\t\treturn end;\n\n\t}\n\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\t\tif ( ! ear ) { return; }\n\n\t\t// interlink polygon nodes in z-order\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\n\n\t\tvar stop = ear,\n\t\t\tprev, next;\n\n\t\t// iterate through ears, slicing them one by one\n\t\twhile ( ear.prev !== ear.next ) {\n\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push( prev.i / dim );\n\t\t\t\ttriangles.push( ear.i / dim );\n\t\t\t\ttriangles.push( next.i / dim );\n\n\t\t\t\tremoveNode( ear );\n\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tear = next;\n\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\t\tif ( ear === stop ) {\n\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif ( ! pass ) {\n\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\tfunction isEar( ear ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// now make sure we don't have other points inside the potential ear\n\t\tvar p = ear.next.next;\n\n\t\twhile ( p !== ear.prev ) {\n\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// triangle bbox; min & max are calculated like this for speed\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t\t// z-order range for the current triangle bbox;\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t\tvar p = ear.prevZ,\n\t\t\tn = ear.nextZ;\n\n\t\t// look for points inside the triangle in both directions\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\t// look for remaining points in decreasing z-order\n\t\twhile ( p && p.z >= minZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t}\n\n\t\t// look for remaining points in increasing z-order\n\t\twhile ( n && n.z <= maxZ ) {\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// go through all polygon nodes and cure small local self-intersections\n\tfunction cureLocalIntersections( start, triangles, dim ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tvar a = p.prev,\n\t\t\t\tb = p.next.next;\n\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\t\ttriangles.push( a.i / dim );\n\t\t\t\ttriangles.push( p.i / dim );\n\t\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t\t// remove two nodes involved\n\t\t\t\tremoveNode( p );\n\t\t\t\tremoveNode( p.next );\n\n\t\t\t\tp = start = b;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn p;\n\n\t}\n\n\t// try splitting polygon into two and triangulate them independently\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\t\tdo {\n\n\t\t\tvar b = a.next.next;\n\t\t\twhile ( b !== a.prev ) {\n\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t\t// filter colinear points around the cuts\n\t\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t\t// run earcut on each half\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\n\t\t\t}\n\n\t\t\ta = a.next;\n\n\t\t} while ( a !== start );\n\n\t}\n\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\t\tvar queue = [],\n\t\t\ti, len, start, end, list;\n\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\t\tstart = holeIndices[ i ] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\t\tlist = linkedList( data, start, end, dim, false );\n\t\t\tif ( list === list.next ) { list.steiner = true; }\n\t\t\tqueue.push( getLeftmost( list ) );\n\n\t\t}\n\n\t\tqueue.sort( compareX );\n\n\t\t// process holes from left to right\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\t\teliminateHole( queue[ i ], outerNode );\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t\t}\n\n\t\treturn outerNode;\n\n\t}\n\n\tfunction compareX( a, b ) {\n\n\t\treturn a.x - b.x;\n\n\t}\n\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\tfunction eliminateHole( hole, outerNode ) {\n\n\t\touterNode = findHoleBridge( hole, outerNode );\n\t\tif ( outerNode ) {\n\n\t\t\tvar b = splitPolygon( outerNode, hole );\n\t\t\tfilterPoints( b, b.next );\n\n\t\t}\n\n\t}\n\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\tfunction findHoleBridge( hole, outerNode ) {\n\n\t\tvar p = outerNode,\n\t\t\thx = hole.x,\n\t\t\thy = hole.y,\n\t\t\tqx = - Infinity,\n\t\t\tm;\n\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\t\tdo {\n\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\t\tqx = x;\n\t\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== outerNode );\n\n\t\tif ( ! m ) { return null; }\n\n\t\tif ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint\n\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\tmx = m.x,\n\t\t\tmy = m.y,\n\t\t\ttanMin = Infinity,\n\t\t\ttan;\n\n\t\tp = m.next;\n\n\t\twhile ( p !== stop ) {\n\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn m;\n\n\t}\n\n\t// interlink polygon nodes in z-order\n\tfunction indexCurve( start, minX, minY, invSize ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\n\t\tsortLinked( p );\n\n\t}\n\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\tfunction sortLinked( list ) {\n\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\n\t\t\tinSize = 1;\n\n\t\tdo {\n\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile ( p ) {\n\n\t\t\t\tnumMerges ++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\t\tpSize ++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif ( ! q ) { break; }\n\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize --;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\n\t\t\t\t\telse { list = e; }\n\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\n\t\t} while ( numMerges > 1 );\n\n\t\treturn list;\n\n\t}\n\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\tfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * ( x - minX ) * invSize;\n\t\ty = 32767 * ( y - minY ) * invSize;\n\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\t\treturn x | ( y << 1 );\n\n\t}\n\n\t// find the leftmost node of a polygon ring\n\tfunction getLeftmost( start ) {\n\n\t\tvar p = start,\n\t\t\tleftmost = start;\n\t\tdo {\n\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn leftmost;\n\n\t}\n\n\t// check if a point lies within a convex triangle\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n\t}\n\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\tfunction isValidDiagonal( a, b ) {\n\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\t\t   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n\t}\n\n\t// signed area of a triangle\n\tfunction area( p, q, r ) {\n\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n\t}\n\n\t// check if two points are equal\n\tfunction equals( p1, p2 ) {\n\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\n\t}\n\n\t// check if two segments intersect\n\tfunction intersects( p1, q1, p2, q2 ) {\n\n\t\tif ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t\t   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n\t}\n\n\t// check if a polygon diagonal intersects any polygon segments\n\tfunction intersectsPolygon( a, b ) {\n\n\t\tvar p = a;\n\t\tdo {\n\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn false;\n\n\t}\n\n\t// check if a polygon diagonal is locally inside the polygon\n\tfunction locallyInside( a, b ) {\n\n\t\treturn area( a.prev, a, a.next ) < 0 ?\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n\t}\n\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\tfunction middleInside( a, b ) {\n\n\t\tvar p = a,\n\t\t\tinside = false,\n\t\t\tpx = ( a.x + b.x ) / 2,\n\t\t\tpy = ( a.y + b.y ) / 2;\n\t\tdo {\n\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\t\t{ inside = ! inside; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn inside;\n\n\t}\n\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\tfunction splitPolygon( a, b ) {\n\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\t\tan = a.next,\n\t\t\tbp = b.prev;\n\n\t\ta.next = b;\n\t\tb.prev = a;\n\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\n\t\treturn b2;\n\n\t}\n\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\tfunction insertNode( i, x, y, last ) {\n\n\t\tvar p = new Node( i, x, y );\n\n\t\tif ( ! last ) {\n\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\n\t\t} else {\n\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\n\t\t}\n\n\t\treturn p;\n\n\t}\n\n\tfunction removeNode( p ) {\n\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\n\n\t}\n\n\tfunction Node( i, x, y ) {\n\n\t\t// vertex index in coordinates array\n\t\tthis.i = i;\n\n\t\t// vertex coordinates\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\t// previous and next vertex nodes in a polygon ring\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\n\t\t// z-order curve value\n\t\tthis.z = null;\n\n\t\t// previous and next nodes in z-order\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null;\n\n\t\t// indicates whether this is a steiner point\n\t\tthis.steiner = false;\n\n\t}\n\n\tfunction signedArea( data, start, end, dim ) {\n\n\t\tvar sum = 0;\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\t\tj = i;\n\n\t\t}\n\n\t\treturn sum;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\t\tvar holeIndices = []; // array of hole indices\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\taddContour( vertices, contour );\n\n\t\t\t//\n\n\t\t\tvar holeIndex = contour.length;\n\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\t\tholeIndices.push( holeIndex );\n\t\t\t\tholeIndex += holes[ i ].length;\n\t\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t\t}\n\n\t\t\treturn faces;\n\n\t\t}\n\n\t};\n\n\tfunction removeDupEndPts( points ) {\n\n\t\tvar l = points.length;\n\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.pop();\n\n\t\t}\n\n\t}\n\n\tfunction addContour( vertices, contour ) {\n\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\tvertices.push( contour[ i ].x );\n\t\t\tvertices.push( contour[ i ].y );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  depth: <float>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\tExtrudeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tvar scope = this;\n\n\t\tvar verticesArray = [];\n\t\tvar uvArray = [];\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar placeholder = [];\n\n\t\t\t// options\n\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tvar extrudePath = options.extrudePath;\n\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar extrudePts, extrudeByPath = false;\n\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tvar ahole, h, hl; // looping of holes\n\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tvar b, bs, t, z,\n\t\t\t\tvert, vlen = vertices.length,\n\t\t\t\tface, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tvar contourMovements = [];\n\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tvar holesMovements = [],\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tvar s;\n\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\tvar layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tvar j, k;\n\t\t\t\ti = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = i - 1;\n\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tvar s = 0,\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t//\n\n\tvar WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tfunction toJSON( shapes, options, data ) {\n\n\t\t//\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\n\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\n\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tvar ix, iy;\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tvar uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 0.5;\n\t\touterRadius = outerRadius || 1;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\tShapeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar i, l, shapeHole;\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\tShapeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t//\n\n\tfunction toJSON$1( shapes, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\theight = height || 1;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\n\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, s;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  color: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 0.5;\n\t\tthis.metalness = 0.5;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  reflectivity: <float>\n\t *  clearcoat: <float>\n\t *  clearcoatRoughness: <float>\n\t *\n\t *  sheen: <Color>\n\t *\n\t *  clearcoatNormalScale: <Vector2>,\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatRoughness = 0.0;\n\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.transparency = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\n\t\tif ( source.sheen ) { this.sheen = ( this.sheen || new Color() ).copy( source.sheen ); }\n\t\telse { this.sheen = null; }\n\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.transparency = source.transparency;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.MultiplyOperation,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  gradientMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMeshPhongMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.gradientMap = null;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshPhongMaterial.prototype.copy.call( this, source );\n\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  matcap: new THREE.Texture( <Image> ),\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) { return; } // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) { return; } // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\n\n\t\t\tfps = fps || 30;\n\n\t\t\tvar clip = sourceClip.clone();\n\n\t\t\tclip.name = name;\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tvar track = clip.tracks[ i ];\n\t\t\t\tvar valueSize = track.getValueSize();\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\n\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\n\n\t\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( times.length === 0 ) { continue; }\n\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\t\ttracks.push( track );\n\n\t\t\t}\n\n\t\t\tclip.tracks = tracks;\n\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// shift all tracks such that clip begins at t=0\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Static methods\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( KeyframeTrack.prototype, {\n\n\t\tconstructor: KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t\t++ from;\n\n\t\t\t}\n\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t\t-- to;\n\n\t\t\t}\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) { to = Math.max( to, 1 ), from = to - 1; }\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tkeep = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\t\treturn track;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrack.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n\tfunction parseKeyframeTrack( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks, duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tvar index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\n\t}\n\n\tObject.assign( Loader.prototype, {\n\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\n\n\t\tparse: function ( /* data */ ) {},\n\n\t\tsetCrossOrigin: function ( crossOrigin ) {\n\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( path ) {\n\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( resourcePath ) {\n\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FileLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\t\tdata = decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = this.response;\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\n\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\n\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( value ) {\n\n\t\t\tthis.requestHeader = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io/\n\t */\n\n\tfunction AnimationLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AnimationLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CompressedTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: DataTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\t\tif ( ! texData ) { return; }\n\n\t\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\tfunction onImageLoad() {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\tfunction onImageError( event ) {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tif ( onError ) { onError( event ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CubeTextureLoader,\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: TextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = image;\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\n\tEllipseCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension || 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t};\n\n\tSplineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = this.curves[ i ];\n\t\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = json.curves[ i ];\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tconstructor: Path,\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = this.holes[ i ];\n\t\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = json.holes[ i ];\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\n\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\n\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\t_projScreenMatrix: new Matrix4(),\n\n\t\t_lightPositionWorld: new Vector3(),\n\n\t\t_lookTarget: new Vector3(),\n\n\t\tgetViewportCount: function () {\n\n\t\t\treturn this._viewportCount;\n\n\t\t},\n\n\t\tgetFrustum: function () {\n\n\t\t\treturn this._frustum;\n\n\t\t},\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\tshadowCamera.lookAt( lookTarget );\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromMatrix( projScreenMatrix );\n\n\t\t\tshadowMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t},\n\n\t\tgetViewport: function ( viewportIndex ) {\n\n\t\t\treturn this._viewports[ viewportIndex ];\n\n\t\t},\n\n\t\tgetFrameExtents: function () {\n\n\t\t\treturn this._frameExtents;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction PointLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: PointLightShadow,\n\n\t\tisPointLightShadow: true,\n\n\t\tupdateMatrices: function ( light, viewportIndex ) {\n\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\n\n\t\t\tvar camera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tcamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.copy( camera.position );\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\t\tcamera.lookAt( lookTarget );\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\n\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromMatrix( projScreenMatrix );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\n\t\tthis.right = ( right !== undefined ) ? right : 1;\n\t\tthis.top = ( top !== undefined ) ? top : 1;\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow() {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow,\n\n\t\tisDirectionalLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t}\n\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.textures = {};\n\n\t}\n\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: MaterialLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\n\t\t\tif ( json.vertexColors !== undefined ) { material.vertexColors = json.vertexColors; }\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\n\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\n\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\n\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\n\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\n\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\n\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\n\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\n\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\n\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\n\n\t\t\t// Shader Material\n\n\t\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\n\n\t\t\tif ( json.extensions !== undefined ) {\n\n\t\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\n\n\t\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\t\tmaterial.transparent = true;\n\n\t\t\t}\n\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\n\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\n\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\n\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\n\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\n\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\n\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\n\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\n\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\n\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\n\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tvar LoaderUtils = {\n\n\t\tdecodeText: function ( array ) {\n\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\t\treturn new TextDecoder().decode( array );\n\n\t\t\t}\n\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t\t} catch ( e ) { // see #16358\n\n\t\t\t\treturn s;\n\n\t\t\t}\n\n\t\t},\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar index = url.lastIndexOf( '/' );\n\n\t\t\tif ( index === - 1 ) { return './'; }\n\n\t\t\treturn url.substr( 0, index + 1 );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tdata.maxInstancedCount = this.maxInstancedCount;\n\n\t\t\tdata.isInstancedBufferGeometry = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\n\n\t\tif ( typeof ( normalized ) === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ()\t{\n\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\n\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\tdata.isInstancedBufferAttribute = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: BufferGeometryLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tvar bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif ( morphAttributes ) {\n\n\t\t\t\tfor ( var key in morphAttributes ) {\n\n\t\t\t\t\tvar attributeArray = morphAttributes[ key ];\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar attribute = attributeArray[ i ];\n\t\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\t\t\tvar bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\tif ( json.name ) { geometry.name = json.name; }\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ObjectLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar shapes = this.parseShape( json.shapes );\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseShape: function ( json ) {\n\n\t\t\tvar shapes = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t},\n\n\t\tparseGeometries: function ( json, shapes ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.closed\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tif ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {\n\n\t\t\t\t\t\t\t\tvar geometryLoader = new THREE.LegacyJSONLoader();\n\t\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.resourcePath ).geometry;\n\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type \"Geometry\".' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar cache = {}; // MultiMaterial\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\n\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\n\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// load single image\n\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\n\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\n\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\n\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\n\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\n\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) { return undefined; }\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\n\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\n\n\t\t\tif ( data.drawMode !== undefined ) { object.setDrawMode( data.drawMode ); }\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\t/**\n\t * @author thespite / http://clicktorelease.com/\n\t */\n\n\n\tfunction ImageBitmapLoader( manager ) {\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.options = undefined;\n\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageBitmapLoader,\n\n\t\tsetOptions: function setOptions( options ) {\n\n\t\t\tthis.options = options;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tfetch( url ).then( function ( res ) {\n\n\t\t\t\treturn res.blob();\n\n\t\t\t} ).then( function ( blob ) {\n\n\t\t\t\tif ( scope.options === undefined ) {\n\n\t\t\t\t\t// Workaround for FireFox. It causes an error if you pass options.\n\t\t\t\t\treturn createImageBitmap( blob );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t\t}\n\n\t\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\t\tCache.add( url, imageBitmap );\n\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} ).catch( function ( e ) {\n\n\t\t\t\tif ( onError ) { onError( e ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) { return []; }\n\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\t{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size ) {\n\n\t\t\tif ( size === undefined ) { size = 100; }\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths( text, size, this.data );\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction createPaths( text, size, data ) {\n\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\tvar paths = [];\n\n\t\tvar offsetX = 0, offsetY = 0;\n\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\tvar char = chars[ i ];\n\n\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\n\t\t\t} else {\n\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn paths;\n\n\t}\n\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) {\n\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar path = new ShapePath();\n\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif ( glyph.o ) {\n\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FontLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( _context === undefined ) {\n\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn _context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\t_context = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AudioLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Primary reference:\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\n\t// 3-band SH defined by 9 coefficients\n\n\tfunction SphericalHarmonics3() {\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tObject.assign( SphericalHarmonics3.prototype, {\n\n\t\tisSphericalHarmonics3: true,\n\n\t\tset: function ( coefficients ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tzero: function () {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\tgetAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t\t// band 1\n\t\t\ttarget.addScale( coeff[ 1 ], 0.488603 * y );\n\t\t\ttarget.addScale( coeff[ 2 ], 0.488603 * z );\n\t\t\ttarget.addScale( coeff[ 3 ], 0.488603 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\t\ttarget.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\t\ttarget.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\t\ttarget.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\t\ttarget.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\tgetIrradianceAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t\t// band 1\n\t\t\ttarget.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\t\ttarget.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\t\ttarget.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\t\ttarget.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\t\ttarget.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\t\ttarget.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\t\ttarget.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tadd: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\n\t\tscale: function ( s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( sh, alpha ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcopy: function ( sh ) {\n\n\t\t\treturn this.set( sh.coefficients );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( SphericalHarmonics3, {\n\n\t\t// evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\tgetBasisAt: function ( normal, shBasis ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\t// band 0\n\t\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t\t// band 1\n\t\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t\t// band 2\n\t\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * A LightProbe is a source of indirect-diffuse light\n\t */\n\n\tfunction LightProbe( sh, intensity ) {\n\n\t\tLight.call( this, undefined, intensity );\n\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\n\n\t}\n\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: LightProbe,\n\n\t\tisLightProbe: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.sh.copy( source.sh );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( skyColor );\n\t\tvar color2 = new Color().set( groundColor );\n\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tvar c0 = Math.sqrt( Math.PI );\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: HemisphereLightProbe,\n\n\t\tisHemisphereLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying colors not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction AmbientLightProbe( color, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: AmbientLightProbe,\n\n\t\tisAmbientLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying color not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tvar _eyeRight = new Matrix4();\n\tvar _eyeLeft = new Matrix4();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar cache = this._cache;\n\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = ( cache.near * Math.tan( _Math.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$2 = new Vector3();\n\tvar _quaternion$3 = new Quaternion();\n\tvar _scale$1 = new Vector3();\n\tvar _orientation = new Vector3();\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\n\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t// code path for Chrome (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._pausedAt = 0;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaElementSource: function ( mediaElement ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaStreamSource: function ( mediaStream ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) { this.play(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function ( delay ) {\n\n\t\t\tif ( delay === undefined ) { delay = 0; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.start( this._startedAt, this._pausedAt + this.offset, this.duration );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\tthis.setDetune( this.detune );\n\t\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis._pausedAt = ( this.context.currentTime - this._startedAt ) * this.playbackRate;\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._pausedAt = 0;\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) { value = []; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDetune: function ( value ) {\n\n\t\t\tthis.detune = value;\n\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDetune: function () {\n\n\t\t\treturn this.detune;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopStart: function ( value ) {\n\n\t\t\tthis.loopStart = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopEnd: function ( value ) {\n\n\t\t\tthis.loopEnd = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$3 = new Vector3();\n\tvar _quaternion$4 = new Quaternion();\n\tvar _scale$2 = new Vector3();\n\tvar _orientation$1 = new Vector3();\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\n\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\n\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif ( panner.positionX ) {\n\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tbufferType = Array;\n\t\t\t\tmixFunction = this._select;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n\t// Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n\t// Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\n\tvar _trackRe = new RegExp( ''\n\t\t+ '^'\n\t\t+ _directoryRe\n\t\t+ _nodeRe\n\t\t+ _objectRe\n\t\t+ _propertyRe\n\t\t+ '$'\n\t);\n\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t\t},\n\n\t\tparseTrackName: function ( trackName ) {\n\n\t\t\tvar matches = _trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t},\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) { return result; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *  - Add objects you would otherwise pass as 'root' to the\n\t *    constructor or the .clipAction method of AnimationMixer.\n\t *\n\t *  - Instead pass this object as 'root'.\n\t *\n\t *  - You can also add and remove objects later when the mixer\n\t *    is running.\n\t *\n\t * Note:\n\t *\n\t *    Objects of this class appear as one object to the mixer,\n\t *    so cache control of the individual objects must be done\n\t *    on the group.\n\t *\n\t * Limitation:\n\t *\n\t *  - The animated properties must be compatible among the\n\t *    all objects in the group.\n\t *\n\t *  - A single property can either be controlled through a\n\t *    target group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length,\n\t\t\t\tknownObject = undefined;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function () {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function () {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0; // restart clip\n\t\t\tthis._loopCount = - 1;// forget previous loops\n\t\t\tthis._startTime = null;// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function () {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function () {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function ( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function ( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function ( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function () {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif ( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function () {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function () {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function ( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function ( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function ( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function () {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function () {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function () {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function () {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function ( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function ( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function ( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar loopCount = this._loopCount;\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( deltaTime === 0 ) {\n\n\t\t\t\tif ( loopCount === - 1 ) { return time; }\n\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t\t}\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\n\t\t\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: AnimationMixer,\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) { return null; }\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function ( timeInSeconds ) {\n\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t\t}\n\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) { return; }\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function () {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\t\tthis.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector$6 = new Vector2();\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$6.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$6.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _startP = new Vector3();\n\tvar _startEnd = new Vector3();\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function ( point, clampToLine ) {\n\n\t\t\t_startP.subVectors( point, this.start );\n\t\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = _startEnd.dot( _startEnd );\n\t\t\tvar startEnd_startP = _startEnd.dot( _startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = _Math.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$5 = new Vector3();\n\tvar _v2$3 = new Vector3();\n\tvar _normalMatrix$1 = new Matrix3();\n\tvar _keys = [ 'a', 'b', 'c' ];\n\n\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length * 3;\n\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.setAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n\tVertexNormalsHelper.prototype.update = function () {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\t_normalMatrix$1.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar vertex = vertices[ face[ _keys[ j ] ] ];\n\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\t_v1$5.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t_v2$3.copy( normal ).applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );\n\n\t\t\t\t\tposition.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\tvar idx = 0;\n\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\t_v1$5.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\t_v2$3.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\t_v2$3.applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );\n\n\t\t\t\tposition.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector$7 = new Vector3();\n\n\tfunction SpotLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$7.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$7 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$8 = new Vector3();\n\tvar _boneMatrix = new Matrix4();\n\tvar _matrixWorldInv = new Matrix4();\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar bones = this.bones;\n\n\t\tvar geometry = this.geometry;\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$8.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$8.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t *  This helper must be added as a child of the light\n\t */\n\n\tfunction RectAreaLightHelper( light, color ) {\n\n\t\tthis.type = 'RectAreaLightHelper';\n\n\t\tthis.light = light;\n\n\t\tthis.color = color; // optional hardwired color for the helper\n\n\t\tvar positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tLine.call( this, geometry, material );\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );\n\n\t\tthis.update();\n\n\t}\n\n\tRectAreaLightHelper.prototype = Object.create( Line.prototype );\n\tRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n\n\tRectAreaLightHelper.prototype.update = function () {\n\n\t\tthis.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\t\t\tthis.children[ 0 ].material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\t\t// prevent hue shift\n\t\t\tvar c = this.material.color;\n\t\t\tvar max = Math.max( c.r, c.g, c.b );\n\t\t\tif ( max > 1 ) { c.multiplyScalar( 1 / max ); }\n\n\t\t\tthis.children[ 0 ].material.color.copy( this.material.color );\n\n\t\t}\n\n\t};\n\n\tRectAreaLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$9 = new Vector3();\n\tvar _color1 = new Color();\n\tvar _color2 = new Color();\n\n\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\tif ( this.color === undefined ) { this.material.vertexColors = VertexColors; }\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$9.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction LightProbeHelper( lightProbe, size ) {\n\n\t\tthis.lightProbe = lightProbe;\n\n\t\tthis.size = size;\n\n\t\tvar defines = {};\n\t\tdefines[ 'GAMMA_OUTPUT' ] = \"\";\n\n\t\t// material\n\t\tvar material = new ShaderMaterial( {\n\n\t\t\tdefines: defines,\n\n\t\t\tuniforms: {\n\n\t\t\t\tsh: { value: this.lightProbe.sh.coefficients }, // by reference\n\n\t\t\t\tintensity: { value: this.lightProbe.intensity }\n\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t'varying vec3 vNormal;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvNormal = normalize( normalMatrix * normal );',\n\n\t\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n\t\t\t\t'}' ].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t'#define RECIPROCAL_PI 0.318309886',\n\n\t\t\t\t'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',\n\n\t\t\t\t'\t// matrix is assumed to be orthogonal',\n\n\t\t\t\t'\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',\n\n\t\t\t\t'}',\n\n\t\t\t\t'vec3 linearToOutput( in vec3 a ) {',\n\n\t\t\t\t'\t#ifdef GAMMA_OUTPUT',\n\n\t\t\t\t'\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\treturn a;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'}',\n\n\t\t\t\t'// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',\n\t\t\t\t'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',\n\n\t\t\t\t'\t// normal is assumed to have unit length',\n\n\t\t\t\t'\tfloat x = normal.x, y = normal.y, z = normal.z;',\n\n\t\t\t\t'\t// band 0',\n\t\t\t\t'\tvec3 result = shCoefficients[ 0 ] * 0.886227;',\n\n\t\t\t\t'\t// band 1',\n\t\t\t\t'\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',\n\t\t\t\t'\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',\n\t\t\t\t'\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',\n\n\t\t\t\t'\t// band 2',\n\t\t\t\t'\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',\n\t\t\t\t'\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',\n\t\t\t\t'\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',\n\t\t\t\t'\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',\n\t\t\t\t'\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',\n\n\t\t\t\t'\treturn result;',\n\n\t\t\t\t'}',\n\n\t\t\t\t'uniform vec3 sh[ 9 ]; // sh coefficients',\n\n\t\t\t\t'uniform float intensity; // light probe intensity',\n\n\t\t\t\t'varying vec3 vNormal;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvec3 normal = normalize( vNormal );',\n\n\t\t\t\t'\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',\n\n\t\t\t\t'\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );',\n\n\t\t\t\t'\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',\n\n\t\t\t\t'\toutgoingLight = linearToOutput( outgoingLight );',\n\n\t\t\t\t'\tgl_FragColor = vec4( outgoingLight, 1.0 );',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' )\n\n\t\t} );\n\n\t\tvar geometry = new SphereBufferGeometry( 1, 32, 16 );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.onBeforeRender();\n\n\t}\n\n\tLightProbeHelper.prototype = Object.create( Mesh.prototype );\n\tLightProbeHelper.prototype.constructor = LightProbeHelper;\n\n\tLightProbeHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tLightProbeHelper.prototype.onBeforeRender = function () {\n\n\t\tthis.position.copy( this.lightProbe.position );\n\n\t\tthis.scale.set( 1, 1, 1 ).multiplyScalar( this.size );\n\n\t\tthis.material.uniforms.intensity.value = this.lightProbe.intensity;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\n\n\t\tconstructor: GridHelper,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\t\tthis.geometry.copy( source.geometry );\n\t\t\tthis.material.copy( source.material );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar x, z;\n\t\tvar v, i, j, r, color;\n\n\t\t// create the radials\n\n\t\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * radius;\n\t\t\tz = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tr = radius - ( radius / circles * i );\n\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tfunction PositionalAudioHelper( audio, range, divisionsInnerAngle, divisionsOuterAngle ) {\n\n\t\tthis.audio = audio;\n\t\tthis.range = range || 1;\n\t\tthis.divisionsInnerAngle = divisionsInnerAngle || 16;\n\t\tthis.divisionsOuterAngle = divisionsOuterAngle || 2;\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;\n\t\tvar positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tvar materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );\n\t\tvar materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );\n\n\t\tLine.call( this, geometry, [ materialOuterAngle, materialInnerAngle ] );\n\n\t\tthis.update();\n\n\t}\n\n\tPositionalAudioHelper.prototype = Object.create( Line.prototype );\n\tPositionalAudioHelper.prototype.constructor = PositionalAudioHelper;\n\n\tPositionalAudioHelper.prototype.update = function () {\n\n\t\tvar audio = this.audio;\n\t\tvar range = this.range;\n\t\tvar divisionsInnerAngle = this.divisionsInnerAngle;\n\t\tvar divisionsOuterAngle = this.divisionsOuterAngle;\n\n\t\tvar coneInnerAngle = _Math.degToRad( audio.panner.coneInnerAngle );\n\t\tvar coneOuterAngle = _Math.degToRad( audio.panner.coneOuterAngle );\n\n\t\tvar halfConeInnerAngle = coneInnerAngle / 2;\n\t\tvar halfConeOuterAngle = coneOuterAngle / 2;\n\n\t\tvar start = 0;\n\t\tvar count = 0;\n\t\tvar i, stride;\n\n\t\tvar geometry = this.geometry;\n\t\tvar positionAttribute = geometry.attributes.position;\n\n\t\tgeometry.clearGroups();\n\n\t\t//\n\n\t\tfunction generateSegment( from, to, divisions, materialIndex ) {\n\n\t\t\tvar step = ( to - from ) / divisions;\n\n\t\t\tpositionAttribute.setXYZ( start, 0, 0, 0 );\n\t\t\tcount ++;\n\n\t\t\tfor ( i = from; i < to; i += step ) {\n\n\t\t\t\tstride = start + count;\n\n\t\t\t\tpositionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );\n\t\t\t\tpositionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );\n\t\t\t\tpositionAttribute.setXYZ( stride + 2, 0, 0, 0 );\n\n\t\t\t\tcount += 3;\n\n\t\t\t}\n\n\t\t\tgeometry.addGroup( start, count, materialIndex );\n\n\t\t\tstart += count;\n\t\t\tcount = 0;\n\n\t\t}\n\n\t\t//\n\n\t\tgenerateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );\n\t\tgenerateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );\n\t\tgenerateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );\n\n\t\t//\n\n\t\tpositionAttribute.needsUpdate = true;\n\n\t\tif ( coneInnerAngle === coneOuterAngle ) { this.material[ 0 ].visible = false; }\n\n\t};\n\n\tPositionalAudioHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material[ 0 ].dispose();\n\t\tthis.material[ 1 ].dispose();\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$6 = new Vector3();\n\tvar _v2$4 = new Vector3();\n\tvar _normalMatrix$2 = new Matrix3();\n\n\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\n\t\t// FaceNormalsHelper only supports THREE.Geometry\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.setAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\t\tthis.update();\n\n\t}\n\n\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n\tFaceNormalsHelper.prototype.update = function () {\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\t_normalMatrix$2.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\tvar position = this.geometry.attributes.position;\n\n\t\t//\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tvar vertices = objGeometry.vertices;\n\n\t\tvar faces = objGeometry.faces;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar normal = face.normal;\n\n\t\t\t_v1$6.copy( vertices[ face.a ] )\n\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t.divideScalar( 3 )\n\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\t_v2$4.copy( normal ).applyMatrix3( _normalMatrix$2 ).normalize().multiplyScalar( this.size ).add( _v1$6 );\n\n\t\t\tposition.setXYZ( idx, _v1$6.x, _v1$6.y, _v1$6.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t\tposition.setXYZ( idx, _v2$4.x, _v2$4.y, _v2$4.z );\n\n\t\t\tidx = idx + 1;\n\n\t\t}\n\n\t\tposition.needsUpdate = true;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$7 = new Vector3();\n\tvar _v2$5 = new Vector3();\n\tvar _v3$1 = new Vector3();\n\n\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) { size = 1; }\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\t_v1$7.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2$5.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3$1.subVectors( _v2$5, _v1$7 );\n\n\t\tthis.lightPlane.lookAt( _v2$5 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2$5 );\n\t\tthis.targetLine.scale.z = _v3$1.length();\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tvar _vector$a = new Vector3();\n\tvar _camera = new Camera();\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar pointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t};\n\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t\t_vector$a.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], _vector$a.x, _vector$a.y, _vector$a.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tvar _box$3 = new Box3();\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = function ( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box$3.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box$3.isEmpty() ) { return; }\n\n\t\tvar min = _box$3.min;\n\t\tvar max = _box$3.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\n\t};\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.copy = function ( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3Helper( box, color ) {\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.box = box;\n\n\t\tcolor = color || 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\tBox3Helper.prototype.constructor = Box3Helper;\n\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar box = this.box;\n\n\t\tif ( box.isEmpty() ) { return; }\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\n\n\t}\n\n\tPlaneHelper.prototype = Object.create( Line.prototype );\n\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar _axis = new Vector3();\n\tvar _lineGeometry, _coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\n\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\n\t\tif ( length === undefined ) { length = 1; }\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = function ( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tvar radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t};\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t};\n\n\tArrowHelper.prototype.copy = function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t};\n\n\tArrowHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxesHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\tAxesHelper.prototype.constructor = AxesHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\n\tvar LinePieces = 1;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) { materials = []; }\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\treturn this.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tObject.assign( Loader.prototype, {\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t} );\n\n\tLoader.Handlers = {\n\n\t\tadd: function ( /* regex, loader */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t\t},\n\n\t\tget: function ( /* file */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t\t}\n\n\t};\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\t\treturn this.setResourcePath( value );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( _Math, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn _Math.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn _Math.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tarea: function () {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\t\treturn this.getArea();\n\n\t\t},\n\t\tbarycoordFromPoint: function ( point, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn this.getBarycoord( point, target );\n\n\t\t},\n\t\tmidpoint: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\t\treturn this.getMidpoint( target );\n\n\t\t},\n\t\tnormal: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn this.getNormal( target );\n\n\t\t},\n\t\tplane: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\t\treturn this.getPlane( target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle, {\n\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t\t},\n\t\tnormal: function ( a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Geometry.prototype, {\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeLineDistances: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t},\n\t\tgetWorldRotation: function () {\n\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tSkinnedMesh.prototype.initBones = function () {\n\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n\t};\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\treturn this.setAttribute( name, attribute );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t},\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\t\t\treturn this.deleteAttribute( name );\n\n\t\t}\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InterleavedBuffer.prototype, {\n\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( value );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\t\tgetArrays: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t\t},\n\n\t\taddShapeList: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t\t},\n\n\t\taddShape: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\toverdraw: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t},\n\n\t\tstencilMask: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\treturn this.stencilFuncMask;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\tthis.stencilFuncMask = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t},\n\t\tanimate: function ( callback ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\t\tthis.setAnimationLoop( callback );\n\n\t\t},\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t},\n\t\tsetFaceCulling: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t\t},\n\t\tallocTextureUnit: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n\t\t},\n\t\tsetTexture: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n\t\t},\n\t\tsetTexture2D: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n\t\t},\n\t\tsetTextureCube: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n\t\t},\n\t\tgetActiveMipMapLevel: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\t\t\treturn this.getActiveMipmapLevel();\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\t\treturn this.getContext();\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* cullFace */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTargetCube.prototype, {\n\n\t\tactiveCubeFace: {\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().' );\n\n\t\t\t}\n\t\t},\n\t\tactiveMipMapLevel: {\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebVRManager.prototype, {\n\n\t\tstanding: {\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tuserHeight: {\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .userHeight has been removed.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Audio.prototype, {\n\n\t\tload: {\n\t\t\tvalue: function ( file ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\t\t\tscope.setBuffer( buffer );\n\n\t\t\t\t} );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n\t}\n\n\t//\n\n\tfunction JSONLoader() {\n\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n\t}\n\n\t//\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tattach: function ( /* child, scene, parent */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction LensFlare() {\n\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\n\n\t}\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\t\trevision: REVISION,\n\t\t} } ) );\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeGeometry = BoxGeometry;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FaceNormalsHelper = FaceNormalsHelper;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GammaEncoding = GammaEncoding;\n\texports.Geometry = Geometry;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.LightProbeHelper = LightProbeHelper;\n\texports.LightShadow = LightShadow;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = _Math;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PositionalAudioHelper = PositionalAudioHelper;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RectAreaLightHelper = RectAreaLightHelper;\n\texports.RedFormat = RedFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VertexNormalsHelper = VertexNormalsHelper;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n    return exports;\n});\n\ndefine('skylark-threejs/main',[\r\n\t\"skylark-langx/skylark\",\r\n    \"./three\"\r\n], function(skylark,threejs) {\r\n    return skylark.attach(\"intg.threejs\",threejs);\r\n});\r\n\ndefine('skylark-threejs', ['skylark-threejs/main'], function (main) { return main; });\n\n"]}