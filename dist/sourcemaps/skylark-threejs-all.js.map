{"version":3,"sources":["skylark-threejs-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","exports","undefined","Number","EPSILON","Math","pow","isInteger","value","isFinite","floor","sign","x","Function","prototype","Object","defineProperty","get","this","toString","match","assign","target","TypeError","output","index","arguments","source","nextKey","hasOwnProperty","call","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","ACESFilmicToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","EventDispatcher","addEventListener","type","listener","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","slice","l","_lut","_canvas","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","uuid","toUpperCase","clamp","min","max","euclideanModulo","n","m","mapLinear","a1","a2","b1","b2","lerp","y","t","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","console","warn","Vector2","Matrix3","elements","error","defineProperties","width","height","isVector2","setScalar","scalar","setX","setY","setComponent","Error","getComponent","clone","constructor","copy","v","add","w","addVectors","addScalar","s","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","f","g","h","getInverse","matrix","throwOnDegenerate","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","r","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","scale","rotate","theta","translate","ImageUtils","getDataURL","image","canvas","HTMLCanvasElement","src","document","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","z","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","Quaternion","_x","_y","_z","_w","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","Array","isArray","dispose","transformUv","uv","isVector4","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","isWebGLRenderTarget","setSize","isWebGLMultisampleRenderTarget","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","_onChangeCallback","isQuaternion","quaternion","setFromEuler","euler","update","isEuler","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","inverse","conjugate","p","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","_vector","Vector3","_quaternion","isVector3","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","_v1","_m1","Matrix4","_zero","_one","isMatrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","lookAt","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","position","x2","y2","z2","wx","wy","wz","decompose","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","_matrix","_quaternion$1","Euler","_order","DefaultOrder","Layers","mask","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","enableAll","toggle","disable","disableAll","test","layers","_object3DId","_v1$1","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","parent","children","DefaultUp","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Scene","background","environment","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","CustomEvent","detail","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","vector","worldToLocal","updateWorldMatrix","isCamera","isLight","object","remove","getObjectById","id","getObjectByProperty","getObjectByName","child","getWorldPosition","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","force","updateParents","updateChildren","geometries","materials","shapes","serialize","library","element","JSON","stringify","isInstancedMesh","count","instanceMatrix","isMesh","isLine","isPoints","geometry","parameters","shape","material","uuids","extractFromCache","cache","values","key","data","recursive","parse","isScene","_points","_vector$1","_box","Box3","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","Infinity","satForAxes","axes","v0","extents","j","p0","p1","p2","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","boundingBox","computeBoundingBox","union","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","distanceToPoint","clampedPoint","getBoundingSphere","intersect","_box$1","Sphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_vector1","_vector2","_normalMatrix","Plane","isPlane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","Color","setRGB","hue2rgb","SRGBToLinear","LinearToSRGB","Face3","color","materialIndex","vertexNormals","isColor","vertexColors","setHex","setStyle","hex","setHSL","style","handleAlpha","string","parseFloat","exec","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","NAMES","materialId","Material","blending","side","flatShading","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","_vector$3","BufferAttribute","itemSize","normalized","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","DirectGeometry","vertices","normals","colors","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXYZ","setXY","setXYZW","onUpload","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","lineDistancesNeedUpdate","lineDistance","fromDirectGeometry","morphAttributesPosition","morphAttribute","isNaN","jl","computeFaceNormals","computeVertexNormals","vA","vB","vC","pA","pB","pC","cb","ab","indices","normalizeNormals","merge","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","keys","attributeData","hasMorphAttributes","attributeArray","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","intersection","morphTargetDictionary","ml","String","intersects","groupMaterial","faceIndex","fvA","fvB","fvC","isMultiMaterial","fl","faceMaterial","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","vertex","fromBufferGeometry","scope","addFace","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","uvsCopy","k","kl","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","uvs1","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","srcVertexNormal","destVertexNormal","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","__proto__","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Camera","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","uniform","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLCubeRenderTarget","renderer","scene","currentRenderTarget","getRenderTarget","setRenderTarget","render","clear","stencil","dummy","DataTexture","isWebGLCubeRenderTarget","fromEquirectangularTexture","shader","tEquirect","join","isDataTexture","_sphere$1","_vector$5","Frustum","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","UniformsLib","common","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","WebGLAnimation","isAnimating","animationLoop","onAnimationFrame","time","frame","requestAnimationFrame","stop","setAnimationLoop","setContext","WebGLAttributes","gl","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","buffer","delete","bufferType","createBuffer","bindBuffer","bufferData","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","absNumericalSort","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","transparency","isCubeTexture","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","unit","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","info","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","getShaderSource","lines","addLineNumbers","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","logarithmicDepthBuffer","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","isRawShaderMaterial","shaderName","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","toneMapping","toneMappingName","getToneMappingFunction","outputEncoding","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","cachedUniforms","cachedAttributes","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","detachShader","deleteShader","getUniforms","getAttributes","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","programs","floatVertexTextures","maxVertexUniforms","vertexTextures","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","nClipPlanes","nClipIntersection","isMeshStandardMaterial","isSkinnedMesh","bones","skeleton","nVertexUniforms","nVertexMatrices","allocateBones","getMaxPrecision","shaderobject","getShaderObject","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","init","unshift","finish","customOpaqueSort","customTransparentSort","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","light","halfWidth","halfHeight","shadowCache","state","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","pointShadow","vector3","matrix42","setup","viewMatrix","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_renderer","_objects","maxTextureSize","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","1","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","result","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","depthMaterial","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setClear","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLTextures","_gl","utils","maxTextures","maxCubemapSize","maxSamples","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","textureProperties","__maxMipLevel","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","onTextureDispose","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","memory","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","activeTexture","bindTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","compressedTexImage2D","texImage2D","mipmapImage","setTextureCubeDynamic","wrappingToGL","filterToGL","textureType","texParameteri","extension","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","createTexture","textureNeedsPowerOfTwo","isDepthTexture","texImage3D","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","createFramebuffer","updateRenderTargetMipmap","webglTexture","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","cameras","Group","WebXRManager","session","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","targetRay","grip","onSessionEnd","forEach","setFramebuffer","animation","isPresenting","onRequestReferenceSpace","updateInputSources","inputSources","removed","added","getController","getControllerGrip","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","getSession","setSession","getContextAttributes","layerInit","antialias","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","then","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","renderState","transform","inputPose","gripPose","getPose","targetRaySpace","gripSpace","WebGLRenderer","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","toneMappingExposure","toneMappingWhitePoint","objects","programCache","renderLists","renderStates","morphtargets","bufferRenderer","indexedBufferRenderer","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clipping","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","getTargetPixelRatio","contextAttributes","xrCompatible","onContextLost","onContextRestore","getShaderPrecisionFormat","rangeMin","rangeMax","message","initGLContext","getExtension","maxAnisotropy","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","maxVertexTextures","maxAttributes","maxVaryings","maxFragmentUniforms","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","clearColor","reset","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","factor","webglSlot","initAttributes","enableAttribute","disableUnusedAttributes","disableVertexAttribArray","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","boundTexture","unbindTexture","apply","calls","triangles","autoReset","mode","instanceCount","wireframeAttributes","onGeometryDispose","buffergeometry","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","geometryAttributes","getWireframeAttribute","currentAttribute","updateMap","influencesList","objectInfluences","influences","morphInfluencesSum","morphBaseInfluence","lists","onSceneDispose","list","has","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","xr","environmentBlendMode","setMode","drawArrays","renderInstances","primcount","methodName","drawElements","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","pixelRatio","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","programAttributes","positionArray","vertexAttribPointer","normalArray","uvArray","colorArray","tempScene","setProgram","updateBuffers","rangeFactor","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","maxInstancedCount","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","initMaterial","renderObjects","isArrayCamera","camera2","isImmediateRenderObject","renderObjectImmediate","materialProperties","lightsStateVersion","programCacheKey","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","isMeshLambertMaterial","isMeshToonMaterial","isMeshPhongMaterial","isShadowMaterial","materialNeedsLights","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","isFog","density","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","refreshUniformsToon","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","uvScaleMap","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","ltc_1","LTC_1","ltc_2","LTC_2","uv2ScaleMap","window","projectObject","isGroup","isLOD","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","InterleavedBuffer","isInterleavedBuffer","_geometry","_vector$6","InterleavedBufferAttribute","interleavedBuffer","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","float32Array","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","_currentLevel","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getCurrentLevel","getObjectForDistance","bind","calculateInverses","normalizeSkinWeights","skinWeight","_offsetMatrix","_identityMatrix","Skeleton","boneInverses","Bone","bone","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","positionAttribute","threshold","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","o","ol","edge1","edge2","edge","edges","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","triangulate","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","ahole","hl","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","concat","scalePt2","pt","vec","bs","vert","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","layer","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","shift","resetDuration","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","parseKeyframeTrack","json","trackType","typeName","toLowerCase","getTrackTypeForValueTypeName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","createInterpolant","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","global","DefaultLoadingManager","Loader","manager","crossOrigin","resourcePath","load","setCrossOrigin","setPath","setResourcePath","loading","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t3","cached","setTimeout","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","header","open","callbacks","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setResponseType","setWithCredentials","setMimeType","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","onImageLoad","onImageError","substr","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","weight","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","MaterialLoader","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","scaleW","scaleH","isDirectionalLightShadow","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","typedArray","TYPED_ARRAYS","bufferAttributeConstr","bufferAttribute","drawcalls","offsets","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","bufferGeometryLoader","details","geometryShapes","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","ha","familyName","FontLoader","setOptions","res","blob","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","SphericalHarmonics3","LightProbe","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isSphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","Clock","autoStart","oldTime","elapsedTime","running","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","performance","Date","now","getElapsedTime","getDelta","newTime","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_pausedAt","filters","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","Raycaster","PointCloud","ascSort","intersectObject","Spherical","Cylindrical","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$7","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","_vector$8","SpotLightHelper","cone","coneLength","coneWidth","_vector$9","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","isSkeletonHelper","_vector$a","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","_v1$5","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$b","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$3","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","setColor","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","MAX_SAMPLES","ENCODINGS","weights","poleAxis","shaderMaterial","_flatCamera","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","ref","_lodPlanes","_sizeLods","_sigmas","lod","sizeLod","sigma","texelSize","positionSize","uvSize","faceIndexSize","coordinates","fill","_createPlanes","_pingPongRenderTarget","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","_compileMaterial","_allocateTargets","equirectangular","cubeUVRenderTarget","_createRenderTarget","_cleanup","outputTarget","tmpScene","_setViewport","_applyPMREM","_blur","lodIn","lodOut","_halfBlur","targetIn","targetOut","sigmaRadians","blurScene","blurUniforms","pixels","radiansPerPixel","sigmaPixels","exp","outputSize","_getEquirectShader","_getCubemapShader","fromScene","cubeCamera","upSign","forwardSign","maxComponent","fExp","log2","col","_sceneToCubeUV","fromEquirectangular","fromCubemap","cubemap","_textureToCubeUV","compileCubemapShader","compileEquirectangularShader","ClosedSplineCurve3","SplineCurve3","Spline","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","applyMatrix","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","renderReverseSided","renderSingleSided","audioLoader","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CubeGeometry","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FaceColors","FlatShading","Float32Attribute","Float64Attribute","FrontFaceDirectionCCW","FrontFaceDirectionCW","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NoColors","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","threejs"],"mappings":"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","file":"../skylark-threejs-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-threejs/three',[], function () { \n\n\t'use strict';\n\n\tvar exports = {};\n\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t}\n\n\tvar REVISION = '115';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar ACESFilmicToneMapping = 5;\n\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGB_ETC2_Format = 37492;\n\tvar RGBA_ETC2_EAC_Format = 37496;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar RGBA_BPTC_Format = 36492;\n\tvar SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tvar SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tvar SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tvar SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tvar SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tvar SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tvar SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tvar SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tvar SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tvar SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tvar SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tvar SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tvar SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tvar SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return false; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author thezwap\n\t */\n\n\tvar _lut = [];\n\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t}\n\n\tvar MathUtils = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\treturn uuid.toUpperCase();\n\n\t\t},\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tsetQuaternionFromProperEuler: function ( q, a, b, c, order ) {\n\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c2 = cos( b / 2 );\n\t\t\tvar s2 = sin( b / 2 );\n\n\t\t\tvar c13 = cos( ( a + c ) / 2 );\n\t\t\tvar s13 = sin( ( a + c ) / 2 );\n\n\t\t\tvar c1_3 = cos( ( a - c ) / 2 );\n\t\t\tvar s1_3 = sin( ( a - c ) / 2 );\n\n\t\t\tvar c3_1 = cos( ( c - a ) / 2 );\n\t\t\tvar s3_1 = sin( ( c - a ) / 2 );\n\n\t\t\tif ( order === 'XYX' ) {\n\n\t\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\n\t\t\t} else if ( order === 'YZY' ) {\n\n\t\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\n\t\t\t} else if ( order === 'ZXZ' ) {\n\n\t\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\n\t\t\t} else if ( order === 'XZX' ) {\n\n\t\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\n\t\t\t} else if ( order === 'YXY' ) {\n\n\t\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\n\t\t\t} else if ( order === 'ZYZ' ) {\n\n\t\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tcross: function ( v ) {\n\n\t\t\treturn this.x * v.y - this.y * v.x;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( throwOnDegenerate !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\t\tvar c = Math.cos( rotation );\n\t\t\tvar s = Math.sin( rotation );\n\n\t\t\tthis.set(\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t\t0, 0, 1\n\t\t\t);\n\n\t\t},\n\n\t\tscale: function ( sx, sy ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotate: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta );\n\t\t\tvar s = Math.sin( theta );\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\t\tte[ 0 ] = c * a11 + s * a21;\n\t\t\tte[ 3 ] = c * a12 + s * a22;\n\t\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( tx, ty ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\n\t\tgetDataURL: function ( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t} else if ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\n\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tvar output = {\n\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY,\n\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// process single image\n\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t\treturn uv;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.defineProperties( Vector4.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.z = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.w = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tthis.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.texture.image = {};\n\t\tthis.texture.image.width = width;\n\t\tthis.texture.image.height = height;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: WebGLRenderTarget,\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author Matt DesLauriers / @mattdesl\n\t */\n\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.samples = 4;\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultisampleRenderTarget,\n\n\t\tisWebGLMultisampleRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.samples = source.samples;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tisQuaternion: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tangleTo: function ( q ) {\n\n\t\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t\t},\n\n\t\trotateTowards: function ( q, step ) {\n\n\t\t\tvar angle = this.angleTo( q );\n\n\t\t\tif ( angle === 0 ) { return this; }\n\n\t\t\tvar t = Math.min( 1, step / angle );\n\n\t\t\tthis.slerp( q, t );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tinverse: function () {\n\n\t\t\t// quaternion is assumed to have unit length\n\n\t\t\treturn this.conjugate();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) { return this; }\n\t\t\tif ( t === 1 ) { return this.copy( qb ); }\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\t\tthis.normalize();\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index ) {\n\n\t\t\tthis._x = attribute.getX( index );\n\t\t\tthis._y = attribute.getY( index );\n\t\t\tthis._z = attribute.getZ( index );\n\t\t\tthis._w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector = new Vector3();\n\tvar _quaternion = new Quaternion();\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t\t},\n\n\t\tapplyAxisAngle: function ( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\treturn this.applyMatrix3( m ).normalize();\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t\t},\n\n\t\tunproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\treturn this.crossVectors( this, v );\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( v ) {\n\n\t\t\tvar denominator = v.lengthSq();\n\n\t\t\tif ( denominator === 0 ) { return this.set( 0, 0, 0 ); }\n\n\t\t\tvar scalar = v.dot( this ) / denominator;\n\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function ( planeNormal ) {\n\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( _vector );\n\n\t\t},\n\n\t\treflect: function ( normal ) {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t},\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\t\tif ( denominator === 0 ) { return Math.PI / 2; }\n\n\t\t\tvar theta = this.dot( v ) / denominator;\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t\t},\n\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\t\tthis.y = Math.cos( phi ) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t\t},\n\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\t\tthis.x = radius * Math.sin( theta );\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tsetFromMatrix3Column: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar _v1 = new Vector3();\n\tvar _m1 = new Matrix4();\n\tvar _zero = new Vector3( 0, 0, 0 );\n\tvar _one = new Vector3( 1, 1, 1 );\n\tvar _x = new Vector3();\n\tvar _y = new Vector3();\n\tvar _z = new Vector3();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function ( m ) {\n\n\t\t\t// this method does not support reflection matrices\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// bottom row\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// last column\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\treturn this.compose( _zero, q, _one );\n\n\t\t},\n\n\t\tlookAt: function ( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors( eye, target );\n\n\t\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t_z.z = 1;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t\t// up and z are parallel\n\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t_z.x += 0.0001;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_z.z += 0.0001;\n\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\t\t\t\t_x.crossVectors( up, _z );\n\n\t\t\t}\n\n\t\t\t_x.normalize();\n\t\t\t_y.crossVectors( _z, _x );\n\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( x, y, z ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\tte[ 12 ] = x.x;\n\t\t\t\tte[ 13 ] = x.y;\n\t\t\t\tte[ 14 ] = x.z;\n\n\t\t\t} else {\n\n\t\t\t\tte[ 12 ] = x;\n\t\t\t\tte[ 13 ] = y;\n\t\t\t\tte[ 14 ] = z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\tif ( throwOnDegenerate !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.\" );\n\n\t\t\t}\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s, c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts, c, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = position.x;\n\t\t\tte[ 13 ] = position.y;\n\t\t\tte[ 14 ] = position.z;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) { sx = - sx; }\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\t\t\t_m1.copy( this );\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t_m1.elements[ 0 ] *= invSX;\n\t\t\t_m1.elements[ 1 ] *= invSX;\n\t\t\t_m1.elements[ 2 ] *= invSX;\n\n\t\t\t_m1.elements[ 4 ] *= invSY;\n\t\t\t_m1.elements[ 5 ] *= invSY;\n\t\t\t_m1.elements[ 6 ] *= invSY;\n\n\t\t\t_m1.elements[ 8 ] *= invSZ;\n\t\t\t_m1.elements[ 9 ] *= invSZ;\n\t\t\t_m1.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _matrix = new Matrix4();\n\tvar _quaternion$1 = new Quaternion();\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = MathUtils.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function ( q, order, update ) {\n\n\t\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t\t},\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function ( newOrder ) {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\t_quaternion$1.setFromEuler( this );\n\n\t\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\n\n\t\t},\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\tenableAll: function () {\n\n\t\t\tthis.mask = 0xffffffff | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\tdisableAll: function () {\n\n\t\t\tthis.mask = 0;\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\tvar _object3DId = 0;\n\n\tvar _v1$1 = new Vector3();\n\tvar _q1 = new Quaternion();\n\tvar _m1$1 = new Matrix4();\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\tvar _scale = new Vector3();\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3( 1, 0, 0 );\n\tvar _yAxis = new Vector3( 0, 1, 0 );\n\tvar _zAxis = new Vector3( 0, 0, 1 );\n\n\tvar _addedEvent = { type: 'added' };\n\tvar _removedEvent = { type: 'removed' };\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Object3D,\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tthis.matrix.premultiply( matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateOnWorldAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t\t},\n\n\t\ttranslateOnAxis: function ( axis, distance ) {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslateX: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t\t},\n\n\t\ttranslateY: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t\t},\n\n\t\ttranslateZ: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t\t},\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\n\n\t\t},\n\n\t\tlookAt: function ( x, y, z ) {\n\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t_target.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\t_target.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\n\n\t\t\t} else {\n\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\n\n\t\t\t}\n\n\t\t},\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push( object );\n\n\t\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tattach: function ( object ) {\n\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.getInverse( this.matrixWorld );\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t\t}\n\n\t\t\tobject.applyMatrix4( _m1$1 );\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) { return this; }\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\ttarget = new Quaternion();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldScale: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) { return; }\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t\t}\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tif ( updateChildren === true ) {\n\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\n\t\t\tif ( this.visible === false ) { object.visible = false; }\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\n\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\n\n\t\t\t// object specific properties\n\n\t\t\tif ( this.isInstancedMesh ) {\n\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\n\t\t\t\tif ( shapes.length > 0 ) { output.shapes = shapes; }\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) { recursive = true; }\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tisScene: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\n\t\t\tif ( source.environment !== null ) { this.environment = source.environment.clone(); }\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\n\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\n\t\t\tif ( this.environment !== null ) { data.object.environment = this.environment.toJSON( meta ); }\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tvar _points = [\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3()\n\t];\n\n\tvar _vector$1 = new Vector3();\n\n\tvar _box = new Box3();\n\n\t// triangle centered vertices\n\n\tvar _v0 = new Vector3();\n\tvar _v1$2 = new Vector3();\n\tvar _v2 = new Vector3();\n\n\t// triangle edge vectors\n\n\tvar _f0 = new Vector3();\n\tvar _f1 = new Vector3();\n\tvar _f2 = new Vector3();\n\n\tvar _center = new Vector3();\n\tvar _extents = new Vector3();\n\tvar _triangleNormal = new Vector3();\n\tvar _testAxis = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function ( object ) {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box );\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, _vector$1 );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn _vector$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t\t},\n\n\t\tintersectsTriangle: function ( triangle ) {\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// compute box center and extents\n\t\t\tthis.getCenter( _center );\n\t\t\t_extents.subVectors( this.max, _center );\n\n\t\t\t// translate triangle to aabb origin\n\t\t\t_v0.subVectors( triangle.a, _center );\n\t\t\t_v1$2.subVectors( triangle.b, _center );\n\t\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t\t// compute edge vectors for triangle\n\t\t\t_f0.subVectors( _v1$2, _v0 );\n\t\t\t_f1.subVectors( _v2, _v1$2 );\n\t\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\tvar axes = [\n\t\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t\t];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// test 3 face normals from the aabb\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\t\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$1.copy( point ).clamp( this.min, this.max );\n\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tgetBoundingSphere: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t\t}\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$1 ).length() * 0.5;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif ( this.isEmpty() ) { return this; }\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\t\tthis.setFromPoints( _points );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\t\tvar i, j;\n\n\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t_testAxis.fromArray( axes, i );\n\t\t\t// project the aabb onto the seperating axis\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\tvar p0 = v0.dot( _testAxis );\n\t\t\tvar p1 = v1.dot( _testAxis );\n\t\t\tvar p2 = v2.dot( _testAxis );\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tvar _box$1 = new Box3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\t_box$1.setFromPoints( points ).getCenter( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\ttarget.sub( this.center ).normalize();\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\t\ttarget = new Box3();\n\n\t\t\t}\n\n\t\t\ttarget.set( this.center, this.center );\n\t\t\ttarget.expandByScalar( this.radius );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\tvar _vector$2 = new Vector3();\n\tvar _segCenter = new Vector3();\n\tvar _segDir = new Vector3();\n\tvar _diff = new Vector3();\n\n\tvar _edge1 = new Vector3();\n\tvar _edge2 = new Vector3();\n\tvar _normal = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function ( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, _vector$2 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( point, this.origin );\n\n\t\t\tvar directionDistance = target.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn target.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function ( point ) {\n\n\t\t\tvar directionDistance = _vector$2.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\t_vector$2.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn _vector$2.distanceToSquared( point );\n\n\t\t},\n\n\t\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( _segDir );\n\t\t\tvar b0 = _diff.dot( this.direction );\n\t\t\tvar b1 = - _diff.dot( _segDir );\n\t\t\tvar c = _diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t},\n\n\t\tintersectSphere: function ( sphere, target ) {\n\n\t\t\t_vector$2.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = _vector$2.dot( this.direction );\n\t\t\tvar d2 = _vector$2.dot( _vector$2 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) { return null; }\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, target );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, target ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, target );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, target ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) { return null; }\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn this.intersectBox( box, _vector$2 ) !== null;\n\n\t\t},\n\n\t\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t_edge1.subVectors( b, a );\n\t\t\t_edge2.subVectors( c, a );\n\t\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( _normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) { return null; }\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t_diff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * _diff.dot( _normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector1 = new Vector3();\n\tvar _vector2 = new Vector3();\n\tvar _normalMatrix = new Matrix3();\n\n\tfunction Plane( normal, constant ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tisPlane: true,\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\n\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t\t},\n\n\t\tintersectLine: function ( line, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar direction = line.delta( _vector1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t},\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant -= offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v0$1 = new Vector3();\n\tvar _v1$3 = new Vector3();\n\tvar _v2$1 = new Vector3();\n\tvar _v3 = new Vector3();\n\n\tvar _vab = new Vector3();\n\tvar _vac = new Vector3();\n\tvar _vbc = new Vector3();\n\tvar _vap = new Vector3();\n\tvar _vbp = new Vector3();\n\tvar _vcp = new Vector3();\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tgetNormal: function ( a, b, c, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( c, b );\n\t\t\t_v0$1.subVectors( a, b );\n\t\t\ttarget.cross( _v0$1 );\n\n\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t},\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tgetBarycoord: function ( point, a, b, c, target ) {\n\n\t\t\t_v0$1.subVectors( c, a );\n\t\t\t_v1$3.subVectors( b, a );\n\t\t\t_v2$1.subVectors( point, a );\n\n\t\t\tvar dot00 = _v0$1.dot( _v0$1 );\n\t\t\tvar dot01 = _v0$1.dot( _v1$3 );\n\t\t\tvar dot02 = _v0$1.dot( _v2$1 );\n\t\t\tvar dot11 = _v1$3.dot( _v1$3 );\n\t\t\tvar dot12 = _v1$3.dot( _v2$1 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point, a, b, c ) {\n\n\t\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\n\n\t\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t\t},\n\n\t\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\t\ttarget.set( 0, 0 );\n\t\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tisFrontFacing: function ( a, b, c, direction ) {\n\n\t\t\t_v0$1.subVectors( c, b );\n\t\t\t_v1$3.subVectors( a, b );\n\n\t\t\t// strictly front facing\n\t\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetArea: function () {\n\n\t\t\t_v0$1.subVectors( this.c, this.b );\n\t\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t\t},\n\n\t\tgetMidpoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tgetNormal: function ( target ) {\n\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetPlane: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\t\ttarget = new Plane();\n\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tgetBarycoord: function ( point, target ) {\n\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetUV: function ( point, uv1, uv2, uv3, target ) {\n\n\t\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tisFrontFacing: function ( direction ) {\n\n\t\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsTriangle( this );\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( p, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar a = this.a, b = this.b, c = this.c;\n\t\t\tvar v, w;\n\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors( b, a );\n\t\t\t_vac.subVectors( c, a );\n\t\t\t_vap.subVectors( p, a );\n\t\t\tvar d1 = _vab.dot( _vap );\n\t\t\tvar d2 = _vac.dot( _vap );\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy( a );\n\n\t\t\t}\n\n\t\t\t_vbp.subVectors( p, b );\n\t\t\tvar d3 = _vab.dot( _vbp );\n\t\t\tvar d4 = _vac.dot( _vbp );\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy( b );\n\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t\t}\n\n\t\t\t_vcp.subVectors( p, c );\n\t\t\tvar d5 = _vab.dot( _vcp );\n\t\t\tvar d6 = _vac.dot( _vcp );\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy( c );\n\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t\t_vbc.subVectors( c, b );\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t\t}\n\n\t\t\t// face region\n\t\t\tvar denom = 1 / ( va + vb + vc );\n\t\t\t// u = va * denom\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t\t},\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tvar _hslA = { h: 0, s: 0, l: 0 };\n\tvar _hslB = { h: 0, s: 0, l: 0 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tfunction hue2rgb( p, q, t ) {\n\n\t\tif ( t < 0 ) { t += 1; }\n\t\tif ( t > 1 ) { t -= 1; }\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\n\t\tif ( t < 1 / 2 ) { return q; }\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\n\t\treturn p;\n\n\t}\n\n\tfunction SRGBToLinear( c ) {\n\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t}\n\n\tfunction LinearToSRGB( c ) {\n\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function ( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo( h, 1 );\n\t\t\ts = MathUtils.clamp( s, 0, 1 );\n\t\t\tl = MathUtils.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) { return; }\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\treturn this.setColorName( style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetColorName: function ( style ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\n\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\n\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopySRGBToLinear: function ( color ) {\n\n\t\t\tthis.r = SRGBToLinear( color.r );\n\t\t\tthis.g = SRGBToLinear( color.g );\n\t\t\tthis.b = SRGBToLinear( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToSRGB: function ( color ) {\n\n\t\t\tthis.r = LinearToSRGB( color.r );\n\t\t\tthis.g = LinearToSRGB( color.g );\n\t\t\tthis.b = LinearToSRGB( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertSRGBToLinear: function () {\n\n\t\t\tthis.copySRGBToLinear( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToSRGB: function () {\n\n\t\t\tthis.copyLinearToSRGB( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( target ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t\t}\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tthis.getHSL( _hslA );\n\n\t\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpHSL: function ( color, alpha ) {\n\n\t\t\tthis.getHSL( _hslA );\n\t\t\tcolor.getHSL( _hslB );\n\n\t\t\tvar h = MathUtils.lerp( _hslA.h, _hslB.h, alpha );\n\t\t\tvar s = MathUtils.lerp( _hslA.s, _hslB.s, alpha );\n\t\t\tvar l = MathUtils.lerp( _hslA.l, _hslB.l, alpha );\n\n\t\t\tthis.setHSL( h, s, l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\tColor.NAMES = _colorKeywords;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function () {},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) { return; }\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\n\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\n\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\n\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\n\n\t\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\n\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\n\t\t\tif ( this.vertexColors ) { data.vertexColors = true; }\n\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\n\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\n\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\n\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\n\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\n\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\n\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\n\n\t\t\tif ( this.visible === false ) { data.visible = false; }\n\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\n\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\t{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\n\t\t\tthis.shadowSide = source.shadowSide;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.toneMapped = source.toneMapped;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _vector$3 = new Vector3();\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyNormalMatrix( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.transformDirection( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\n\t\t\t\t\t\tname: morphNormals[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) { return - Infinity; }\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tvar _m1$2 = new Matrix4();\n\tvar _obj = new Object3D();\n\tvar _offset = new Vector3();\n\tvar _box$2 = new Box3();\n\tvar _boxMorphTargets = new Box3();\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: BufferGeometry,\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tsetAttribute: function ( name, attribute ) {\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeleteAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif ( tangent !== undefined ) {\n\n\t\t\t\ttangent.transformDirection( matrix );\n\n\t\t\t\ttangent.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$2.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$2.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$2.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$2.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$2.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj.lookAt( vector );\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position ) {\n\n\t\t\t\t// first, find the center of the bounding sphere\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter( center );\n\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i );\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) {\n\n\t\t\t\toffset = 0;\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$4.x = normals.getX( i );\n\t\t\t\t_vector$4.y = normals.getY( i );\n\t\t\t\t_vector$4.z = normals.getZ( i );\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( array2, itemSize );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\t// attributes\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = morphAttribute[ i ];\n\n\t\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\tdata.data.attributes[ key ] = attributeData;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor ( var key in this.morphAttributes ) {\n\n\t\t\t\tvar attributeArray = this.morphAttributes[ key ];\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = attributeArray[ i ];\n\n\t\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\t\tarray.push( attributeData );\n\n\t\t\t\t}\n\n\t\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\t\thasMorphAttributes = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasMorphAttributes ) {\n\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar name, i, l;\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.setAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\t// user data\n\n\t\t\tthis.userData = source.userData;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tvar _inverseMatrix = new Matrix4();\n\tvar _ray = new Ray();\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\tvar _vB = new Vector3();\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\tvar _tempB = new Vector3();\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\tvar _morphB = new Vector3();\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\tvar _uvB = new Vector2();\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) { return; }\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere.copy( geometry.boundingSphere );\n\t\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\t\t\t\tvar i, j, il, jl;\n\t\t\t\tvar group, groupMaterial;\n\t\t\t\tvar start, end;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = j;\n\t\t\t\t\t\t\t\tb = j + 1;\n\t\t\t\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = i;\n\t\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\tvar intersect;\n\n\t\tif ( material.side === BackSide ) {\n\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t} else {\n\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t}\n\n\t\tif ( intersect === null ) { return null; }\n\n\t\t_intersectionPointWorld.copy( point );\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\n\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\n\t}\n\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t\t_vA.fromBufferAttribute( position, a );\n\t\t_vB.fromBufferAttribute( position, b );\n\t\t_vC.fromBufferAttribute( position, c );\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tvar influence = morphInfluences[ i ];\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) { continue; }\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\t\tif ( intersection ) {\n\n\t\t\tif ( uv ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tif ( uv2 ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tvar face = new Face3( a, b, c );\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\t\tintersection.face = face;\n\n\t\t}\n\n\t\treturn intersection;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\n\tvar _m1$3 = new Matrix4();\n\tvar _obj$1 = new Object3D();\n\tvar _offset$1 = new Vector3();\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Geometry,\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$3.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$3.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$3.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$3.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$3.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj$1.lookAt( vector );\n\n\t\t\t_obj$1.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj$1.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( attributes.position === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\n\n\t\t\tfor ( var i = 0; i < positions.length; i += 3 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color().fromArray( colors, i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexColors = ( colors === undefined ) ? [] : [\n\t\t\t\t\tscope.colors[ a ].clone(),\n\t\t\t\t\tscope.colors[ b ].clone(),\n\t\t\t\t\tscope.colors[ c ].clone() ];\n\n\t\t\t\tvar vertexNormals = ( normals === undefined ) ? [] : [\n\t\t\t\t\tnew Vector3().fromArray( normals, a * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, b * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, c * 3 )\n\t\t\t\t];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\n\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar i, il, j, jl, k, kl;\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tvar BoxGeometry = /*@__PURE__*/(function (Geometry) {\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'BoxGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tif ( Geometry ) BoxGeometry.__proto__ = Geometry;\n\t\tBoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t\treturn BoxGeometry;\n\t}(Geometry));\n\n\t// BoxBufferGeometry\n\n\tvar BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'BoxBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = this;\n\n\t\t\twidth = width || 1;\n\t\t\theight = height || 1;\n\t\t\tdepth = depth || 1;\n\n\t\t\t// segments\n\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0;\n\n\t\t\t// build each side of the box geometry\n\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\n\t\t\t\tvar ix, iy;\n\n\t\t\t\tvar vector = new Vector3();\n\n\t\t\t\t// generate vertices, normals and uvs\n\n\t\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// uvs\n\n\t\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t\t// counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// indices\n\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t\t// faces\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t\t// increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t\t// calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\n\t\t\t\t// update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t\treturn BoxBufferGeometry;\n\t}(BufferGeometry));\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tfunction cloneUniforms( src ) {\n\n\t\tvar dst = {};\n\n\t\tfor ( var u in src ) {\n\n\t\t\tdst[ u ] = {};\n\n\t\t\tfor ( var p in src[ u ] ) {\n\n\t\t\t\tvar property = src[ u ][ p ];\n\n\t\t\t\tif ( property && ( property.isColor ||\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\t\tproperty.isTexture ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn dst;\n\n\t}\n\n\tfunction mergeUniforms( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t}\n\n\t// Legacy\n\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = {};\n\n\t\tfor ( var name in this.uniforms ) {\n\n\t\t\tvar uniform = this.uniforms[ name ];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tvar extensions = {};\n\n\t\tfor ( var key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tObject3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar fov = 90, aspect = 1;\n\n\tfunction CubeCamera( near, far, cubeResolution, options ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\toptions = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLCubeRenderTarget( cubeResolution, options );\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\t\trenderer.render( scene, cameraPX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\t\trenderer.render( scene, cameraNX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\t\trenderer.render( scene, cameraPY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\t\trenderer.render( scene, cameraNY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\t\trenderer.render( scene, cameraPZ );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\t\trenderer.render( scene, cameraNZ );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction WebGLCubeRenderTarget( size, options, dummy ) {\n\n\t\tif ( Number.isInteger( options ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );\n\n\t\t\toptions = dummy;\n\n\t\t}\n\n\t\tWebGLRenderTarget.call( this, size, size, options );\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tWebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = texture.format;\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tvar scene = new Scene();\n\n\t\tvar shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\n\n\t\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\n\n\t\t\t\t\"\t#include <begin_vertex>\",\n\t\t\t\t\"\t#include <project_vertex>\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform sampler2D tEquirect;\",\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"#define RECIPROCAL_PI 0.31830988618\",\n\t\t\t\t\"#define RECIPROCAL_PI2 0.15915494\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\n\n\t\t\t\t\"\tvec2 sampleUV;\",\n\n\t\t\t\t\"\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\",\n\n\t\t\t\t\"\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\n\n\t\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\t\t};\n\n\t\tvar material = new ShaderMaterial( {\n\n\t\t\ttype: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\n\n\t\tscene.add( mesh );\n\n\t\tvar camera = new CubeCamera( 1, 10, 1 );\n\n\t\tcamera.renderTarget = this;\n\t\tcamera.renderTarget.texture.name = 'CubeCameraTexture';\n\n\t\tcamera.update( renderer, scene );\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _sphere$1 = new Sphere();\n\tvar _vector$5 = new Vector3();\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromProjectionMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSprite: function ( sprite ) {\n\n\t\t\t_sphere$1.center.set( 0, 0, 0 );\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\t\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t// corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tuv2Transform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 },\n\t\t\tmaxMipLevel: { value: 0 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tlightProbe: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {}\n\t\t\t} },\n\n\t\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {}\n\t\t\t} },\n\n\t\t\tspotLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {}\n\t\t\t} },\n\n\t\t\tpointLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\t\trotation: { value: 0.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAnimation() {\n\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tif ( isAnimating === false ) { return; }\n\n\t\t\tanimationLoop( time, frame );\n\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tstart: function () {\n\n\t\t\t\tif ( isAnimating === true ) { return; }\n\t\t\t\tif ( animationLoop === null ) { return; }\n\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t\t\tisAnimating = true;\n\n\t\t\t},\n\n\t\t\tstop: function () {\n\n\t\t\t\tisAnimating = false;\n\n\t\t\t},\n\n\t\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\t\tanimationLoop = callback;\n\n\t\t\t},\n\n\t\t\tsetContext: function ( value ) {\n\n\t\t\t\tcontext = value;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = 5126;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = 5126;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = 5122;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = 5125;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = 5124;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = 5120;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = 5121;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\treturn buffers.get( attribute );\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tbuffers.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar ix, iy;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_maxMipLevel 8.0\\n#define cubeUV_minMipLevel 4.0\\n#define cubeUV_maxTileSize 256.0\\n#define cubeUV_minTileSize 16.0\\nfloat getFace(vec3 direction) {\\n    vec3 absDirection = abs(direction);\\n    float face = -1.0;\\n    if (absDirection.x > absDirection.z) {\\n      if (absDirection.x > absDirection.y)\\n        face = direction.x > 0.0 ? 0.0 : 3.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    } else {\\n      if (absDirection.z > absDirection.y)\\n        face = direction.z > 0.0 ? 2.0 : 5.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    }\\n    return face;\\n}\\nvec2 getUV(vec3 direction, float face) {\\n    vec2 uv;\\n    if (face == 0.0) {\\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\\n    } else if (face == 1.0) {\\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\\n    } else if (face == 2.0) {\\n      uv = direction.xy / abs(direction.z);\\n    } else if (face == 3.0) {\\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\\n    } else if (face == 4.0) {\\n      uv = direction.xz / abs(direction.y);\\n    } else {\\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\\n    }\\n    return 0.5 * (uv + 1.0);\\n}\\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\\n  float face = getFace(direction);\\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\\n  mipInt = max(mipInt, cubeUV_minMipLevel);\\n  float faceSize = exp2(mipInt);\\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\\n  vec2 f = fract(uv);\\n  uv += 0.5 - f;\\n  if (face > 2.0) {\\n    uv.y += faceSize;\\n    face -= 3.0;\\n  }\\n  uv.x += face * faceSize;\\n  if(mipInt < cubeUV_maxMipLevel){\\n    uv.y += 2.0 * cubeUV_maxTileSize;\\n  }\\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\\n  uv *= texelSize;\\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x += texelSize;\\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.y += texelSize;\\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x -= texelSize;\\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  vec3 tm = mix(tl, tr, f.x);\\n  vec3 bm = mix(bl, br, f.x);\\n  return mix(tm, bm, f.y);\\n}\\n#define r0 1.0\\n#define v0 0.339\\n#define m0 -2.0\\n#define r1 0.8\\n#define v1 0.276\\n#define m1 -1.0\\n#define r4 0.4\\n#define v4 0.046\\n#define m4 2.0\\n#define r5 0.305\\n#define v5 0.016\\n#define m5 3.0\\n#define r6 0.21\\n#define v6 0.0038\\n#define m6 4.0\\nfloat roughnessToMip(float roughness) {\\n  float mip = 0.0;\\n  if (roughness >= r1) {\\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\\n  } else if (roughness >= r4) {\\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\\n  } else if (roughness >= r5) {\\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\\n  } else if (roughness >= r6) {\\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\\n  } else {\\n    mip = -2.0 * log2(1.16 * roughness);  }\\n  return mip;\\n}\\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\\n  float mipF = fract(mip);\\n  float mipInt = floor(mip);\\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\\n  if (mipF == 0.0) {\\n    return vec4(color0, 1.0);\\n  } else {\\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\\n    return vec4(mix(color0, color1, mipF), 1.0);\\n  }\\n}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\ttoon: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t\t},\n\n\t\tmatcap: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tmatcap: { value: null }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.sprite,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t\t},\n\n\t\tbackground: {\n\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\t\tt2D: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\n\t\t},\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t} ] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\tclearcoat: { value: 0 },\n\t\t\t\tclearcoatMap: { value: null },\n\t\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\t\tclearcoatNormalMap: { value: null },\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\n\t\t\t\ttransparency: { value: 0 },\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.background;\n\n\t\t\t// Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\t\tbackground = null;\n\n\t\t\t}\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundCubeMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = background.isWebGLCubeRenderTarget ? background.texture : background;\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = texture;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== texture.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = texture.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tbackground.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\t/* eslint-disable no-undef */\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( 34930 );\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\n\n\t\tvar maxAttributes = gl.getParameter( 34921 );\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\n\t\tvar maxVaryings = gl.getParameter( 36348 );\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\t\treturn {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\t\tmaxSamples: maxSamples\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, info ) {\n\n\t\tvar geometries = new WeakMap();\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tgeometries.delete( geometry );\n\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\twireframeAttributes.delete( buffergeometry );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries.set( geometry, buffergeometry );\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, 34963 );\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateWireframeAttribute( geometry ) {\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\t\tattribute.version = version;\n\n\t\t\tattributes.update( attribute, 34963 );\n\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\n\n\t\t\t//\n\n\t\t\twireframeAttributes.set( geometry, attribute );\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( currentAttribute ) {\n\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get( geometry );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLInfo( gl ) {\n\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update( count, mode, instanceCount ) {\n\n\t\t\tinstanceCount = instanceCount || 1;\n\n\t\t\trender.calls ++;\n\n\t\t\tswitch ( mode ) {\n\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\trender.frame ++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\t// Remove current morphAttributes\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\t\tif ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }\n\t\t\t\t\tif ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\t// Add morphAttributes\n\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence ) {\n\n\t\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\tif ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }\n\t\t\t\t\t\tif ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }\n\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\t\tvar updateMap = new WeakMap();\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tupdateMap = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction DataTexture2DArray( data, width, height, depth ) {\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\t/**\n\t * @author Artur Trzesiok\n\t */\n\n\tfunction DataTexture3D( data, width, height, depth ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tvar texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\n\t}\n\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * @author tschw\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\tvar mat2array = new Float32Array( 4 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\tfunction arraysEqual( a, b ) {\n\n\t\tif ( a.length !== b.length ) { return false; }\n\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction copyArray( a, b ) {\n\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\t\ta[ i ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( textures, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t{ r[ i ] = textures.allocateTextureUnit(); }\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValueV1f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValueV2f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV3f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\n\t\t\t}\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\t\tcache[ 0 ] = v.r;\n\t\t\t\tcache[ 1 ] = v.g;\n\t\t\t\tcache[ 2 ] = v.b;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV4f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\t\t\t\tcache[ 3 ] = v.w;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValueM2( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat2array.set( elements );\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM3( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat3array.set( elements );\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM4( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat4array.set( elements );\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT2DArray1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n\t}\n\n\tfunction setValueT3D1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValueV1i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\tfunction setValueV2i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV3i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV4i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// uint\n\n\tfunction setValueV1ui( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1ui( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\t\tcase 0x1405: return setValueV1ui; // UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\tfunction setValueV1fArray( gl, v ) {\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\tfunction setValueV1iArray( gl, v ) {\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV2iArray( gl, v ) {\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV3iArray( gl, v ) {\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV4iArray( gl, v ) {\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t}\n\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 2 );\n\n\t\tgl.uniform2fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV3fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 3 );\n\n\t\tgl.uniform3fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV4fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniform4fv( this.addr, data );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM3Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 9 );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM4Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 16 );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\t\tthis.cache = new Float32Array( data.length );\n\n\t\t}\n\n\t\tcopyArray( cache, data );\n\n\t};\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile ( true ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35718 );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) { r.push( u ); }\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getShaderErrors( gl, shader, type ) {\n\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\n\n\t\tif ( status && log === '' ) { return ''; }\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource( shader );\n\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n\t}\n\n\tfunction generateExtensions( parameters ) {\n\n\t\tvar chunks = [\n\t\t\t( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) { continue; }\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35721 );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n\t}\n\n\tfunction replaceClippingPlaneNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n\t}\n\n\t// Resolve Includes\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes( string ) {\n\n\t\treturn string.replace( includePattern, includeReplacer );\n\n\t}\n\n\tfunction includeReplacer( match, include ) {\n\n\t\tvar string = ShaderChunk[ include ];\n\n\t\tif ( string === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn resolveIncludes( string );\n\n\t}\n\n\t// Unroll Loops\n\n\tvar deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tvar unrollLoopPattern = /#pragma unroll_loop_start[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}[\\s]+?#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops( string ) {\n\n\t\treturn string\n\t\t\t.replace( unrollLoopPattern, loopReplacer )\n\t\t\t.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );\n\n\t}\n\n\tfunction deprecatedLoopReplacer( match, start, end, snippet ) {\n\n\t\tconsole.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );\n\t\treturn loopReplacer( match, start, end, snippet );\n\n\t}\n\n\tfunction loopReplacer( match, start, end, snippet ) {\n\n\t\tvar string = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tstring += snippet\n\t\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t\t}\n\n\t\treturn string;\n\n\t}\n\n\t//\n\n\tfunction generatePrecision( parameters ) {\n\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\n\n\t\tif ( parameters.precision === \"highp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"mediump\" ) {\n\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"lowp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\n\n\t\t}\n\n\t\treturn precisionstring;\n\n\t}\n\n\tfunction generateShadowMapTypeDefine( parameters ) {\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapTypeDefine( parameters ) {\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapModeDefine( parameters ) {\n\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapModeDefine;\n\n\t}\n\n\tfunction generateEnvMapBlendingDefine( parameters ) {\n\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\n\t}\n\n\tfunction WebGLProgram( renderer, cacheKey, parameters ) {\n\n\t\tvar gl = renderer.getContext();\n\n\t\tvar defines = parameters.defines;\n\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( parameters.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t\t' attribute mat4 instanceMatrix;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding || parameters.lightMapEncoding ) ?\n\t\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.lightMapEncoding ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = resolveIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\t\tfragmentShader = resolveIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\tif ( parameters.isWebGL2 && ! parameters.isRawShaderMaterial ) {\n\n\t\t\tvar isGLSL3ShaderMaterial = false;\n\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n\t\t\tif ( parameters.isShaderMaterial &&\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\n\n\t\t\t\tisGLSL3ShaderMaterial = true;\n\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\n\n\t\t\t}\n\n\t\t\t// GLSL 3.0 conversion\n\n\t\t\tprefixVertex = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define attribute in',\n\t\t\t\t'#define varying out',\n\t\t\t\t'#define texture2D texture'\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\t\tprefixFragment = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define varying in',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t\t'#define texture2D texture',\n\t\t\t\t'#define textureCube texture',\n\t\t\t\t'#define texture2DProj textureProj',\n\t\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\t// check for link errors\n\t\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tthis.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.detachShader( program, glVertexShader );\n\t\tgl.detachShader( program, glFragmentShader );\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t//\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount ++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\",\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\t\"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatMap\", \"clearcoatRoughnessMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\t\"sheen\"\n\t\t];\n\n\t\tfunction getShaderObject( material, shaderID ) {\n\n\t\t\tvar shaderobject;\n\n\t\t\tif ( shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ shaderID ];\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn shaderobject;\n\n\t\t}\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar shaderobject = getShaderObject( material, shaderID );\n\t\t\tmaterial.onBeforeCompile( shaderobject, renderer );\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tisWebGL2: isWebGL2,\n\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: shaderobject.name,\n\n\t\t\t\tuniforms: shaderobject.uniforms,\n\t\t\t\tvertexShader: shaderobject.vertexShader,\n\t\t\t\tfragmentShader: shaderobject.fragmentShader,\n\t\t\t\tdefines: material.defines,\n\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial,\n\t\t\t\tisShaderMaterial: material.isShaderMaterial,\n\n\t\t\t\tprecision: precision,\n\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\t\tmatcap: !! material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\t\tenvMap: !! envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !! material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !! material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tsheen: !! material.sheen,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.get( 'EXT_frag_depth' ) !== null,\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.get( 'WEBGL_draw_buffers' ) !== null,\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) !== null,\n\n\t\t\t\tonBeforeCompile: material.onBeforeCompile\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCacheKey = function ( parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( parameters.fragmentShader );\n\t\t\t\tarray.push( parameters.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in parameters.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( parameters.isRawShaderMaterial === undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t\t}\n\n\t\t\t\tarray.push( renderer.outputEncoding );\n\t\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t\t}\n\n\t\t\tarray.push( parameters.onBeforeCompile.toString() );\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( parameters, cacheKey ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar preexistingProgram = programs[ p ];\n\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function ( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get( object ) {\n\n\t\t\tvar map = properties.get( object );\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set( object, map );\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tproperties.delete( object );\n\n\t\t}\n\n\t\tfunction update( object, key, value ) {\n\n\t\t\tproperties.get( object )[ key ] = value;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tproperties = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\n\tfunction WebGLRenderList() {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tvar defaultProgram = { id: - 1 };\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\t\t\trenderItemsIndex ++;\n\n\t\t\treturn renderItem;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t}\n\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\n\n\t\t}\n\n\t\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( customOpaqueSort || painterSortStable ); }\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( customTransparentSort || reversePainterSortStable ); }\n\n\t\t}\n\n\t\tfunction finish() {\n\n\t\t\t// Clear references from inactive renderItems in the list\n\n\t\t\tfor ( var i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\t\tvar renderItem = renderItems[ i ];\n\n\t\t\t\tif ( renderItem.id === null ) { break; }\n\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\tlists.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar cameras = lists.get( scene );\n\t\t\tvar list;\n\t\t\tif ( cameras === undefined ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists.set( scene, new WeakMap() );\n\t\t\t\tlists.get( scene ).set( camera, list );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tlist = cameras.get( camera );\n\t\t\t\tif ( list === undefined ) {\n\n\t\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\t\tcameras.set( camera, list );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction ShadowUniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n\t}\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar shadowCache = ShadowUniformsCache();\n\n\t\tvar state = {\n\n\t\t\tversion: 0,\n\n\t\t\thash: {\n\t\t\t\tdirectionalLength: - 1,\n\t\t\t\tpointLength: - 1,\n\t\t\t\tspotLength: - 1,\n\t\t\t\trectAreaLength: - 1,\n\t\t\t\themiLength: - 1,\n\n\t\t\t\tnumDirectionalShadows: - 1,\n\t\t\t\tnumPointShadows: - 1,\n\t\t\t\tnumSpotShadows: - 1\n\t\t\t},\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\n\t\t};\n\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tvar hash = state.hash;\n\n\t\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\t\thash.pointLength !== pointLength ||\n\t\t\t\thash.spotLength !== spotLength ||\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\t\thash.hemiLength !== hemiLength ||\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\t\tstate.version = nextVersion ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLRenderState() {\n\n\t\tvar lights = new WebGLLights();\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t}\n\n\t\tfunction pushLight( light ) {\n\n\t\t\tlightsArray.push( light );\n\n\t\t}\n\n\t\tfunction pushShadow( shadowLight ) {\n\n\t\t\tshadowsArray.push( shadowLight );\n\n\t\t}\n\n\t\tfunction setupLights( camera ) {\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\n\t\t\tlights: lights\n\t\t};\n\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderStates() {\n\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\trenderStates.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar renderState;\n\n\t\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates.set( scene, new WeakMap() );\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\n\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn renderState;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\trenderStates = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum(),\n\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_viewportSize = new Vector2(),\n\n\t\t\t_viewport = new Vector4(),\n\n\t\t\t_depthMaterials = [],\n\t\t\t_distanceMaterials = [],\n\n\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: { value: null },\n\t\t\t\tresolution: { value: new Vector2() },\n\t\t\t\tradius: { value: 4.0 }\n\t\t\t},\n\n\t\t\tvertexShader: vsm_vert,\n\n\t\t\tfragmentShader: vsm_frag\n\n\t\t} );\n\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\n\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute(\n\t\t\t\"position\",\n\t\t\tnew BufferAttribute(\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) { return; }\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\n\n\t\t\tif ( lights.length === 0 ) { return; }\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.setBlending( NoBlending );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );\n\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\n\n\t\t\t\t\t_viewport.set(\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t\t);\n\n\t\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t\t}\n\n\t\t\t\t// do blur pass for VSM\n\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t\t};\n\n\t\tfunction VSMPass( shadow, camera ) {\n\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\n\n\t\t\t// vertical pass\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t\t// horizonal pass\n\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\n\n\t\t}\n\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _depthMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDepthMaterial( {\n\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_depthMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _distanceMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_distanceMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( light.isPointLight === true ) {\n\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( customMaterial === undefined ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry.isGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\t\t\tif ( material.skinning === true ) {\n\n\t\t\t\t\t\tuseSkinning = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif ( type === VSMShadowMap ) {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t\t} else {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar enabledCapabilities = {};\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( 35661 );\n\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter( 7938 );\n\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, 10241, 9728 );\n\t\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( 2929 );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( 2884 );\n\n\t\tsetBlending( NoBlending );\n\n\t\t//\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tvar equationToGL = {};\n\t\tequationToGL[ AddEquation ] = 32774;\n\t\tequationToGL[ SubtractEquation ] = 32778;\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\tequationToGL[ MinEquation ] = 32775;\n\t\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t\t} else {\n\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar factorToGL = {};\n\t\tfactorToGL[ ZeroFactor ] = 0;\n\t\tfactorToGL[ OneFactor ] = 1;\n\t\tfactorToGL[ SrcColorFactor ] = 768;\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\n\t\tfactorToGL[ DstColorFactor ] = 774;\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending === NoBlending ) {\n\n\t\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\t\tdisable( 3042 );\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\t\tenable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = true;\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// custom blending\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\n\t\t}\n\n\t\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( 2884 )\n\t\t\t\t: enable( 2884 );\n\n\t\t\tvar flipSided = ( material.side === BackSide );\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\n\n\t\t\tsetFlipSided( flipSided );\n\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t\t? setBlending( NoBlending )\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest( stencilWrite );\n\t\t\tif ( stencilWrite ) {\n\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t\t}\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( 2884 );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 2884 );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( 32823 );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 32823 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( 3089 );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 3089 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unbindTexture() {\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage3D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tenabledCapabilities = {};\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\t\tvar _canvas;\n\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\t\t} catch ( err ) {\n\n\t\t\t// Ignore any errors\n\n\t\t}\n\n\t\tfunction createCanvas( width, height ) {\n\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\t\treturn useOffscreenCanvas ?\n\t\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t}\n\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\t\tvar scale = 1;\n\n\t\t\t// handle case if texture exceeds max size\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t}\n\n\t\t\t// only perform resize if necessary\n\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t\t// only perform resize for certain image types\n\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\n\t\t\t\t\tvar width = floor( scale * image.width );\n\t\t\t\t\tvar height = floor( scale * image.height );\n\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\n\n\t\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\t\treturn canvas;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( isWebGL2 ) { return false; }\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t\t_gl.generateMipmap( target );\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t\t}\n\n\t\tfunction getInternalFormat( internalFormatName, glFormat, glType ) {\n\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\n\n\t\t\tif ( internalFormatName !== null ) {\n\n\t\t\t\tif ( _gl[ internalFormatName ] !== undefined ) { return _gl[ internalFormatName ]; }\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif ( glFormat === 6403 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6407 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6408 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\n\n\t\t\t}\n\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\t\treturn 9728;\n\n\t\t\t}\n\n\t\t\treturn 9729;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\t_videoTextures.delete( texture );\n\n\t\t\t}\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) { return; }\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) { _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer ); }\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\n\t\t\ttextureUnits = 0;\n\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture2DArray( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture3D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tif ( texture.image.length !== 6 ) { return; }\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\t\tvar mipmaps;\n\n\t\t\t\tif ( isCompressed ) {\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tvar wrappingToGL = {};\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\n\n\t\tvar filterToGL = {};\n\t\tfilterToGL[ NearestFilter ] = 9728;\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\n\t\tfilterToGL[ LinearFilter ] = 9729;\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\n\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\t\tif ( supportsMips ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction initTexture( textureProperties, texture ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tvar textureType = 3553;\n\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\n\n\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\t\tglInternalFormat = 35056;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// validation checks for WebGL 1\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\tvar glInternalFormat = 33189;\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\n\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\t// Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif ( isWebGL2 && renderTarget.texture.format === RGBFormat && ( renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType ) ) {\n\n\t\t\t\trenderTarget.texture.format = RGBAFormat;\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );\n\n\t\t\t}\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 34067, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 3553, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\n\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer ); // see #18905\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t\t}\n\n\t\tfunction updateVideoTexture( texture ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\t// Check the last frame we updated the VideoTexture\n\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t\t_videoTextures.set( texture, frame );\n\t\t\t\ttexture.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// backwards compatibility\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTexture2D = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( texture, slot );\n\n\t\t}\n\n\t\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTextureCube = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\tsetTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLCubeRenderTarget\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\n\t}\n\n\t/**\n\t * @author thespite / http://www.twitter.com/thespite\n\t */\n\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\n\n\t\t\tif ( p === ByteType ) { return 5120; }\n\t\t\tif ( p === ShortType ) { return 5122; }\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\n\t\t\tif ( p === IntType ) { return 5124; }\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\n\t\t\tif ( p === FloatType ) { return 5126; }\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\n\t\t\tif ( p === RGBFormat ) { return 6407; }\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\n\t\t\tif ( p === DepthFormat ) { return 6402; }\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\n\t\t\tif ( p === RedFormat ) { return 6403; }\n\n\t\t\t// WebGL2 formats.\n\n\t\t\tif ( p === RedIntegerFormat ) { return 36244; }\n\t\t\tif ( p === RGFormat ) { return 33319; }\n\t\t\tif ( p === RGIntegerFormat ) { return 33320; }\n\t\t\tif ( p === RGBIntegerFormat ) { return 36248; }\n\t\t\tif ( p === RGBAIntegerFormat ) { return 36249; }\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_ETC2_Format ) { return extension.COMPRESSED_RGB8_ETC2; }\n\t\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) { return extension.COMPRESSED_RGBA8_ETC2_EAC; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group,\n\n\t\tisGroup: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebXRManager( renderer, gl ) {\n\n\t\tvar scope = this;\n\n\t\tvar session = null;\n\n\t\tvar framebufferScaleFactor = 1.0;\n\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\n\t\tvar pose = null;\n\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map();\n\n\t\t//\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = {};\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\tif ( controller.targetRay === undefined ) {\n\n\t\t\t\tcontroller.targetRay = new Group();\n\t\t\t\tcontroller.targetRay.matrixAutoUpdate = false;\n\t\t\t\tcontroller.targetRay.visible = false;\n\n\t\t\t}\n\n\t\t\treturn controller.targetRay;\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = {};\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\tif ( controller.grip === undefined ) {\n\n\t\t\t\tcontroller.grip = new Group();\n\t\t\t\tcontroller.grip.matrixAutoUpdate = false;\n\t\t\t\tcontroller.grip.visible = false;\n\n\t\t\t}\n\n\t\t\treturn controller.grip;\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tvar controller = inputSourcesMap.get( event.inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: event.type } );\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.dispatchEvent( { type: event.type } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tcontroller.targetRay.visible = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tcontroller.grip.visible = false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tinputSourcesMap.clear();\n\n\t\t\t//\n\n\t\t\trenderer.setFramebuffer( null );\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tfunction onRequestReferenceSpace( value ) {\n\n\t\t\treferenceSpace = value;\n\n\t\t\tanimation.setContext( session );\n\t\t\tanimation.start();\n\n\t\t\tscope.isPresenting = true;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\t// Warn if function is used while presenting\n\t\t\tif ( scope.isPresenting == true ) {\n\n\t\t\t\tconsole.warn( \"WebXRManager: Cannot change framebuffer scale while presenting VR content\" );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn referenceSpace;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t\tvar attributes = gl.getContextAttributes();\n\n\t\t\t\tvar layerInit = {\n\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t};\n\n\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\tvar baseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\tsession.updateRenderState( { baseLayer: baseLayer } );\n\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t\t//\n\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction updateInputSources( event ) {\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\t// Assign inputSources to available controllers\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t\t}\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( var i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tvar inputSource = event.removed[ i ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( var i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tvar inputSource = event.added[ i ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * @author jsantell / https://www.jsantell.com/\n\t\t *\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tvar zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tvar xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + ( ipd - xOffset );\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t}\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update camera and its children\n\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tvar view = views[ i ];\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar inputSource = inputSources[ i ];\n\n\t\t\t\tvar inputPose = null;\n\t\t\t\tvar gripPose = null;\n\n\t\t\t\tif ( inputSource ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\t\tcontroller.targetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\t\t\tcontroller.targetRay.matrix.decompose( controller.targetRay.position, controller.targetRay.rotation, controller.targetRay.scale );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip && inputSource.gripSpace ) {\n\n\t\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\t\tcontroller.grip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\t\tcontroller.grip.matrix.decompose( controller.grip.position, controller.grip.rotation, controller.grip.scale );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.visible = inputPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.visible = gripPose !== null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time, frame ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null;\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.outputEncoding = LinearEncoding;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t\t_isContextLost = false,\n\n\t\t\t// internal state cache\n\n\t\t\t_framebuffer = null,\n\n\t\t\t_currentActiveCubeFace = 0,\n\t\t\t_currentActiveMipmapLevel = 0,\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\n\t\t\t// geometry and program caching\n\n\t\t\t_currentGeometryProgram = {\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false\n\t\t\t},\n\n\t\t\t_currentCamera = null,\n\t\t\t_currentArrayCamera = null,\n\n\t\t\t_currentViewport = new Vector4(),\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\n\t\t\t//\n\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\n\t\t\t_pixelRatio = 1,\n\t\t\t_opaqueSort = null,\n\t\t\t_transparentSort = null,\n\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\n\t\t\t// frustum\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t// clipping\n\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\n\t\t\t// camera matrices cache\n\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_vector3 = new Vector3();\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\n\t\t\t\txrCompatible: true\n\t\t\t};\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, attributes, geometries, objects;\n\t\tvar programCache, renderLists, renderStates;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tvar utils;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\t\textensions.get( 'OES_texture_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates();\n\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// xr\n\n\t\tvar xr = new WebXRManager( _this, _gl );\n\n\t\tthis.xr = xr;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.loseContext(); }\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.restoreContext(); }\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) { return; }\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tif ( xr.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\t\ttarget = new Vector4();\n\n\t\t\t}\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\tthis.setOpaqueSort = function ( method ) {\n\n\t\t\t_opaqueSort = method;\n\n\t\t};\n\n\t\tthis.setTransparentSort = function ( method ) {\n\n\t\t\t_transparentSort = method;\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tobjects.dispose();\n\n\t\t\txr.dispose();\n\n\t\t\tanimation.stop();\n\n\t\t\tthis.forceContextLoss();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.color );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( 4, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tvar tempScene = new Scene();\n\n\t\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\t\tif ( scene === null ) { scene = tempScene; } // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\n\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\n\t\t\t\t_currentGeometryProgram.program = program.id;\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( material.morphTargets || material.morphNormals ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tif ( position === undefined || position.count === 0 ) { return; }\n\n\t\t\t} else if ( index.count === 0 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( object, geometry, material, program );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( 34963, attribute.buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) { return; }\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( 0 );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( object, geometry, material, program ) {\n\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\n\n\t\t\t}\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\n\n\t\t\t\t\t\tvar attribute = attributes.get( object.instanceMatrix );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 0, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 1, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 2, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 3, 1 );\n\n\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tvar compiled = {};\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.material ) {\n\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( object.material[ i ].uuid in compiled === false ) {\n\n\t\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene, object );\n\t\t\t\t\t\t\t\tcompiled[ object.material[ i ].uuid ] = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( object.material.uuid in compiled === false ) {\n\n\t\t\t\t\t\tinitMaterial( object.material, scene, object );\n\t\t\t\t\t\tcompiled[ object.material.uuid ] = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( xr.isPresenting ) { return; }\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop( callback );\n\n\t\t\tanimation.start();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t\t}\n\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\t\tforceClear = arguments[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost ) { return; }\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t_currentGeometryProgram.program = null;\n\t\t\t_currentGeometryProgram.wireframe = false;\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\n\n\t\t\tif ( xr.enabled && xr.isPresenting ) {\n\n\t\t\t\tcamera = xr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) { _clipping.beginShadows(); }\n\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tif ( _clippingEnabled ) { _clipping.endShadows(); }\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset ) { this.info.reset(); }\n\n\t\t\tif ( renderTarget !== undefined ) {\n\n\t\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\t// _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t\t_currentGeometryProgram.program = null;\n\t\t\t\t_currentGeometryProgram.wireframe = false;\n\n\t\t\t\trenderObjectImmediate( object, program );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t}\n\n\t\tfunction initMaterial( material, scene, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tvar lightsStateVersion = lights.state.version;\n\n\t\t\tvar parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object );\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\t\tprogramChange = false;\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\t\tmaterialProperties.outputEncoding = _this.outputEncoding;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = scene.fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, scene, material, object ) {\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar materialProperties = properties.get( material );\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.environment !== environment ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.outputEncoding !== _this.outputEncoding ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material, environment );\n\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material, environment );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material, environment );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsMatcap( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\t\tm_uniforms.color.value.copy( material.color );\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t\t}\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material, environment ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tif ( envMap ) {\n\n\t\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( envMap ).__maxMipLevel;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t\t} else if ( material.lightMap ) {\n\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material, environment ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap || environment ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material, environment ) {\n\n\t\t\trefreshUniformsStandard( uniforms, material, environment );\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniforms.transparency.value = material.transparency;\n\n\t\t}\n\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\t\tif ( material.matcap ) {\n\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\t//\n\t\tthis.setFramebuffer = function ( value ) {\n\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\n\n\t\t\t_framebuffer = value;\n\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace || 0 ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar levelScale = Math.pow( 2, - level );\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\n\t\t\tvar glFormat = utils.convert( texture.format );\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tObject.assign( FogExp2.prototype, {\n\n\t\tisFogExp2: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new FogExp2( this.color, this.density );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tObject.assign( Fog.prototype, {\n\n\t\tisFog: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new Fog( this.color, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$6.x = this.getX( i );\n\t\t\t\t_vector$6.y = this.getY( i );\n\t\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *  rotation: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\tvar _worldScale = new Vector3();\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\tvar _rotatedPosition = new Vector2();\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\tvar _vB$1 = new Vector3();\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\tvar _uvB$1 = new Vector2();\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tvar float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tif ( raycaster.camera === null ) {\n\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\t\t\tif ( rotation !== 0 ) {\n\n\t\t\t\tcos = Math.cos( rotation );\n\t\t\t\tsin = Math.sin( rotation );\n\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t\t_uvA$1.set( 0, 0 );\n\t\t\t_uvB$1.set( 1, 0 );\n\t\t\t_uvC$1.set( 1, 1 );\n\n\t\t\t// check first triangle\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\n\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t\t_uvB$1.set( 0, 1 );\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\n\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\n\n\t\t\treturn this;\n\n\t\t}\n\n\n\t} );\n\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t\t// to check if rotation is not zero\n\t\tif ( sin !== undefined ) {\n\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t\t} else {\n\n\t\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t\t}\n\n\n\t\tvertexPosition.copy( mvPosition );\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y;\n\n\t\t// transform to world space\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n\t}\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v1$4 = new Vector3();\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tisLOD: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) { distance = 0; }\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCurrentLevel: function () {\n\n\t\t\treturn this._currentLevel;\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn levels[ i - 1 ].object;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 ) / camera.zoom;\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar vector = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\t\tvector.x = skinWeight.getX( i );\n\t\t\t\tvector.y = skinWeight.getY( i );\n\t\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tvar _offsetMatrix = new Matrix4();\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\tthis.frame = - 1;\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone, i, il;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t},\n\n\t\tgetBoneByName: function ( name ) {\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone.name === name ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tdispose: function ( ) {\n\n\t\t\tif ( this.boneTexture ) {\n\n\t\t\t\tthis.boneTexture.dispose();\n\n\t\t\t\tthis.boneTexture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh( geometry, material, count ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: InstancedMesh,\n\n\t\tisInstancedMesh: true,\n\n\t\tgetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\n\t\t\tif ( _mesh.material === undefined ) { return; }\n\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t\t// calculate the world matrix for each instance\n\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t\t// the mesh represents this single instance\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t\t// process the result of raycast\n\n\t\t\t\tif ( _instanceIntersects.length > 0 ) {\n\n\t\t\t\t\t_instanceIntersects[ 0 ].instanceId = instanceId;\n\t\t\t\t\t_instanceIntersects[ 0 ].object = this;\n\n\t\t\t\t\tintersects.push( _instanceIntersects[ 0 ] );\n\n\t\t\t\t\t_instanceIntersects.length = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start = new Vector3();\n\tvar _end = new Vector3();\n\tvar _inverseMatrix$1 = new Matrix4();\n\tvar _ray$1 = new Ray();\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial();\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tlineDistances[ 0 ] = 0;\n\n\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Line.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\n\t\t\t_sphere$2.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localThresholdSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localThresholdSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localThresholdSq ) { continue; }\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start$1 = new Vector3();\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t_start$1.copy( vertices[ i ] );\n\t\t\t\t\t_end$1.copy( vertices[ i + 1 ] );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t *\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\tvar _ray$2 = new Ray();\n\tvar _sphere$3 = new Sphere();\n\tvar _position$1 = new Vector3();\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\n\t\t\t_sphere$3.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t_position$1.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\n\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\t\tconstructor: VideoTexture,\n\n\t\tisVideoTexture: true,\n\n\t\tupdate: function () {\n\n\t\t\tvar video = this.image;\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar i, j, l, o, ol;\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\t\tvar vertex;\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar position, indices, groups;\n\t\t\tvar group, start, count;\n\t\t\tvar index1, index2;\n\n\t\t\tvertex = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\t\t\t\tindices = geometry.index;\n\t\t\t\tgroups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\t\tstart = group.start;\n\t\t\t\t\tcount = group.count;\n\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( key in edges ) {\n\n\t\t\t\t\te = edges[ key ];\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tvar i, j;\n\n\t\tif ( func.length < 3 ) {\n\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t\t}\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\tvar a = i * sliceCount + j;\n\t\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\n\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\n\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t, 0, - r, t,\n\t\t\t 0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t r, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar P = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\tTubeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, j;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * Port from https://github.com/mapbox/earcut (v2.1.5)\n\t */\n\n\tvar Earcut = {\n\n\t\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\t\tdim = dim || 2;\n\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\t\ttriangles = [];\n\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\n\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\n\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\t\tif ( data.length > 80 * dim ) {\n\n\t\t\t\tminX = maxX = data[ 0 ];\n\t\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\t\tx = data[ i ];\n\t\t\t\t\ty = data[ i + 1 ];\n\t\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\n\n\t\t\t\t}\n\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t\t}\n\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\t\treturn triangles;\n\n\t\t}\n\n\t};\n\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\tfunction linkedList( data, start, end, dim, clockwise ) {\n\n\t\tvar i, last;\n\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t} else {\n\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t}\n\n\t\tif ( last && equals( last, last.next ) ) {\n\n\t\t\tremoveNode( last );\n\t\t\tlast = last.next;\n\n\t\t}\n\n\t\treturn last;\n\n\t}\n\n\t// eliminate colinear or duplicate points\n\tfunction filterPoints( start, end ) {\n\n\t\tif ( ! start ) { return start; }\n\t\tif ( ! end ) { end = start; }\n\n\t\tvar p = start,\n\t\t\tagain;\n\t\tdo {\n\n\t\t\tagain = false;\n\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif ( p === p.next ) { break; }\n\t\t\t\tagain = true;\n\n\t\t\t} else {\n\n\t\t\t\tp = p.next;\n\n\t\t\t}\n\n\t\t} while ( again || p !== end );\n\n\t\treturn end;\n\n\t}\n\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\t\tif ( ! ear ) { return; }\n\n\t\t// interlink polygon nodes in z-order\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\n\n\t\tvar stop = ear,\n\t\t\tprev, next;\n\n\t\t// iterate through ears, slicing them one by one\n\t\twhile ( ear.prev !== ear.next ) {\n\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push( prev.i / dim );\n\t\t\t\ttriangles.push( ear.i / dim );\n\t\t\t\ttriangles.push( next.i / dim );\n\n\t\t\t\tremoveNode( ear );\n\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tear = next;\n\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\t\tif ( ear === stop ) {\n\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif ( ! pass ) {\n\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\tfunction isEar( ear ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// now make sure we don't have other points inside the potential ear\n\t\tvar p = ear.next.next;\n\n\t\twhile ( p !== ear.prev ) {\n\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// triangle bbox; min & max are calculated like this for speed\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t\t// z-order range for the current triangle bbox;\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t\tvar p = ear.prevZ,\n\t\t\tn = ear.nextZ;\n\n\t\t// look for points inside the triangle in both directions\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\t// look for remaining points in decreasing z-order\n\t\twhile ( p && p.z >= minZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t}\n\n\t\t// look for remaining points in increasing z-order\n\t\twhile ( n && n.z <= maxZ ) {\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// go through all polygon nodes and cure small local self-intersections\n\tfunction cureLocalIntersections( start, triangles, dim ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tvar a = p.prev,\n\t\t\t\tb = p.next.next;\n\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\t\ttriangles.push( a.i / dim );\n\t\t\t\ttriangles.push( p.i / dim );\n\t\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t\t// remove two nodes involved\n\t\t\t\tremoveNode( p );\n\t\t\t\tremoveNode( p.next );\n\n\t\t\t\tp = start = b;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn p;\n\n\t}\n\n\t// try splitting polygon into two and triangulate them independently\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\t\tdo {\n\n\t\t\tvar b = a.next.next;\n\t\t\twhile ( b !== a.prev ) {\n\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t\t// filter colinear points around the cuts\n\t\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t\t// run earcut on each half\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\n\t\t\t}\n\n\t\t\ta = a.next;\n\n\t\t} while ( a !== start );\n\n\t}\n\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\t\tvar queue = [],\n\t\t\ti, len, start, end, list;\n\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\t\tstart = holeIndices[ i ] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\t\tlist = linkedList( data, start, end, dim, false );\n\t\t\tif ( list === list.next ) { list.steiner = true; }\n\t\t\tqueue.push( getLeftmost( list ) );\n\n\t\t}\n\n\t\tqueue.sort( compareX );\n\n\t\t// process holes from left to right\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\t\teliminateHole( queue[ i ], outerNode );\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t\t}\n\n\t\treturn outerNode;\n\n\t}\n\n\tfunction compareX( a, b ) {\n\n\t\treturn a.x - b.x;\n\n\t}\n\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\tfunction eliminateHole( hole, outerNode ) {\n\n\t\touterNode = findHoleBridge( hole, outerNode );\n\t\tif ( outerNode ) {\n\n\t\t\tvar b = splitPolygon( outerNode, hole );\n\t\t\tfilterPoints( b, b.next );\n\n\t\t}\n\n\t}\n\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\tfunction findHoleBridge( hole, outerNode ) {\n\n\t\tvar p = outerNode,\n\t\t\thx = hole.x,\n\t\t\thy = hole.y,\n\t\t\tqx = - Infinity,\n\t\t\tm;\n\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\t\tdo {\n\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\t\tqx = x;\n\t\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== outerNode );\n\n\t\tif ( ! m ) { return null; }\n\n\t\tif ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint\n\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\tmx = m.x,\n\t\t\tmy = m.y,\n\t\t\ttanMin = Infinity,\n\t\t\ttan;\n\n\t\tp = m.next;\n\n\t\twhile ( p !== stop ) {\n\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn m;\n\n\t}\n\n\t// interlink polygon nodes in z-order\n\tfunction indexCurve( start, minX, minY, invSize ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\n\t\tsortLinked( p );\n\n\t}\n\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\tfunction sortLinked( list ) {\n\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\n\t\t\tinSize = 1;\n\n\t\tdo {\n\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile ( p ) {\n\n\t\t\t\tnumMerges ++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\t\tpSize ++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif ( ! q ) { break; }\n\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize --;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\n\t\t\t\t\telse { list = e; }\n\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\n\t\t} while ( numMerges > 1 );\n\n\t\treturn list;\n\n\t}\n\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\tfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * ( x - minX ) * invSize;\n\t\ty = 32767 * ( y - minY ) * invSize;\n\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\t\treturn x | ( y << 1 );\n\n\t}\n\n\t// find the leftmost node of a polygon ring\n\tfunction getLeftmost( start ) {\n\n\t\tvar p = start,\n\t\t\tleftmost = start;\n\t\tdo {\n\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn leftmost;\n\n\t}\n\n\t// check if a point lies within a convex triangle\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n\t}\n\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\tfunction isValidDiagonal( a, b ) {\n\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\t\t   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n\t}\n\n\t// signed area of a triangle\n\tfunction area( p, q, r ) {\n\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n\t}\n\n\t// check if two points are equal\n\tfunction equals( p1, p2 ) {\n\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\n\t}\n\n\t// check if two segments intersect\n\tfunction intersects( p1, q1, p2, q2 ) {\n\n\t\tif ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t\t   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n\t}\n\n\t// check if a polygon diagonal intersects any polygon segments\n\tfunction intersectsPolygon( a, b ) {\n\n\t\tvar p = a;\n\t\tdo {\n\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn false;\n\n\t}\n\n\t// check if a polygon diagonal is locally inside the polygon\n\tfunction locallyInside( a, b ) {\n\n\t\treturn area( a.prev, a, a.next ) < 0 ?\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n\t}\n\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\tfunction middleInside( a, b ) {\n\n\t\tvar p = a,\n\t\t\tinside = false,\n\t\t\tpx = ( a.x + b.x ) / 2,\n\t\t\tpy = ( a.y + b.y ) / 2;\n\t\tdo {\n\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\t\t{ inside = ! inside; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn inside;\n\n\t}\n\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\tfunction splitPolygon( a, b ) {\n\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\t\tan = a.next,\n\t\t\tbp = b.prev;\n\n\t\ta.next = b;\n\t\tb.prev = a;\n\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\n\t\treturn b2;\n\n\t}\n\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\tfunction insertNode( i, x, y, last ) {\n\n\t\tvar p = new Node( i, x, y );\n\n\t\tif ( ! last ) {\n\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\n\t\t} else {\n\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\n\t\t}\n\n\t\treturn p;\n\n\t}\n\n\tfunction removeNode( p ) {\n\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\n\n\t}\n\n\tfunction Node( i, x, y ) {\n\n\t\t// vertex index in coordinates array\n\t\tthis.i = i;\n\n\t\t// vertex coordinates\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\t// previous and next vertex nodes in a polygon ring\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\n\t\t// z-order curve value\n\t\tthis.z = null;\n\n\t\t// previous and next nodes in z-order\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null;\n\n\t\t// indicates whether this is a steiner point\n\t\tthis.steiner = false;\n\n\t}\n\n\tfunction signedArea( data, start, end, dim ) {\n\n\t\tvar sum = 0;\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\t\tj = i;\n\n\t\t}\n\n\t\treturn sum;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\t\tvar holeIndices = []; // array of hole indices\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\taddContour( vertices, contour );\n\n\t\t\t//\n\n\t\t\tvar holeIndex = contour.length;\n\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\t\tholeIndices.push( holeIndex );\n\t\t\t\tholeIndex += holes[ i ].length;\n\t\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t\t}\n\n\t\t\treturn faces;\n\n\t\t}\n\n\t};\n\n\tfunction removeDupEndPts( points ) {\n\n\t\tvar l = points.length;\n\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.pop();\n\n\t\t}\n\n\t}\n\n\tfunction addContour( vertices, contour ) {\n\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\tvertices.push( contour[ i ].x );\n\t\t\tvertices.push( contour[ i ].y );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  depth: <float>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\tExtrudeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tvar scope = this;\n\n\t\tvar verticesArray = [];\n\t\tvar uvArray = [];\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar placeholder = [];\n\n\t\t\t// options\n\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tvar extrudePath = options.extrudePath;\n\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar extrudePts, extrudeByPath = false;\n\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tvar ahole, h, hl; // looping of holes\n\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tvar b, bs, t, z,\n\t\t\t\tvert, vlen = vertices.length,\n\t\t\t\tface, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tvar contourMovements = [];\n\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tvar holesMovements = [],\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tvar s;\n\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\tvar layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tvar j, k;\n\t\t\t\ti = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = i - 1;\n\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tvar s = 0,\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t//\n\n\tvar WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tfunction toJSON( shapes, options, data ) {\n\n\t\t//\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\n\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\n\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tvar ix, iy;\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tvar uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 0.5;\n\t\touterRadius = outerRadius || 1;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\tShapeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar i, l, shapeHole;\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\tShapeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t//\n\n\tfunction toJSON$1( shapes, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\theight = height || 1;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\n\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, s;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  color: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.vertexTangents = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.vertexTangents = source.vertexTangents;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  clearcoat: <float>,\n\t *  clearcoatMap: new THREE.Texture( <Image> ),\n\t *  clearcoatRoughness: <float>,\n\t *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *  clearcoatNormalScale: <Vector2>,\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *  reflectivity: <float>,\n\t *\n\t *  sheen: <Color>,\n\t *\n\t *  transparency: <float>\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transparency = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif ( source.sheen ) {\n\n\t\t\tthis.sheen = ( this.sheen || new Color() ).copy( source.sheen );\n\n\t\t} else {\n\n\t\t\tthis.sheen = null;\n\n\t\t}\n\n\t\tthis.transparency = source.transparency;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.MultiplyOperation,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *  gradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( Material.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  matcap: new THREE.Texture( <Image> ),\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) { return; } // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) { return; } // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\n\n\t\t\tfps = fps || 30;\n\n\t\t\tvar clip = sourceClip.clone();\n\n\t\t\tclip.name = name;\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tvar track = clip.tracks[ i ];\n\t\t\t\tvar valueSize = track.getValueSize();\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\n\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\n\n\t\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( times.length === 0 ) { continue; }\n\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\t\ttracks.push( track );\n\n\t\t\t}\n\n\t\t\tclip.tracks = tracks;\n\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// shift all tracks such that clip begins at t=0\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t// DECLARE ALIAS AFTER assign prototype\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Static methods\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( KeyframeTrack.prototype, {\n\n\t\tconstructor: KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t\t++ from;\n\n\t\t\t}\n\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t\t-- to;\n\n\t\t\t}\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) {\n\n\t\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\t\tfrom = to - 1;\n\n\t\t\t\t}\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice( this.times ),\n\t\t\t\tvalues = AnimationUtils.arraySlice( this.values ),\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tkeep = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t} else {\n\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\t\treturn track;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrack.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n\tfunction parseKeyframeTrack( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks, duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tvar index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\n\t}\n\n\tObject.assign( Loader.prototype, {\n\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\n\n\t\tparse: function ( /* data */ ) {},\n\n\t\tsetCrossOrigin: function ( crossOrigin ) {\n\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( path ) {\n\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( resourcePath ) {\n\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FileLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\t\tdata = decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = this.response;\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\n\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\n\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( value ) {\n\n\t\t\tthis.requestHeader = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io/\n\t */\n\n\tfunction AnimationLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AnimationLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CompressedTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: DataTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\t\tif ( ! texData ) { return; }\n\n\t\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\tfunction onImageLoad() {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\tfunction onImageError( event ) {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tif ( onError ) { onError( event ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CubeTextureLoader,\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: TextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = image;\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( MathUtils.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\n\tEllipseCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension || 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t};\n\n\tSplineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = this.curves[ i ];\n\t\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = json.curves[ i ];\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tconstructor: Path,\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = this.holes[ i ];\n\t\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = json.holes[ i ];\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\n\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\n\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\t_projScreenMatrix: new Matrix4(),\n\n\t\t_lightPositionWorld: new Vector3(),\n\n\t\t_lookTarget: new Vector3(),\n\n\t\tgetViewportCount: function () {\n\n\t\t\treturn this._viewportCount;\n\n\t\t},\n\n\t\tgetFrustum: function () {\n\n\t\t\treturn this._frustum;\n\n\t\t},\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\tshadowCamera.lookAt( lookTarget );\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t\tshadowMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t},\n\n\t\tgetViewport: function ( viewportIndex ) {\n\n\t\t\treturn this._viewports[ viewportIndex ];\n\n\t\t},\n\n\t\tgetFrameExtents: function () {\n\n\t\t\treturn this._frameExtents;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction PointLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: PointLightShadow,\n\n\t\tisPointLightShadow: true,\n\n\t\tupdateMatrices: function ( light, viewportIndex ) {\n\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\n\n\t\t\tvar camera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tcamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.copy( camera.position );\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\t\tcamera.lookAt( lookTarget );\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\n\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\n\t\tthis.right = ( right !== undefined ) ? right : 1;\n\t\tthis.top = ( top !== undefined ) ? top : 1;\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow() {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow,\n\n\t\tisDirectionalLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t}\n\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.textures = {};\n\n\t}\n\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: MaterialLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\n\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\n\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\n\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\n\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\n\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\n\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\n\n\t\t\tif ( json.vertexTangents !== undefined ) { material.vertexTangents = json.vertexTangents; }\n\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\n\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\n\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\n\n\t\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Shader Material\n\n\t\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\n\n\t\t\tif ( json.extensions !== undefined ) {\n\n\t\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\n\n\t\t\tif ( json.alphaMap !== undefined ) { material.alphaMap = getTexture( json.alphaMap ); }\n\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\n\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\n\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\n\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\n\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\n\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\n\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\n\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\n\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\n\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\n\n\t\t\tif ( json.clearcoatMap !== undefined ) { material.clearcoatMap = getTexture( json.clearcoatMap ); }\n\t\t\tif ( json.clearcoatRoughnessMap !== undefined ) { material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap ); }\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tvar LoaderUtils = {\n\n\t\tdecodeText: function ( array ) {\n\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\t\treturn new TextDecoder().decode( array );\n\n\t\t\t}\n\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t\t} catch ( e ) { // see #16358\n\n\t\t\t\treturn s;\n\n\t\t\t}\n\n\t\t},\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar index = url.lastIndexOf( '/' );\n\n\t\t\tif ( index === - 1 ) { return './'; }\n\n\t\t\treturn url.substr( 0, index + 1 );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tdata.maxInstancedCount = this.maxInstancedCount;\n\n\t\t\tdata.isInstancedBufferGeometry = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\n\n\t\tif ( typeof ( normalized ) === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ()\t{\n\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\n\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\tdata.isInstancedBufferAttribute = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: BufferGeometryLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tvar bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif ( morphAttributes ) {\n\n\t\t\t\tfor ( var key in morphAttributes ) {\n\n\t\t\t\t\tvar attributeArray = morphAttributes[ key ];\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar attribute = attributeArray[ i ];\n\t\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\t\t\tvar bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\tif ( json.name ) { geometry.name = json.name; }\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ObjectLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar shapes = this.parseShape( json.shapes );\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseShape: function ( json ) {\n\n\t\t\tvar shapes = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t},\n\n\t\tparseGeometries: function ( json, shapes ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.closed\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.' );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar cache = {}; // MultiMaterial\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\n\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\n\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// load single image\n\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\n\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\n\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\n\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\n\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\n\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) { return undefined; }\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\n\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\t/**\n\t * @author thespite / http://clicktorelease.com/\n\t */\n\n\n\tfunction ImageBitmapLoader( manager ) {\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.options = undefined;\n\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageBitmapLoader,\n\n\t\tsetOptions: function setOptions( options ) {\n\n\t\t\tthis.options = options;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tfetch( url ).then( function ( res ) {\n\n\t\t\t\treturn res.blob();\n\n\t\t\t} ).then( function ( blob ) {\n\n\t\t\t\tif ( scope.options === undefined ) {\n\n\t\t\t\t\t// Workaround for FireFox. It causes an error if you pass options.\n\t\t\t\t\treturn createImageBitmap( blob );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t\t}\n\n\t\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\t\tCache.add( url, imageBitmap );\n\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} ).catch( function ( e ) {\n\n\t\t\t\tif ( onError ) { onError( e ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) { return []; }\n\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\t{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size ) {\n\n\t\t\tif ( size === undefined ) { size = 100; }\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths( text, size, this.data );\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction createPaths( text, size, data ) {\n\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // workaround for IE11, see #13988\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\tvar paths = [];\n\n\t\tvar offsetX = 0, offsetY = 0;\n\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\tvar char = chars[ i ];\n\n\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\n\t\t\t} else {\n\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn paths;\n\n\t}\n\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) {\n\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar path = new ShapePath();\n\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif ( glyph.o ) {\n\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FontLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( _context === undefined ) {\n\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn _context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\t_context = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AudioLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Primary reference:\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\n\t// 3-band SH defined by 9 coefficients\n\n\tfunction SphericalHarmonics3() {\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tObject.assign( SphericalHarmonics3.prototype, {\n\n\t\tisSphericalHarmonics3: true,\n\n\t\tset: function ( coefficients ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tzero: function () {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\tgetAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t\t// band 1\n\t\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\tgetIrradianceAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t\t// band 1\n\t\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tadd: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledSH: function ( sh, s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( sh, alpha ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcopy: function ( sh ) {\n\n\t\t\treturn this.set( sh.coefficients );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( SphericalHarmonics3, {\n\n\t\t// evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\tgetBasisAt: function ( normal, shBasis ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\t// band 0\n\t\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t\t// band 1\n\t\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t\t// band 2\n\t\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * A LightProbe is a source of indirect-diffuse light\n\t */\n\n\tfunction LightProbe( sh, intensity ) {\n\n\t\tLight.call( this, undefined, intensity );\n\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\n\n\t}\n\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: LightProbe,\n\n\t\tisLightProbe: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.sh.copy( source.sh );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( skyColor );\n\t\tvar color2 = new Color().set( groundColor );\n\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tvar c0 = Math.sqrt( Math.PI );\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: HemisphereLightProbe,\n\n\t\tisHemisphereLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying colors not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction AmbientLightProbe( color, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: AmbientLightProbe,\n\n\t\tisAmbientLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying color not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tvar _eyeRight = new Matrix4();\n\tvar _eyeLeft = new Matrix4();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar cache = this._cache;\n\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$2 = new Vector3();\n\tvar _quaternion$3 = new Quaternion();\n\tvar _scale$1 = new Vector3();\n\tvar _orientation = new Vector3();\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\n\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t// code path for Chrome (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._pausedAt = 0;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaElementSource: function ( mediaElement ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaStreamSource: function ( mediaStream ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) { this.play(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function ( delay ) {\n\n\t\t\tif ( delay === undefined ) { delay = 0; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.start( this._startedAt, this._pausedAt + this.offset, this.duration );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\tthis.setDetune( this.detune );\n\t\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis._pausedAt += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._pausedAt = 0;\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) { value = []; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDetune: function ( value ) {\n\n\t\t\tthis.detune = value;\n\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDetune: function () {\n\n\t\t\treturn this.detune;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopStart: function ( value ) {\n\n\t\t\tthis.loopStart = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopEnd: function ( value ) {\n\n\t\t\tthis.loopEnd = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$3 = new Vector3();\n\tvar _quaternion$4 = new Quaternion();\n\tvar _scale$2 = new Vector3();\n\tvar _orientation$1 = new Vector3();\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\n\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\n\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif ( panner.positionX ) {\n\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tbufferType = Array;\n\t\t\t\tmixFunction = this._select;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n\t// Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n\t// Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\n\tvar _trackRe = new RegExp( ''\n\t\t+ '^'\n\t\t+ _directoryRe\n\t\t+ _nodeRe\n\t\t+ _objectRe\n\t\t+ _propertyRe\n\t\t+ '$'\n\t);\n\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t\t},\n\n\t\tparseTrackName: function ( trackName ) {\n\n\t\t\tvar matches = _trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t},\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) { return result; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t// DECLARE ALIAS AFTER assign prototype\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *  - Add objects you would otherwise pass as 'root' to the\n\t *    constructor or the .clipAction method of AnimationMixer.\n\t *\n\t *  - Instead pass this object as 'root'.\n\t *\n\t *  - You can also add and remove objects later when the mixer\n\t *    is running.\n\t *\n\t * Note:\n\t *\n\t *    Objects of this class appear as one object to the mixer,\n\t *    so cache control of the individual objects must be done\n\t *    on the group.\n\t *\n\t * Limitation:\n\t *\n\t *  - The animated properties must be compatible among the\n\t *    all objects in the group.\n\t *\n\t *  - A single property can either be controlled through a\n\t *    target group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length,\n\t\t\t\tknownObject = undefined;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function () {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function () {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0; // restart clip\n\t\t\tthis._loopCount = - 1;// forget previous loops\n\t\t\tthis._startTime = null;// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function () {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function () {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function ( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function ( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function ( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function () {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif ( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function () {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function () {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function ( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function ( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function ( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function () {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function () {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function () {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function () {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function ( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function ( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function ( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar loopCount = this._loopCount;\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( deltaTime === 0 ) {\n\n\t\t\t\tif ( loopCount === - 1 ) { return time; }\n\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t\t}\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\n\t\t\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: AnimationMixer,\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) { return null; }\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function ( timeInSeconds ) {\n\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t\t}\n\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\t\tobject.raycast( raycaster, intersects );\n\n\t\t}\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function () {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\t\tthis.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector$7 = new Vector2();\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$7.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$7.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _startP = new Vector3();\n\tvar _startEnd = new Vector3();\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function ( point, clampToLine ) {\n\n\t\t\t_startP.subVectors( point, this.start );\n\t\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = _startEnd.dot( _startEnd );\n\t\t\tvar startEnd_startP = _startEnd.dot( _startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = MathUtils.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector$8 = new Vector3();\n\n\tfunction SpotLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$8.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$8 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$9 = new Vector3();\n\tvar _boneMatrix = new Matrix4();\n\tvar _matrixWorldInv = new Matrix4();\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.isSkeletonHelper = true;\n\n\tSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar bones = this.bones;\n\n\t\tvar geometry = this.geometry;\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$a = new Vector3();\n\tvar _color1 = new Color();\n\tvar _color2 = new Color();\n\n\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) { this.material.vertexColors = true; }\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$a.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\n\n\t\tconstructor: GridHelper,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\t\tthis.geometry.copy( source.geometry );\n\t\t\tthis.material.copy( source.material );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar x, z;\n\t\tvar v, i, j, r, color;\n\n\t\t// create the radials\n\n\t\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * radius;\n\t\t\tz = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tr = radius - ( radius / circles * i );\n\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$5 = new Vector3();\n\tvar _v2$3 = new Vector3();\n\tvar _v3$1 = new Vector3();\n\n\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) { size = 1; }\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\t_v1$5.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3$1.subVectors( _v2$3, _v1$5 );\n\n\t\tthis.lightPlane.lookAt( _v2$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2$3 );\n\t\tthis.targetLine.scale.z = _v3$1.length();\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tvar _vector$b = new Vector3();\n\tvar _camera = new Camera();\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar pointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t};\n\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t\t_vector$b.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], _vector$b.x, _vector$b.y, _vector$b.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tvar _box$3 = new Box3();\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = function ( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box$3.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box$3.isEmpty() ) { return; }\n\n\t\tvar min = _box$3.min;\n\t\tvar max = _box$3.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\n\t};\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.copy = function ( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3Helper( box, color ) {\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.box = box;\n\n\t\tcolor = color || 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\tBox3Helper.prototype.constructor = Box3Helper;\n\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar box = this.box;\n\n\t\tif ( box.isEmpty() ) { return; }\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tPlaneHelper.prototype = Object.create( Line.prototype );\n\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar _axis = new Vector3();\n\tvar _lineGeometry, _coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\n\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\n\t\tif ( length === undefined ) { length = 1; }\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = function ( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tvar radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t};\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t};\n\n\tArrowHelper.prototype.copy = function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t};\n\n\tArrowHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxesHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\tAxesHelper.prototype.constructor = AxesHelper;\n\n\t/**\n\t * @author Emmett Lalish / elalish\n\t *\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow( 2, LOD_MAX );\n\t// The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\tvar EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\t// The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\tvar MAX_SAMPLES = 20;\n\tvar ENCODINGS = {};\n\tENCODINGS[ LinearEncoding ] = 0;\n\tENCODINGS[ sRGBEncoding ] = 1;\n\tENCODINGS[ RGBEEncoding ] = 2;\n\tENCODINGS[ RGBM7Encoding ] = 3;\n\tENCODINGS[ RGBM16Encoding ] = 4;\n\tENCODINGS[ RGBDEncoding ] = 5;\n\tENCODINGS[ GammaEncoding ] = 6;\n\n\tvar _flatCamera = new OrthographicCamera();\n\tvar _blurMaterial = _getBlurShader( MAX_SAMPLES );\n\tvar _equirectShader = null;\n\tvar _cubemapShader = null;\n\n\tvar ref = _createPlanes();\n\tvar _lodPlanes = ref._lodPlanes;\n\tvar _sizeLods = ref._sizeLods;\n\tvar _sigmas = ref._sigmas;\n\tvar _pingPongRenderTarget = null;\n\tvar _renderer = null;\n\n\tvar _oldTarget = null;\n\n\t// Golden Ratio\n\tvar PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar INV_PHI = 1 / PHI;\n\t// Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\tvar _axisDirections = [\n\t\tnew Vector3( 1, 1, 1 ),\n\t\tnew Vector3( - 1, 1, 1 ),\n\t\tnew Vector3( 1, 1, - 1 ),\n\t\tnew Vector3( - 1, 1, - 1 ),\n\t\tnew Vector3( 0, PHI, INV_PHI ),\n\t\tnew Vector3( 0, PHI, - INV_PHI ),\n\t\tnew Vector3( INV_PHI, 0, PHI ),\n\t\tnew Vector3( - INV_PHI, 0, PHI ),\n\t\tnew Vector3( PHI, INV_PHI, 0 ),\n\t\tnew Vector3( - PHI, INV_PHI, 0 ) ];\n\n\tfunction PMREMGenerator( renderer ) {\n\n\t\t_renderer = renderer;\n\t\t_compileMaterial( _blurMaterial );\n\n\t}\n\n\tPMREMGenerator.prototype = {\n\n\t\tconstructor: PMREMGenerator,\n\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\t\tfromScene: function ( scene, sigma, near, far ) {\n\t\t\tif ( sigma === void 0 ) sigma = 0;\n\t\t\tif ( near === void 0 ) near = 0.1;\n\t\t\tif ( far === void 0 ) far = 100;\n\n\n\t\t\t_oldTarget = _renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = _allocateTargets();\n\t\t\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\t\t\tif ( sigma > 0 ) {\n\n\t\t\t\t_blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t\t}\n\t\t\t_applyPMREM( cubeUVRenderTarget );\n\t\t\t_cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromEquirectangular: function ( equirectangular ) {\n\n\t\t\tequirectangular.magFilter = NearestFilter;\n\t\t\tequirectangular.minFilter = NearestFilter;\n\t\t\tequirectangular.generateMipmaps = false;\n\n\t\t\treturn this.fromCubemap( equirectangular );\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromCubemap: function ( cubemap ) {\n\n\t\t\t_oldTarget = _renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = _allocateTargets( cubemap );\n\t\t\t_textureToCubeUV( cubemap, cubeUVRenderTarget );\n\t\t\t_applyPMREM( cubeUVRenderTarget );\n\t\t\t_cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileCubemapShader: function () {\n\n\t\t\tif ( _cubemapShader == null ) {\n\n\t\t\t\t_cubemapShader = _getCubemapShader();\n\t\t\t\t_compileMaterial( _cubemapShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileEquirectangularShader: function () {\n\n\t\t\tif ( _equirectShader == null ) {\n\n\t\t\t\t_equirectShader = _getEquirectShader();\n\t\t\t\t_compileMaterial( _equirectShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\tdispose: function () {\n\n\t\t\t_blurMaterial.dispose();\n\n\t\t\tif ( _cubemapShader != null ) { _cubemapShader.dispose(); }\n\t\t\tif ( _equirectShader != null ) { _equirectShader.dispose(); }\n\n\t\t\tfor ( var i = 0; i < _lodPlanes.length; i ++ ) {\n\n\t\t\t\t_lodPlanes[ i ].dispose();\n\n\t\t\t}\n\n\t\t},\n\n\t};\n\n\tfunction _createPlanes() {\n\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\n\t\tvar lod = LOD_MAX;\n\t\tfor ( var i = 0; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sizeLod = Math.pow( 2, lod );\n\t\t\t_sizeLods.push( sizeLod );\n\t\t\tvar sigma = 1.0 / sizeLod;\n\t\t\tif ( i > LOD_MAX - LOD_MIN ) {\n\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];\n\n\t\t\t} else if ( i == 0 ) {\n\n\t\t\t\tsigma = 0;\n\n\t\t\t}\n\t\t\t_sigmas.push( sigma );\n\n\t\t\tvar texelSize = 1.0 / ( sizeLod - 1 );\n\t\t\tvar min = - texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\n\t\t\tvar position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\t\tvar uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\t\tvar faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\t\tfor ( var face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\t\tvar x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : - 1;\n\t\t\t\tvar coordinates = [\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y + 1, 0\n\t\t\t\t];\n\t\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\t\tvar fill = [ face, face, face, face, face, face ];\n\t\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t\t}\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\t\t_lodPlanes.push( planes );\n\n\t\t\tif ( lod > LOD_MIN ) {\n\n\t\t\t\tlod --;\n\n\t\t\t}\n\n\t\t}\n\t\treturn { _lodPlanes: _lodPlanes, _sizeLods: _sizeLods, _sigmas: _sigmas };\n\n\t}\n\n\tfunction _allocateTargets( equirectangular ) {\n\n\t\tvar params = {\n\t\t\tmagFilter: NearestFilter,\n\t\t\tminFilter: NearestFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: equirectangular ? equirectangular.type : UnsignedByteType,\n\t\t\tformat: equirectangular ? equirectangular.format : RGBEFormat,\n\t\t\tencoding: equirectangular ? equirectangular.encoding : RGBEEncoding,\n\t\t\tdepthBuffer: false,\n\t\t\tstencilBuffer: false\n\t\t};\n\t\tvar cubeUVRenderTarget = _createRenderTarget( params );\n\t\tcubeUVRenderTarget.depthBuffer = equirectangular ? false : true;\n\t\t_pingPongRenderTarget = _createRenderTarget( params );\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _cleanup( outputTarget ) {\n\n\t\t_pingPongRenderTarget.dispose();\n\t\t_renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t// reset viewport and scissor\n\t\toutputTarget.setSize( outputTarget.width, outputTarget.height );\n\n\t}\n\n\tfunction _sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tvar fov = 90;\n\t\tvar aspect = 1;\n\t\tvar cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tvar upSign = [ 1, 1, 1, 1, - 1, 1 ];\n\t\tvar forwardSign = [ 1, 1, - 1, - 1, - 1, 1 ];\n\n\t\tvar outputEncoding = _renderer.outputEncoding;\n\t\tvar toneMapping = _renderer.toneMapping;\n\t\tvar toneMappingExposure = _renderer.toneMappingExposure;\n\t\tvar clearColor = _renderer.getClearColor();\n\t\tvar clearAlpha = _renderer.getClearAlpha();\n\n\t\t_renderer.toneMapping = LinearToneMapping;\n\t\t_renderer.toneMappingExposure = 1.0;\n\t\t_renderer.outputEncoding = LinearEncoding;\n\t\tscene.scale.z *= - 1;\n\n\t\tvar background = scene.background;\n\t\tif ( background && background.isColor ) {\n\n\t\t\tbackground.convertSRGBToLinear();\n\t\t\t// Convert linear to RGBE\n\t\t\tvar maxComponent = Math.max( background.r, background.g, background.b );\n\t\t\tvar fExp = Math.min( Math.max( Math.ceil( Math.log2( maxComponent ) ), - 128.0 ), 127.0 );\n\t\t\tbackground = background.multiplyScalar( Math.pow( 2.0, - fExp ) );\n\t\t\tvar alpha = ( fExp + 128.0 ) / 255.0;\n\t\t\t_renderer.setClearColor( background, alpha );\n\t\t\tscene.background = null;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar col = i % 3;\n\t\t\tif ( col == 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col == 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\t\t\t_setViewport( cubeUVRenderTarget,\n\t\t\t\tcol * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );\n\t\t\t_renderer.setRenderTarget( cubeUVRenderTarget );\n\t\t\t_renderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\t_renderer.toneMapping = toneMapping;\n\t\t_renderer.toneMappingExposure = toneMappingExposure;\n\t\t_renderer.outputEncoding = outputEncoding;\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\t\tscene.scale.z *= - 1;\n\n\t}\n\n\tfunction _textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tvar scene = new Scene();\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tif ( _cubemapShader == null ) {\n\n\t\t\t\t_cubemapShader = _getCubemapShader();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( _equirectShader == null ) {\n\n\t\t\t\t_equirectShader = _getEquirectShader();\n\n\t\t\t}\n\n\t\t}\n\t\tvar material = texture.isCubeTexture ? _cubemapShader : _equirectShader;\n\t\tscene.add( new Mesh( _lodPlanes[ 0 ], material ) );\n\t\tvar uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\t\tif ( ! texture.isCubeTexture ) {\n\n\t\t\tuniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );\n\n\t\t}\n\t\tuniforms[ 'inputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\t\tuniforms[ 'outputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );\n\t\t_renderer.setRenderTarget( cubeUVRenderTarget );\n\t\t_renderer.render( scene, _flatCamera );\n\n\t}\n\n\tfunction _compileMaterial( material ) {\n\n\t\tvar tmpScene = new Scene();\n\t\ttmpScene.add( new Mesh( _lodPlanes[ 0 ], material ) );\n\t\t_renderer.compile( tmpScene, _flatCamera );\n\n\t}\n\n\tfunction _createRenderTarget( params ) {\n\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _setViewport( target, x, y, width, height ) {\n\n\t\ttarget.viewport.set( x, y, width, height );\n\t\ttarget.scissor.set( x, y, width, height );\n\n\t}\n\n\tfunction _applyPMREM( cubeUVRenderTarget ) {\n\n\t\tvar autoClear = _renderer.autoClear;\n\t\t_renderer.autoClear = false;\n\n\t\tfor ( var i = 1; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sigma = Math.sqrt(\n\t\t\t\t_sigmas[ i ] * _sigmas[ i ] -\n\t\t\t_sigmas[ i - 1 ] * _sigmas[ i - 1 ] );\n\t\t\tvar poleAxis =\n\t\t\t_axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\t\t\t_blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\t_renderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\tfunction _blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\t_halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\t_pingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\t_halfBlur(\n\t\t\t_pingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\tfunction _halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tvar STANDARD_DEVIATIONS = 3;\n\n\t\tvar blurScene = new Scene();\n\t\tblurScene.add( new Mesh( _lodPlanes[ lodOut ], _blurMaterial ) );\n\t\tvar blurUniforms = _blurMaterial.uniforms;\n\n\t\tvar pixels = _sizeLods[ lodIn ] - 1;\n\t\tvar radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tvar samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( (\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES) );\n\n\t\t}\n\n\t\tvar weights = [];\n\t\tvar sum = 0;\n\n\t\tfor ( var i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tvar x = i / sigmaPixels;\n\t\t\tvar weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i == 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;\n\t\tblurUniforms[ 'inputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\t\tblurUniforms[ 'outputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\n\t\tvar outputSize = _sizeLods[ lodOut ];\n\t\tvar x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );\n\t\tvar y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) +\n\t\t2 * outputSize *\n\t\t\t( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\t_renderer.setRenderTarget( targetOut );\n\t\t_renderer.render( blurScene, _flatCamera );\n\n\t}\n\n\tfunction _getBlurShader( maxSamples ) {\n\n\t\tvar weights = new Float32Array( maxSamples );\n\t\tvar poleAxis = new Vector3( 0, 1, 0 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tdefines: { 'n': maxSamples },\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'samples': { value: 1 },\n\t\t\t\t'weights': { value: weights },\n\t\t\t\t'latitudinal': { value: false },\n\t\t\t\t'dTheta': { value: 0 },\n\t\t\t\t'mipInt': { value: 0 },\n\t\t\t\t'poleAxis': { value: poleAxis },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform int samples;\\nuniform float weights[n];\\nuniform bool latitudinal;\\nuniform float dTheta;\\nuniform float mipInt;\\nuniform vec3 poleAxis;\\n\\n\" + (_getEncodings()) + \"\\n\\n#define ENVMAP_TYPE_CUBE_UV\\n#include <cube_uv_reflection_fragment>\\n\\nvec3 getSample(float theta, vec3 axis) {\\n\\tfloat cosTheta = cos(theta);\\n\\t// Rodrigues' axis-angle rotation\\n\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t+ cross(axis, vOutputDirection) * sin(theta)\\n\\t\\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\\n\\treturn bilinearCubeUV(envMap, sampleDirection, mipInt);\\n}\\n\\nvoid main() {\\n\\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\\n\\tif (all(equal(axis, vec3(0.0))))\\n\\t\\taxis = vec3(vOutputDirection.z, 0.0, - vOutputDirection.x);\\n\\taxis = normalize(axis);\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb += weights[0] * getSample(0.0, axis);\\n\\tfor (int i = 1; i < n; i++) {\\n\\t\\tif (i >= samples)\\n\\t\\t\\tbreak;\\n\\t\\tfloat theta = dTheta * float(i);\\n\\t\\tgl_FragColor.rgb += weights[i] * getSample(-1.0 * theta, axis);\\n\\t\\tgl_FragColor.rgb += weights[i] * getSample(theta, axis);\\n\\t}\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'SphericalGaussianBlur';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getEquirectShader() {\n\n\t\tvar texelSize = new Vector2( 1, 1 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'texelSize': { value: texelSize },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform vec2 texelSize;\\n\\n\" + (_getEncodings()) + \"\\n\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tvec3 outputDirection = normalize(vOutputDirection);\\n\\tvec2 uv;\\n\\tuv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\\n\\tuv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\\n\\tvec2 f = fract(uv / texelSize - 0.5);\\n\\tuv -= f * texelSize;\\n\\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x += texelSize.x;\\n\\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.y += texelSize.y;\\n\\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x -= texelSize.x;\\n\\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tvec3 tm = mix(tl, tr, f.x);\\n\\tvec3 bm = mix(bl, br, f.x);\\n\\tgl_FragColor.rgb = mix(tm, bm, f.y);\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'EquirectangularToCubeUV';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCubemapShader() {\n\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform samplerCube envMap;\\n\\n\" + (_getEncodings()) + \"\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'CubemapToCubeUV';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCommonVertexShader() {\n\n\t\treturn \"\\nprecision mediump float;\\nprecision mediump int;\\nattribute vec3 position;\\nattribute vec2 uv;\\nattribute float faceIndex;\\nvarying vec3 vOutputDirection;\\nvec3 getDirection(vec2 uv, float face) {\\n\\tuv = 2.0 * uv - 1.0;\\n\\tvec3 direction = vec3(uv, 1.0);\\n\\tif (face == 0.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.z *= -1.0;\\n\\t} else if (face == 1.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.z *= -1.0;\\n\\t} else if (face == 3.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.x *= -1.0;\\n\\t} else if (face == 4.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.y *= -1.0;\\n\\t} else if (face == 5.0) {\\n\\t\\tdirection.xz *= -1.0;\\n\\t}\\n\\treturn direction;\\n}\\nvoid main() {\\n\\tvOutputDirection = getDirection(uv, faceIndex);\\n\\tgl_Position = vec4( position, 1.0 );\\n}\\n\\t\";\n\n\t}\n\n\tfunction _getEncodings() {\n\n\t\treturn \"\\nuniform int inputEncoding;\\nuniform int outputEncoding;\\n\\n#include <encodings_pars_fragment>\\n\\nvec4 inputTexelToLinear(vec4 value){\\n\\tif(inputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(inputEncoding == 1){\\n\\t\\treturn sRGBToLinear(value);\\n\\t}else if(inputEncoding == 2){\\n\\t\\treturn RGBEToLinear(value);\\n\\t}else if(inputEncoding == 3){\\n\\t\\treturn RGBMToLinear(value, 7.0);\\n\\t}else if(inputEncoding == 4){\\n\\t\\treturn RGBMToLinear(value, 16.0);\\n\\t}else if(inputEncoding == 5){\\n\\t\\treturn RGBDToLinear(value, 256.0);\\n\\t}else{\\n\\t\\treturn GammaToLinear(value, 2.2);\\n\\t}\\n}\\n\\nvec4 linearToOutputTexel(vec4 value){\\n\\tif(outputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(outputEncoding == 1){\\n\\t\\treturn LinearTosRGB(value);\\n\\t}else if(outputEncoding == 2){\\n\\t\\treturn LinearToRGBE(value);\\n\\t}else if(outputEncoding == 3){\\n\\t\\treturn LinearToRGBM(value, 7.0);\\n\\t}else if(outputEncoding == 4){\\n\\t\\treturn LinearToRGBM(value, 16.0);\\n\\t}else if(outputEncoding == 5){\\n\\t\\treturn LinearToRGBD(value, 256.0);\\n\\t}else{\\n\\t\\treturn LinearToGamma(value, 2.2);\\n\\t}\\n}\\n\\nvec4 envMapTexelToLinear(vec4 color) {\\n\\treturn inputTexelToLinear(color);\\n}\\n\\t\";\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\tvar LinePieces = 1;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) { materials = []; }\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\treturn this.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tObject.assign( Loader.prototype, {\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t} );\n\n\tLoader.Handlers = {\n\n\t\tadd: function ( /* regex, loader */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t\t},\n\n\t\tget: function ( /* file */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t\t}\n\n\t};\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\t\treturn this.setResourcePath( value );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tFrustum.prototype.setFromMatrix = function ( m ) {\n\n\t\tconsole.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n\t\treturn this.setFromProjectionMatrix( m );\n\n\t};\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( MathUtils, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn MathUtils.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn MathUtils.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix3( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix4( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tarea: function () {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\t\treturn this.getArea();\n\n\t\t},\n\t\tbarycoordFromPoint: function ( point, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn this.getBarycoord( point, target );\n\n\t\t},\n\t\tmidpoint: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\t\treturn this.getMidpoint( target );\n\n\t\t},\n\t\tnormal: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn this.getNormal( target );\n\n\t\t},\n\t\tplane: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\t\treturn this.getPlane( target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle, {\n\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t\t},\n\t\tnormal: function ( a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Geometry.prototype, {\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeLineDistances: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t},\n\t\tgetWorldRotation: function () {\n\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( Mesh.prototype, {\n\n\t\tsetDrawMode: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t},\n\n\t} );\n\n\tObject.defineProperties( Mesh.prototype, {\n\n\t\tdrawMode: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n\t\t\t\treturn TrianglesDrawMode;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tSkinnedMesh.prototype.initBones = function () {\n\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n\t};\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\treturn this.setAttribute( name, attribute );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t},\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\t\t\treturn this.deleteAttribute( name );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Raycaster.prototype, {\n\n\t\tlinePrecision: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );\n\t\t\t\treturn this.params.Line.threshold;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );\n\t\t\t\tthis.params.Line.threshold = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InterleavedBuffer.prototype, {\n\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( value );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\t\tgetArrays: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t\t},\n\n\t\taddShapeList: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t\t},\n\n\t\taddShape: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\toverdraw: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t},\n\n\t\tstencilMask: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\treturn this.stencilFuncMask;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\tthis.stencilFuncMask = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t},\n\t\tanimate: function ( callback ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\t\tthis.setAnimationLoop( callback );\n\n\t\t},\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t},\n\t\tsetFaceCulling: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t\t},\n\t\tallocTextureUnit: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n\t\t},\n\t\tsetTexture: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n\t\t},\n\t\tsetTexture2D: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n\t\t},\n\t\tsetTextureCube: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n\t\t},\n\t\tgetActiveMipMapLevel: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\t\t\treturn this.getActiveMipmapLevel();\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\t\treturn this.getContext();\n\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n\t\t\t\treturn this.xr;\n\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\tthis.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* cullFace */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );\n\t\treturn new WebGLCubeRenderTarget( width, options );\n\n\t}\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Audio.prototype, {\n\n\t\tload: {\n\t\t\tvalue: function ( file ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\t\t\tscope.setBuffer( buffer );\n\n\t\t\t\t} );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n\t}\n\n\t//\n\n\tfunction JSONLoader() {\n\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n\t}\n\n\t//\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tattach: function ( /* child, scene, parent */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction LensFlare() {\n\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js' );\n\n\t}\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\t\trevision: REVISION,\n\t\t} } ) );\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeGeometry = BoxGeometry;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GammaEncoding = GammaEncoding;\n\texports.Geometry = Geometry;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.LightShadow = LightShadow;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\n    return exports;\n});\n\ndefine('skylark-threejs/main',[\r\n\t\"skylark-langx/skylark\",\r\n    \"./three\"\r\n], function(skylark,threejs) {\r\n    return skylark.attach(\"intg.threejs\",threejs);\r\n});\r\n\ndefine('skylark-threejs', ['skylark-threejs/main'], function (main) { return main; });\n\n"]}