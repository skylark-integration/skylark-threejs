{"version":3,"sources":["skylark-threejs.js"],"names":["define","exports","undefined","Number","EPSILON","Math","pow","isInteger","value","isFinite","floor","sign","x","Function","prototype","Object","defineProperty","get","this","toString","match","assign","target","TypeError","output","index","arguments","length","source","nextKey","hasOwnProperty","call","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","ACESFilmicToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","EventDispatcher","addEventListener","type","listener","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","slice","i","l","_lut","_canvas","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","uuid","toUpperCase","clamp","min","max","euclideanModulo","n","m","mapLinear","a1","a2","b1","b2","lerp","y","t","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","console","warn","Vector2","Matrix3","elements","error","defineProperties","width","height","isVector2","setScalar","scalar","setX","setY","setComponent","Error","getComponent","clone","constructor","copy","v","add","w","addVectors","addScalar","s","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","d","f","g","h","getInverse","matrix","throwOnDegenerate","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","r","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","scale","rotate","theta","translate","ImageUtils","getDataURL","image","canvas","HTMLCanvasElement","src","document","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","name","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","z","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","Quaternion","_x","_y","_z","_w","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","Array","isArray","dispose","transformUv","uv","isVector4","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","isWebGLRenderTarget","setSize","isWebGLMultisampleRenderTarget","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","_onChangeCallback","isQuaternion","quaternion","setFromEuler","euler","update","isEuler","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","inverse","conjugate","p","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","_vector","Vector3","_quaternion","isVector3","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","_v1","_m1","Matrix4","_zero","_one","isMatrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","lookAt","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","position","x2","y2","z2","wx","wy","wz","decompose","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","_matrix","_quaternion$1","Euler","_order","DefaultOrder","Layers","mask","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","enableAll","toggle","disable","disableAll","test","layers","_object3DId","_v1$1","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","parent","children","DefaultUp","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Scene","background","environment","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","CustomEvent","detail","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","vector","worldToLocal","updateWorldMatrix","isCamera","isLight","object","remove","attach","getObjectById","id","getObjectByProperty","getObjectByName","child","getWorldPosition","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","force","updateParents","updateChildren","geometries","materials","shapes","serialize","library","element","JSON","stringify","isInstancedMesh","count","instanceMatrix","isMesh","isLine","isPoints","geometry","parameters","shape","material","uuids","extractFromCache","cache","values","key","data","recursive","parse","isScene","_points","_vector$1","_box","Box3","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","Infinity","satForAxes","axes","v0","extents","j","p0","p1","p2","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","boundingBox","computeBoundingBox","union","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","distanceToPoint","clampedPoint","getBoundingSphere","intersect","_box$1","Sphere","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_vector1","_vector2","_normalMatrix","Plane","isPlane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","Color","setRGB","hue2rgb","SRGBToLinear","LinearToSRGB","Face3","color","materialIndex","vertexNormals","isColor","vertexColors","setHex","setStyle","hex","setHSL","style","handleAlpha","string","parseFloat","exec","components","parseInt","charAt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","NAMES","materialId","Material","blending","side","flatShading","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","_vector$3","BufferAttribute","itemSize","normalized","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","DirectGeometry","vertices","normals","colors","uvs","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXYZ","setXY","setXYZW","onUpload","computeGroups","group","faces","face","fromGeometry","morphTargetsPosition","faceVertexUvs","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","setAttribute","deleteAttribute","addGroup","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","positions","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","lineDistancesNeedUpdate","lineDistance","fromDirectGeometry","morphAttributesPosition","morphAttribute","isNaN","jl","computeFaceNormals","computeVertexNormals","vA","vB","vC","pA","pB","pC","cb","ab","indices","normalizeNormals","merge","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","keys","attributeData","hasMorphAttributes","attributeArray","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","intersection","morphTargetDictionary","ml","String","intersects","groupMaterial","faceIndex","fvA","fvB","fvC","isMultiMaterial","fl","faceMaterial","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","Geometry","vertex","fromBufferGeometry","scope","addFace","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","uvsCopy","k","kl","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","uvs1","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","srcVertexNormal","destVertexNormal","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","__proto__","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Camera","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","isShaderMaterial","uniform","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLCubeRenderTarget","renderer","scene","currentRenderTarget","getRenderTarget","setRenderTarget","render","clear","stencil","dummy","DataTexture","isWebGLCubeRenderTarget","fromEquirectangularTexture","shader","tEquirect","join","isDataTexture","_sphere$1","_vector$5","Frustum","p4","p5","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","UniformsLib","common","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","WebGLAnimation","isAnimating","animationLoop","onAnimationFrame","time","frame","requestAnimationFrame","stop","setAnimationLoop","setContext","WebGLAttributes","gl","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","buffer","delete","bufferType","createBuffer","bindBuffer","bufferData","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","absNumericalSort","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","transparency","isCubeTexture","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","unit","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","info","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","getShaderSource","lines","split","addLineNumbers","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","logarithmicDepthBuffer","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","isRawShaderMaterial","shaderName","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","toneMapping","toneMappingName","getToneMappingFunction","outputEncoding","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","cachedUniforms","cachedAttributes","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","prefix","detachShader","deleteShader","getUniforms","getAttributes","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","programs","floatVertexTextures","maxVertexUniforms","vertexTextures","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","nClipPlanes","nClipIntersection","isMeshStandardMaterial","isSkinnedMesh","bones","skeleton","nVertexUniforms","nVertexMatrices","allocateBones","getMaxPrecision","shaderobject","getShaderObject","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","init","unshift","finish","customOpaqueSort","customTransparentSort","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","light","halfWidth","halfHeight","shadowCache","state","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","pointShadow","vector3","matrix42","setup","viewMatrix","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_renderer","_objects","maxTextureSize","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","1","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","result","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","depthMaterial","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setClear","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLTextures","_gl","utils","maxTextures","maxCubemapSize","maxSamples","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","textureProperties","__maxMipLevel","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","onTextureDispose","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","memory","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","activeTexture","bindTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","compressedTexImage2D","texImage2D","mipmapImage","setTextureCubeDynamic","wrappingToGL","filterToGL","textureType","texParameteri","extension","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","createTexture","textureNeedsPowerOfTwo","isDepthTexture","texImage3D","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","createFramebuffer","updateRenderTargetMipmap","webglTexture","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","cameras","Group","WebXRManager","session","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","targetRay","grip","onSessionEnd","forEach","setFramebuffer","animation","isPresenting","onRequestReferenceSpace","updateInputSources","inputSources","removed","added","getController","getControllerGrip","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","getSession","setSession","getContextAttributes","layerInit","antialias","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","then","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","renderState","transform","inputPose","gripPose","getPose","targetRaySpace","gripSpace","WebGLRenderer","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","toneMappingExposure","toneMappingWhitePoint","objects","programCache","renderLists","renderStates","morphtargets","bufferRenderer","indexedBufferRenderer","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clipping","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","getTargetPixelRatio","contextAttributes","xrCompatible","onContextLost","onContextRestore","getShaderPrecisionFormat","rangeMin","rangeMax","message","initGLContext","getExtension","maxAnisotropy","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","maxVertexTextures","maxAttributes","maxVaryings","maxFragmentUniforms","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","clearColor","reset","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","factor","webglSlot","initAttributes","enableAttribute","disableUnusedAttributes","disableVertexAttribArray","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","boundTexture","unbindTexture","apply","calls","triangles","autoReset","mode","instanceCount","wireframeAttributes","onGeometryDispose","buffergeometry","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","geometryAttributes","getWireframeAttribute","currentAttribute","updateMap","influencesList","objectInfluences","influences","morphInfluencesSum","morphBaseInfluence","lists","onSceneDispose","list","has","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","xr","environmentBlendMode","setMode","drawArrays","renderInstances","primcount","methodName","drawElements","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","pixelRatio","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","programAttributes","positionArray","vertexAttribPointer","normalArray","uvArray","colorArray","tempScene","setProgram","updateBuffers","rangeFactor","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","maxInstancedCount","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","initMaterial","renderObjects","isArrayCamera","camera2","isImmediateRenderObject","renderObjectImmediate","materialProperties","lightsStateVersion","programCacheKey","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","isMeshLambertMaterial","isMeshToonMaterial","isMeshPhongMaterial","isShadowMaterial","materialNeedsLights","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","isFog","density","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","refreshUniformsToon","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","uvScaleMap","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","ltc_1","LTC_1","ltc_2","LTC_2","uv2ScaleMap","window","projectObject","isGroup","isLOD","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","InterleavedBuffer","isInterleavedBuffer","_geometry","_vector$6","InterleavedBufferAttribute","interleavedBuffer","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","float32Array","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","_currentLevel","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getCurrentLevel","getObjectForDistance","bind","calculateInverses","normalizeSkinWeights","skinWeight","_offsetMatrix","_identityMatrix","Skeleton","boneInverses","Bone","bone","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","positionAttribute","threshold","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","_start$1","_end$1","LineSegments","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","o","ol","edge1","edge2","edge","edges","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","triangulate","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","prev","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","ahole","hl","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","concat","scalePt2","pt","vec","bs","vert","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","layer","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","shift","resetDuration","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","parseKeyframeTrack","json","trackType","typeName","toLowerCase","getTrackTypeForValueTypeName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","createInterpolant","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","global","DefaultLoadingManager","Loader","manager","crossOrigin","resourcePath","load","setCrossOrigin","setPath","setResourcePath","loading","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t3","cached","setTimeout","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","header","open","callbacks","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setResponseType","setWithCredentials","setMimeType","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","onImageLoad","onImageError","substr","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","weight","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","MaterialLoader","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","scaleW","scaleH","isDirectionalLightShadow","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","typedArray","TYPED_ARRAYS","bufferAttributeConstr","bufferAttribute","drawcalls","offsets","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","bufferGeometryLoader","details","geometryShapes","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","ha","familyName","FontLoader","setOptions","res","blob","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","substring","AudioContext","webkitAudioContext","AudioLoader","SphericalHarmonics3","LightProbe","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isSphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","Clock","autoStart","oldTime","elapsedTime","running","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","performance","Date","now","getElapsedTime","getDelta","newTime","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_pausedAt","filters","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","Raycaster","PointCloud","ascSort","intersectObject","Spherical","Cylindrical","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","other","makeSafe","setFromCartesianCoords","_vector$7","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","_vector$8","SpotLightHelper","cone","coneLength","coneWidth","_vector$9","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","isSkeletonHelper","_vector$a","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","_v1$5","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$b","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$3","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","setColor","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","MAX_SAMPLES","ENCODINGS","weights","poleAxis","shaderMaterial","_flatCamera","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","ref","_lodPlanes","_sizeLods","_sigmas","lod","sizeLod","sigma","texelSize","positionSize","uvSize","faceIndexSize","coordinates","fill","_createPlanes","_pingPongRenderTarget","_oldTarget","PHI","INV_PHI","_axisDirections","PMREMGenerator","_compileMaterial","_allocateTargets","equirectangular","cubeUVRenderTarget","_createRenderTarget","_cleanup","outputTarget","tmpScene","_setViewport","_applyPMREM","_blur","lodIn","lodOut","_halfBlur","targetIn","targetOut","sigmaRadians","blurScene","blurUniforms","pixels","radiansPerPixel","sigmaPixels","exp","outputSize","_getEquirectShader","_getCubemapShader","fromScene","cubeCamera","upSign","forwardSign","maxComponent","fExp","log2","col","_sceneToCubeUV","fromEquirectangular","fromCubemap","cubemap","_textureToCubeUV","compileCubemapShader","compileEquirectangularShader","ClosedSplineCurve3","SplineCurve3","Spline","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","applyMatrix","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","removeAttribute","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","renderReverseSided","renderSingleSided","audioLoader","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","revision","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CubeGeometry","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FaceColors","FlatShading","Float32Attribute","Float64Attribute","FrontFaceDirectionCCW","FrontFaceDirectionCW","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NoColors","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","skylark","threejs","main"],"mappings":"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","file":"../skylark-threejs.js","sourcesContent":["define('skylark-threejs/three',[], function () { \n\n\t'use strict';\n\n\tvar exports = {};\n\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\tObject.assign = function ( target ) {\n\n\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t}\n\n\t\t\tvar output = Object( target );\n\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t};\n\n\t}\n\n\tvar REVISION = '115';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar ACESFilmicToneMapping = 5;\n\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGB_ETC2_Format = 37492;\n\tvar RGBA_ETC2_EAC_Format = 37496;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar RGBA_BPTC_Format = 36492;\n\tvar SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tvar SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tvar SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tvar SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tvar SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tvar SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tvar SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tvar SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tvar SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tvar SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tvar SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tvar SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tvar SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tvar SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return false; }\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) { return; }\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author thezwap\n\t */\n\n\tvar _lut = [];\n\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t}\n\n\tvar MathUtils = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: function () {\n\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\treturn uuid.toUpperCase();\n\n\t\t},\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) { return 0; }\n\t\t\tif ( x >= max ) { return 1; }\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tsetQuaternionFromProperEuler: function ( q, a, b, c, order ) {\n\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c2 = cos( b / 2 );\n\t\t\tvar s2 = sin( b / 2 );\n\n\t\t\tvar c13 = cos( ( a + c ) / 2 );\n\t\t\tvar s13 = sin( ( a + c ) / 2 );\n\n\t\t\tvar c1_3 = cos( ( a - c ) / 2 );\n\t\t\tvar s1_3 = sin( ( a - c ) / 2 );\n\n\t\t\tvar c3_1 = cos( ( c - a ) / 2 );\n\t\t\tvar s3_1 = sin( ( c - a ) / 2 );\n\n\t\t\tif ( order === 'XYX' ) {\n\n\t\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\n\t\t\t} else if ( order === 'YZY' ) {\n\n\t\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\n\t\t\t} else if ( order === 'ZXZ' ) {\n\n\t\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\n\t\t\t} else if ( order === 'XZX' ) {\n\n\t\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\n\t\t\t} else if ( order === 'YXY' ) {\n\n\t\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\n\t\t\t} else if ( order === 'ZYZ' ) {\n\n\t\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tcross: function ( v ) {\n\n\t\t\treturn this.x * v.y - this.y * v.x;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( throwOnDegenerate !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\t\tvar c = Math.cos( rotation );\n\t\t\tvar s = Math.sin( rotation );\n\n\t\t\tthis.set(\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t\t0, 0, 1\n\t\t\t);\n\n\t\t},\n\n\t\tscale: function ( sx, sy ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotate: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta );\n\t\t\tvar s = Math.sin( theta );\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\t\tte[ 0 ] = c * a11 + s * a21;\n\t\t\tte[ 3 ] = c * a12 + s * a22;\n\t\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( tx, ty ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\n\t\tgetDataURL: function ( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\t\treturn image.src;\n\n\t\t\t} else if ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\n\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tvar output = {\n\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY,\n\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// process single image\n\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t\treturn uv;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.defineProperties( Vector4.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.z = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.w = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tthis.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.texture.image = {};\n\t\tthis.texture.image.width = width;\n\t\tthis.texture.image.height = height;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: WebGLRenderTarget,\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author Matt DesLauriers / @mattdesl\n\t */\n\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.samples = 4;\n\n\t}\n\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\n\n\t\tconstructor: WebGLMultisampleRenderTarget,\n\n\t\tisWebGLMultisampleRenderTarget: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\n\n\t\t\tthis.samples = source.samples;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tisQuaternion: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tangleTo: function ( q ) {\n\n\t\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t\t},\n\n\t\trotateTowards: function ( q, step ) {\n\n\t\t\tvar angle = this.angleTo( q );\n\n\t\t\tif ( angle === 0 ) { return this; }\n\n\t\t\tvar t = Math.min( 1, step / angle );\n\n\t\t\tthis.slerp( q, t );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tinverse: function () {\n\n\t\t\t// quaternion is assumed to have unit length\n\n\t\t\treturn this.conjugate();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) { return this; }\n\t\t\tif ( t === 1 ) { return this.copy( qb ); }\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\t\tthis.normalize();\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index ) {\n\n\t\t\tthis._x = attribute.getX( index );\n\t\t\tthis._y = attribute.getY( index );\n\t\t\tthis._z = attribute.getZ( index );\n\t\t\tthis._w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector = new Vector3();\n\tvar _quaternion = new Quaternion();\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\n\n\t\t},\n\n\t\tapplyAxisAngle: function ( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\treturn this.applyMatrix3( m ).normalize();\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t\t},\n\n\t\tunproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function ( minVal, maxVal ) {\n\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\treturn this.crossVectors( this, v );\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( v ) {\n\n\t\t\tvar denominator = v.lengthSq();\n\n\t\t\tif ( denominator === 0 ) { return this.set( 0, 0, 0 ); }\n\n\t\t\tvar scalar = v.dot( this ) / denominator;\n\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function ( planeNormal ) {\n\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( _vector );\n\n\t\t},\n\n\t\treflect: function ( normal ) {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t},\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\t\tif ( denominator === 0 ) { return Math.PI / 2; }\n\n\t\t\tvar theta = this.dot( v ) / denominator;\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t\t},\n\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\t\tthis.y = Math.cos( phi ) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t\t},\n\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\t\tthis.x = radius * Math.sin( theta );\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tsetFromMatrix3Column: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tvar _v1 = new Vector3();\n\tvar _m1 = new Matrix4();\n\tvar _zero = new Vector3( 0, 0, 0 );\n\tvar _one = new Vector3( 1, 1, 1 );\n\tvar _x = new Vector3();\n\tvar _y = new Vector3();\n\tvar _z = new Vector3();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function ( m ) {\n\n\t\t\t// this method does not support reflection matrices\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// bottom row\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// last column\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\t\treturn this.compose( _zero, q, _one );\n\n\t\t},\n\n\t\tlookAt: function ( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors( eye, target );\n\n\t\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t_z.z = 1;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t\t// up and z are parallel\n\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t_z.x += 0.0001;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_z.z += 0.0001;\n\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\t\t\t\t_x.crossVectors( up, _z );\n\n\t\t\t}\n\n\t\t\t_x.normalize();\n\t\t\t_y.crossVectors( _z, _x );\n\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( x, y, z ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\tte[ 12 ] = x.x;\n\t\t\t\tte[ 13 ] = x.y;\n\t\t\t\tte[ 14 ] = x.z;\n\n\t\t\t} else {\n\n\t\t\t\tte[ 12 ] = x;\n\t\t\t\tte[ 13 ] = y;\n\t\t\t\tte[ 14 ] = z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\tif ( throwOnDegenerate !== undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.\" );\n\n\t\t\t}\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) { return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ); }\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s, c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts, c, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\t\tte[ 3 ] = 0;\n\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\t\tte[ 7 ] = 0;\n\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\tte[ 12 ] = position.x;\n\t\t\tte[ 13 ] = position.y;\n\t\t\tte[ 14 ] = position.z;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdecompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) { sx = - sx; }\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\t\t\t_m1.copy( this );\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t_m1.elements[ 0 ] *= invSX;\n\t\t\t_m1.elements[ 1 ] *= invSX;\n\t\t\t_m1.elements[ 2 ] *= invSX;\n\n\t\t\t_m1.elements[ 4 ] *= invSY;\n\t\t\t_m1.elements[ 5 ] *= invSY;\n\t\t\t_m1.elements[ 6 ] *= invSY;\n\n\t\t\t_m1.elements[ 8 ] *= invSZ;\n\t\t\t_m1.elements[ 9 ] *= invSZ;\n\t\t\t_m1.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _matrix = new Matrix4();\n\tvar _quaternion$1 = new Quaternion();\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = MathUtils.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function ( q, order, update ) {\n\n\t\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t\t},\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function ( newOrder ) {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\t_quaternion$1.setFromEuler( this );\n\n\t\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\n\n\t\t},\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_onChange: function ( callback ) {\n\n\t\t\tthis._onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t_onChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\tenableAll: function () {\n\n\t\t\tthis.mask = 0xffffffff | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\tdisableAll: function () {\n\n\t\t\tthis.mask = 0;\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\tvar _object3DId = 0;\n\n\tvar _v1$1 = new Vector3();\n\tvar _q1 = new Quaternion();\n\tvar _m1$1 = new Matrix4();\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\tvar _scale = new Vector3();\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3( 1, 0, 0 );\n\tvar _yAxis = new Vector3( 0, 1, 0 );\n\tvar _zAxis = new Vector3( 0, 0, 1 );\n\n\tvar _addedEvent = { type: 'added' };\n\tvar _removedEvent = { type: 'removed' };\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Object3D,\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tthis.matrix.premultiply( matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateOnWorldAxis: function ( axis, angle ) {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.premultiply( _q1 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t\t},\n\n\t\ttranslateOnAxis: function ( axis, distance ) {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslateX: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t\t},\n\n\t\ttranslateY: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t\t},\n\n\t\ttranslateZ: function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t\t},\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\n\n\t\t},\n\n\t\tlookAt: function ( x, y, z ) {\n\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t_target.copy( x );\n\n\t\t\t} else {\n\n\t\t\t\t_target.set( x, y, z );\n\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\n\n\t\t\t} else {\n\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\n\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\n\n\t\t\t}\n\n\t\t},\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push( object );\n\n\t\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tattach: function ( object ) {\n\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t\tthis.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.getInverse( this.matrixWorld );\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t\t}\n\n\t\t\tobject.applyMatrix4( _m1$1 );\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) { return this; }\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\ttarget = new Quaternion();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldScale: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) { return; }\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t\t}\n\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tif ( updateChildren === true ) {\n\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\n\t\t\tif ( this.visible === false ) { object.visible = false; }\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\n\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\n\n\t\t\t// object specific properties\n\n\t\t\tif ( this.isInstancedMesh ) {\n\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\n\t\t\t\tif ( shapes.length > 0 ) { output.shapes = shapes; }\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) { recursive = true; }\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tisScene: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\n\t\t\tif ( source.environment !== null ) { this.environment = source.environment.clone(); }\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\n\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\n\t\t\tif ( this.environment !== null ) { data.object.environment = this.environment.toJSON( meta ); }\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tvar _points = [\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3()\n\t];\n\n\tvar _vector$1 = new Vector3();\n\n\tvar _box = new Box3();\n\n\t// triangle centered vertices\n\n\tvar _v0 = new Vector3();\n\tvar _v1$2 = new Vector3();\n\tvar _v2 = new Vector3();\n\n\t// triangle edge vectors\n\n\tvar _f0 = new Vector3();\n\tvar _f1 = new Vector3();\n\tvar _f2 = new Vector3();\n\n\tvar _center = new Vector3();\n\tvar _extents = new Vector3();\n\tvar _triangleNormal = new Vector3();\n\tvar _testAxis = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\tif ( z < minZ ) { minZ = z; }\n\n\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\tif ( y > maxY ) { maxY = y; }\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function ( object ) {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tobject.updateWorldMatrix( false, false );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box );\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint( sphere.center, _vector$1 );\n\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\treturn _vector$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t\t},\n\n\t\tintersectsTriangle: function ( triangle ) {\n\n\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// compute box center and extents\n\t\t\tthis.getCenter( _center );\n\t\t\t_extents.subVectors( this.max, _center );\n\n\t\t\t// translate triangle to aabb origin\n\t\t\t_v0.subVectors( triangle.a, _center );\n\t\t\t_v1$2.subVectors( triangle.b, _center );\n\t\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t\t// compute edge vectors for triangle\n\t\t\t_f0.subVectors( _v1$2, _v0 );\n\t\t\t_f1.subVectors( _v2, _v1$2 );\n\t\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\tvar axes = [\n\t\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t\t];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// test 3 face normals from the aabb\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\t\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$1.copy( point ).clamp( this.min, this.max );\n\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tgetBoundingSphere: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t\t}\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$1 ).length() * 0.5;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif ( this.isEmpty() ) { return this; }\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\t\tthis.setFromPoints( _points );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\t\tvar i, j;\n\n\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t_testAxis.fromArray( axes, i );\n\t\t\t// project the aabb onto the seperating axis\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\tvar p0 = v0.dot( _testAxis );\n\t\t\tvar p1 = v1.dot( _testAxis );\n\t\t\tvar p2 = v2.dot( _testAxis );\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tvar _box$1 = new Box3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points, optionalCenter ) {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\t_box$1.setFromPoints( points ).getCenter( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\ttarget.sub( this.center ).normalize();\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\t\ttarget = new Box3();\n\n\t\t\t}\n\n\t\t\ttarget.set( this.center, this.center );\n\t\t\ttarget.expandByScalar( this.radius );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\tvar _vector$2 = new Vector3();\n\tvar _segCenter = new Vector3();\n\tvar _segDir = new Vector3();\n\tvar _diff = new Vector3();\n\n\tvar _edge1 = new Vector3();\n\tvar _edge2 = new Vector3();\n\tvar _normal = new Vector3();\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function ( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, _vector$2 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( point, this.origin );\n\n\t\t\tvar directionDistance = target.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn target.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function ( point ) {\n\n\t\t\tvar directionDistance = _vector$2.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t}\n\n\t\t\t_vector$2.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn _vector$2.distanceToSquared( point );\n\n\t\t},\n\n\t\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\n\t\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\tvar a01 = - this.direction.dot( _segDir );\n\t\t\tvar b0 = _diff.dot( this.direction );\n\t\t\tvar b1 = - _diff.dot( _segDir );\n\t\t\tvar c = _diff.lengthSq();\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif ( det > 0 ) {\n\n\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t}\n\n\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\n\t\t},\n\n\t\tintersectSphere: function ( sphere, target ) {\n\n\t\t\t_vector$2.subVectors( sphere.center, this.origin );\n\t\t\tvar tca = _vector$2.dot( this.direction );\n\t\t\tvar d2 = _vector$2.dot( _vector$2 ) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) { return null; }\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\treturn this.at( t0, target );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, target ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, target );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, target ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) { return null; }\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn this.intersectBox( box, _vector$2 ) !== null;\n\n\t\t},\n\n\t\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t_edge1.subVectors( b, a );\n\t\t\t_edge2.subVectors( c, a );\n\t\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( _normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) { return null; }\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t_diff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * _diff.dot( _normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector1 = new Vector3();\n\tvar _vector2 = new Vector3();\n\tvar _normalMatrix = new Matrix3();\n\n\tfunction Plane( normal, constant ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tisPlane: true,\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\n\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t\t},\n\n\t\tintersectLine: function ( line, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar direction = line.delta( _vector1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t},\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\n\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant -= offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v0$1 = new Vector3();\n\tvar _v1$3 = new Vector3();\n\tvar _v2$1 = new Vector3();\n\tvar _v3 = new Vector3();\n\n\tvar _vab = new Vector3();\n\tvar _vac = new Vector3();\n\tvar _vbc = new Vector3();\n\tvar _vap = new Vector3();\n\tvar _vbp = new Vector3();\n\tvar _vcp = new Vector3();\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tgetNormal: function ( a, b, c, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( c, b );\n\t\t\t_v0$1.subVectors( a, b );\n\t\t\ttarget.cross( _v0$1 );\n\n\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t}\n\n\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t},\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tgetBarycoord: function ( point, a, b, c, target ) {\n\n\t\t\t_v0$1.subVectors( c, a );\n\t\t\t_v1$3.subVectors( b, a );\n\t\t\t_v2$1.subVectors( point, a );\n\n\t\t\tvar dot00 = _v0$1.dot( _v0$1 );\n\t\t\tvar dot01 = _v0$1.dot( _v1$3 );\n\t\t\tvar dot02 = _v0$1.dot( _v2$1 );\n\t\t\tvar dot11 = _v1$3.dot( _v1$3 );\n\t\t\tvar dot12 = _v1$3.dot( _v2$1 );\n\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\t// collinear or singular triangle\n\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t// barycentric coordinates must always sum to 1\n\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point, a, b, c ) {\n\n\t\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\n\n\t\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t\t},\n\n\t\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\t\ttarget.set( 0, 0 );\n\t\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tisFrontFacing: function ( a, b, c, direction ) {\n\n\t\t\t_v0$1.subVectors( c, b );\n\t\t\t_v1$3.subVectors( a, b );\n\n\t\t\t// strictly front facing\n\t\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetArea: function () {\n\n\t\t\t_v0$1.subVectors( this.c, this.b );\n\t\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t\t},\n\n\t\tgetMidpoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tgetNormal: function ( target ) {\n\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetPlane: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\t\ttarget = new Plane();\n\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tgetBarycoord: function ( point, target ) {\n\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetUV: function ( point, uv1, uv2, uv3, target ) {\n\n\t\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tisFrontFacing: function ( direction ) {\n\n\t\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsTriangle( this );\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( p, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tvar a = this.a, b = this.b, c = this.c;\n\t\t\tvar v, w;\n\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors( b, a );\n\t\t\t_vac.subVectors( c, a );\n\t\t\t_vap.subVectors( p, a );\n\t\t\tvar d1 = _vab.dot( _vap );\n\t\t\tvar d2 = _vac.dot( _vap );\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy( a );\n\n\t\t\t}\n\n\t\t\t_vbp.subVectors( p, b );\n\t\t\tvar d3 = _vab.dot( _vbp );\n\t\t\tvar d4 = _vac.dot( _vbp );\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy( b );\n\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t\t}\n\n\t\t\t_vcp.subVectors( p, c );\n\t\t\tvar d5 = _vab.dot( _vcp );\n\t\t\tvar d6 = _vac.dot( _vcp );\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy( c );\n\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t\t_vbc.subVectors( c, b );\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t\t}\n\n\t\t\t// face region\n\t\t\tvar denom = 1 / ( va + vb + vc );\n\t\t\t// u = va * denom\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t\t},\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tvar _hslA = { h: 0, s: 0, l: 0 };\n\tvar _hslB = { h: 0, s: 0, l: 0 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tfunction hue2rgb( p, q, t ) {\n\n\t\tif ( t < 0 ) { t += 1; }\n\t\tif ( t > 1 ) { t -= 1; }\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\n\t\tif ( t < 1 / 2 ) { return q; }\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\n\t\treturn p;\n\n\t}\n\n\tfunction SRGBToLinear( c ) {\n\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t}\n\n\tfunction LinearToSRGB( c ) {\n\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function ( h, s, l ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo( h, 1 );\n\t\t\ts = MathUtils.clamp( s, 0, 1 );\n\t\t\tl = MathUtils.clamp( l, 0, 1 );\n\n\t\t\tif ( s === 0 ) {\n\n\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t} else {\n\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) { return; }\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\treturn this.setColorName( style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetColorName: function ( style ) {\n\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[ style ];\n\n\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t// red\n\t\t\t\tthis.setHex( hex );\n\n\t\t\t} else {\n\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\n\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\n\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopySRGBToLinear: function ( color ) {\n\n\t\t\tthis.r = SRGBToLinear( color.r );\n\t\t\tthis.g = SRGBToLinear( color.g );\n\t\t\tthis.b = SRGBToLinear( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToSRGB: function ( color ) {\n\n\t\t\tthis.r = LinearToSRGB( color.r );\n\t\t\tthis.g = LinearToSRGB( color.g );\n\t\t\tthis.b = LinearToSRGB( color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertSRGBToLinear: function () {\n\n\t\t\tthis.copySRGBToLinear( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToSRGB: function () {\n\n\t\t\tthis.copyLinearToSRGB( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( target ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t\t}\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function ( h, s, l ) {\n\n\t\t\tthis.getHSL( _hslA );\n\n\t\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpHSL: function ( color, alpha ) {\n\n\t\t\tthis.getHSL( _hslA );\n\t\t\tcolor.getHSL( _hslB );\n\n\t\t\tvar h = MathUtils.lerp( _hslA.h, _hslB.h, alpha );\n\t\t\tvar s = MathUtils.lerp( _hslA.s, _hslB.s, alpha );\n\t\t\tvar l = MathUtils.lerp( _hslA.l, _hslB.l, alpha );\n\n\t\t\tthis.setHSL( h, s, l );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\tColor.NAMES = _colorKeywords;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t}\n\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function () {},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) { return; }\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\n\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\n\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\n\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\n\n\t\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\n\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\n\t\t\tif ( this.vertexColors ) { data.vertexColors = true; }\n\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\n\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\n\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\n\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\n\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\n\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\n\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\n\n\t\t\tif ( this.visible === false ) { data.visible = false; }\n\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\n\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\t{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\n\t\t\tthis.shadowSide = source.shadowSide;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.toneMapped = source.toneMapped;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _vector$3 = new Vector3();\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyNormalMatrix: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.applyNormalMatrix( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$3.x = this.getX( i );\n\t\t\t\t_vector$3.y = this.getY( i );\n\t\t\t\t_vector$3.z = this.getZ( i );\n\n\t\t\t\t_vector$3.transformDirection( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\n\t\t\t\t\t\tname: morphNormals[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) { return - Infinity; }\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tvar _m1$2 = new Matrix4();\n\tvar _obj = new Object3D();\n\tvar _offset = new Vector3();\n\tvar _box$2 = new Box3();\n\tvar _boxMorphTargets = new Box3();\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: BufferGeometry,\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tsetAttribute: function ( name, attribute ) {\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeleteAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif ( tangent !== undefined ) {\n\n\t\t\t\ttangent.transformDirection( matrix );\n\n\t\t\t\ttangent.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$2.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$2.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$2.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$2.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$2.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj.lookAt( vector );\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif ( position ) {\n\n\t\t\t\t// first, find the center of the bounding sphere\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute( position );\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter( center );\n\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i );\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// process morph attributes if present\n\n\t\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) {\n\n\t\t\t\toffset = 0;\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$4.x = normals.getX( i );\n\t\t\t\t_vector$4.y = normals.getY( i );\n\t\t\t\t_vector$4.z = normals.getZ( i );\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute( array2, itemSize );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\t// attributes\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = morphAttribute[ i ];\n\n\t\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\tdata.data.attributes[ key ] = attributeData;\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor ( var key in this.morphAttributes ) {\n\n\t\t\t\tvar attributeArray = this.morphAttributes[ key ];\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = attributeArray[ i ];\n\n\t\t\t\t\tvar attributeData = attribute.toJSON();\n\n\t\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\n\n\t\t\t\t\tarray.push( attributeData );\n\n\t\t\t\t}\n\n\t\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\t\thasMorphAttributes = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasMorphAttributes ) {\n\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar name, i, l;\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.setAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\t// user data\n\n\t\t\tthis.userData = source.userData;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tvar _inverseMatrix = new Matrix4();\n\tvar _ray = new Ray();\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\tvar _vB = new Vector3();\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\tvar _tempB = new Vector3();\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\tvar _morphB = new Vector3();\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\tvar _uvB = new Vector2();\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\tif ( material === undefined ) { return; }\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere.copy( geometry.boundingSphere );\n\t\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t\t// Check boundingBox before continuing\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\n\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar a, b, c;\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\t\t\t\tvar i, j, il, jl;\n\t\t\t\tvar group, groupMaterial;\n\t\t\t\tvar start, end;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\ta = j;\n\t\t\t\t\t\t\t\tb = j + 1;\n\t\t\t\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\ta = i;\n\t\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar faces = geometry.faces;\n\t\t\t\tvar uvs;\n\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\n\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\n\n\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\tvar intersect;\n\n\t\tif ( material.side === BackSide ) {\n\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t} else {\n\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t}\n\n\t\tif ( intersect === null ) { return null; }\n\n\t\t_intersectionPointWorld.copy( point );\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\n\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\n\t}\n\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t\t_vA.fromBufferAttribute( position, a );\n\t\t_vB.fromBufferAttribute( position, b );\n\t\t_vC.fromBufferAttribute( position, c );\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tvar influence = morphInfluences[ i ];\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) { continue; }\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\t\tif ( intersection ) {\n\n\t\t\tif ( uv ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tif ( uv2 ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t}\n\n\t\t\tvar face = new Face3( a, b, c );\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\t\tintersection.face = face;\n\n\t\t}\n\n\t\treturn intersection;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\n\tvar _m1$3 = new Matrix4();\n\tvar _obj$1 = new Object3D();\n\tvar _offset$1 = new Vector3();\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Geometry,\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function ( angle ) {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\t_m1$3.makeRotationX( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateY: function ( angle ) {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\t_m1$3.makeRotationY( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateZ: function ( angle ) {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\t_m1$3.makeRotationZ( angle );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( x, y, z ) {\n\n\t\t\t// translate geometry\n\n\t\t\t_m1$3.makeTranslation( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( x, y, z ) {\n\n\t\t\t// scale geometry\n\n\t\t\t_m1$3.makeScale( x, y, z );\n\n\t\t\tthis.applyMatrix4( _m1$3 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlookAt: function ( vector ) {\n\n\t\t\t_obj$1.lookAt( vector );\n\n\t\t\t_obj$1.updateMatrix();\n\n\t\t\tthis.applyMatrix4( _obj$1.matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tif ( attributes.position === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\n\n\t\t\tfor ( var i = 0; i < positions.length; i += 3 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color().fromArray( colors, i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexColors = ( colors === undefined ) ? [] : [\n\t\t\t\t\tscope.colors[ a ].clone(),\n\t\t\t\t\tscope.colors[ b ].clone(),\n\t\t\t\t\tscope.colors[ c ].clone() ];\n\n\t\t\t\tvar vertexNormals = ( normals === undefined ) ? [] : [\n\t\t\t\t\tnew Vector3().fromArray( normals, a * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, b * 3 ),\n\t\t\t\t\tnew Vector3().fromArray( normals, c * 3 )\n\t\t\t\t];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, a * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, b * 2 ),\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, c * 2 )\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\n\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar i, il, j, jl, k, kl;\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tvar BoxGeometry = /*@__PURE__*/(function (Geometry) {\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tGeometry.call(this);\n\n\t\t\tthis.type = 'BoxGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\t\tthis.mergeVertices();\n\n\t\t}\n\n\t\tif ( Geometry ) BoxGeometry.__proto__ = Geometry;\n\t\tBoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t\treturn BoxGeometry;\n\t}(Geometry));\n\n\t// BoxBufferGeometry\n\n\tvar BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\t\tBufferGeometry.call(this);\n\n\t\t\tthis.type = 'BoxBufferGeometry';\n\n\t\t\tthis.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = this;\n\n\t\t\twidth = width || 1;\n\t\t\theight = height || 1;\n\t\t\tdepth = depth || 1;\n\n\t\t\t// segments\n\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t\t// buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\t// helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0;\n\n\t\t\t// build each side of the box geometry\n\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t\t// build geometry\n\n\t\t\tthis.setIndex( indices );\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\n\t\t\t\tvar ix, iy;\n\n\t\t\t\tvar vector = new Vector3();\n\n\t\t\t\t// generate vertices, normals and uvs\n\n\t\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t\t// uvs\n\n\t\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t\t// counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// indices\n\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t\t// faces\n\n\t\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t\t// increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t\t// calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\n\t\t\t\t// update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t\treturn BoxBufferGeometry;\n\t}(BufferGeometry));\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tfunction cloneUniforms( src ) {\n\n\t\tvar dst = {};\n\n\t\tfor ( var u in src ) {\n\n\t\t\tdst[ u ] = {};\n\n\t\t\tfor ( var p in src[ u ] ) {\n\n\t\t\t\tvar property = src[ u ][ p ];\n\n\t\t\t\tif ( property && ( property.isColor ||\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\t\tproperty.isTexture ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn dst;\n\n\t}\n\n\tfunction mergeUniforms( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t}\n\n\t// Legacy\n\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = {};\n\n\t\tfor ( var name in this.uniforms ) {\n\n\t\t\tvar uniform = this.uniforms[ name ];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tvar extensions = {};\n\n\t\tfor ( var key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\t\tObject3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar fov = 90, aspect = 1;\n\n\tfunction CubeCamera( near, far, cubeResolution, options ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\toptions = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLCubeRenderTarget( cubeResolution, options );\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\t\trenderer.render( scene, cameraPX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\t\trenderer.render( scene, cameraNX );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\t\trenderer.render( scene, cameraPY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\t\trenderer.render( scene, cameraNY );\n\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\t\trenderer.render( scene, cameraPZ );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\t\trenderer.render( scene, cameraNZ );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction WebGLCubeRenderTarget( size, options, dummy ) {\n\n\t\tif ( Number.isInteger( options ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );\n\n\t\t\toptions = dummy;\n\n\t\t}\n\n\t\tWebGLRenderTarget.call( this, size, size, options );\n\n\t}\n\n\tWebGLCubeRenderTarget.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tWebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = texture.format;\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tvar scene = new Scene();\n\n\t\tvar shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\n\n\t\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\n\n\t\t\t\t\"}\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\n\n\t\t\t\t\"\t#include <begin_vertex>\",\n\t\t\t\t\"\t#include <project_vertex>\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t\"uniform sampler2D tEquirect;\",\n\n\t\t\t\t\"varying vec3 vWorldDirection;\",\n\n\t\t\t\t\"#define RECIPROCAL_PI 0.31830988618\",\n\t\t\t\t\"#define RECIPROCAL_PI2 0.15915494\",\n\n\t\t\t\t\"void main() {\",\n\n\t\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\n\n\t\t\t\t\"\tvec2 sampleUV;\",\n\n\t\t\t\t\"\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\",\n\n\t\t\t\t\"\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\n\n\t\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\n\n\t\t\t\t\"}\"\n\n\t\t\t].join( '\\n' ),\n\t\t};\n\n\t\tvar material = new ShaderMaterial( {\n\n\t\t\ttype: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\n\n\t\tscene.add( mesh );\n\n\t\tvar camera = new CubeCamera( 1, 10, 1 );\n\n\t\tcamera.renderTarget = this;\n\t\tcamera.renderTarget.texture.name = 'CubeCameraTexture';\n\n\t\tcamera.update( renderer, scene );\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _sphere$1 = new Sphere();\n\tvar _vector$5 = new Vector3();\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromProjectionMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSprite: function ( sprite ) {\n\n\t\t\t_sphere$1.center.set( 0, 0, 0 );\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\t\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( _sphere$1 );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t// corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tuv2Transform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 },\n\t\t\tmaxMipLevel: { value: 0 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tlightProbe: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {}\n\t\t\t} },\n\n\t\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {}\n\t\t\t} },\n\n\t\t\tspotLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {}\n\t\t\t} },\n\n\t\t\tpointLightShadows: { value: [], properties: {\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\t\trotation: { value: 0.0 },\n\t\t\tmap: { value: null },\n\t\t\talphaMap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAnimation() {\n\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tif ( isAnimating === false ) { return; }\n\n\t\t\tanimationLoop( time, frame );\n\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tstart: function () {\n\n\t\t\t\tif ( isAnimating === true ) { return; }\n\t\t\t\tif ( animationLoop === null ) { return; }\n\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t\t\tisAnimating = true;\n\n\t\t\t},\n\n\t\t\tstop: function () {\n\n\t\t\t\tisAnimating = false;\n\n\t\t\t},\n\n\t\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\t\tanimationLoop = callback;\n\n\t\t\t},\n\n\t\t\tsetContext: function ( value ) {\n\n\t\t\t\tcontext = value;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = 5126;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = 5126;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = 5122;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = 5125;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = 5124;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = 5120;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = 5121;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\treturn buffers.get( attribute );\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tbuffers.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar ix, iy;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_maxMipLevel 8.0\\n#define cubeUV_minMipLevel 4.0\\n#define cubeUV_maxTileSize 256.0\\n#define cubeUV_minTileSize 16.0\\nfloat getFace(vec3 direction) {\\n    vec3 absDirection = abs(direction);\\n    float face = -1.0;\\n    if (absDirection.x > absDirection.z) {\\n      if (absDirection.x > absDirection.y)\\n        face = direction.x > 0.0 ? 0.0 : 3.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    } else {\\n      if (absDirection.z > absDirection.y)\\n        face = direction.z > 0.0 ? 2.0 : 5.0;\\n      else\\n        face = direction.y > 0.0 ? 1.0 : 4.0;\\n    }\\n    return face;\\n}\\nvec2 getUV(vec3 direction, float face) {\\n    vec2 uv;\\n    if (face == 0.0) {\\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\\n    } else if (face == 1.0) {\\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\\n    } else if (face == 2.0) {\\n      uv = direction.xy / abs(direction.z);\\n    } else if (face == 3.0) {\\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\\n    } else if (face == 4.0) {\\n      uv = direction.xz / abs(direction.y);\\n    } else {\\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\\n    }\\n    return 0.5 * (uv + 1.0);\\n}\\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\\n  float face = getFace(direction);\\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\\n  mipInt = max(mipInt, cubeUV_minMipLevel);\\n  float faceSize = exp2(mipInt);\\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\\n  vec2 f = fract(uv);\\n  uv += 0.5 - f;\\n  if (face > 2.0) {\\n    uv.y += faceSize;\\n    face -= 3.0;\\n  }\\n  uv.x += face * faceSize;\\n  if(mipInt < cubeUV_maxMipLevel){\\n    uv.y += 2.0 * cubeUV_maxTileSize;\\n  }\\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\\n  uv *= texelSize;\\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x += texelSize;\\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.y += texelSize;\\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  uv.x -= texelSize;\\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n  vec3 tm = mix(tl, tr, f.x);\\n  vec3 bm = mix(bl, br, f.x);\\n  return mix(tm, bm, f.y);\\n}\\n#define r0 1.0\\n#define v0 0.339\\n#define m0 -2.0\\n#define r1 0.8\\n#define v1 0.276\\n#define m1 -1.0\\n#define r4 0.4\\n#define v4 0.046\\n#define m4 2.0\\n#define r5 0.305\\n#define v5 0.016\\n#define m5 3.0\\n#define r6 0.21\\n#define v6 0.0038\\n#define m6 4.0\\nfloat roughnessToMip(float roughness) {\\n  float mip = 0.0;\\n  if (roughness >= r1) {\\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\\n  } else if (roughness >= r4) {\\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\\n  } else if (roughness >= r5) {\\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\\n  } else if (roughness >= r6) {\\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\\n  } else {\\n    mip = -2.0 * log2(1.16 * roughness);  }\\n  return mip;\\n}\\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\\n  float mipF = fract(mip);\\n  float mipInt = floor(mip);\\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\\n  if (mipF == 0.0) {\\n    return vec4(color0, 1.0);\\n  } else {\\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\\n    return vec4(mix(color0, color1, mipF), 1.0);\\n  }\\n}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\ttoon: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t\t},\n\n\t\tmatcap: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tmatcap: { value: null }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.sprite,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t\t},\n\n\t\tbackground: {\n\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\t\tt2D: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\n\t\t},\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: mergeUniforms( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t} ] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\tclearcoat: { value: 0 },\n\t\t\t\tclearcoatMap: { value: null },\n\t\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\t\tclearcoatNormalMap: { value: null },\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\n\t\t\t\ttransparency: { value: 0 },\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.background;\n\n\t\t\t// Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\t\tbackground = null;\n\n\t\t\t}\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundCubeMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\t}\n\n\t\t\t\tvar texture = background.isWebGLCubeRenderTarget ? background.texture : background;\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = texture;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== texture.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = texture.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\ttype: 'BackgroundMaterial',\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tbackground.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\t\tif ( currentBackground !== background ||\n\t\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t\t}\n\n\n\t\t\t\t// push to the pre-sorted opaque render list\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\t/* eslint-disable no-undef */\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( 34930 );\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\n\n\t\tvar maxAttributes = gl.getParameter( 34921 );\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\n\t\tvar maxVaryings = gl.getParameter( 36348 );\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\t\treturn {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\t\tmaxSamples: maxSamples\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, info ) {\n\n\t\tvar geometries = new WeakMap();\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tgeometries.delete( geometry );\n\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\twireframeAttributes.delete( buffergeometry );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries.get( geometry );\n\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries.set( geometry, buffergeometry );\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, 34963 );\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateWireframeAttribute( geometry ) {\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\t\tattribute.version = version;\n\n\t\t\tattributes.update( attribute, 34963 );\n\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\n\n\t\t\t//\n\n\t\t\twireframeAttributes.set( geometry, attribute );\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\n\n\t\t\tif ( currentAttribute ) {\n\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get( geometry );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\n\n\t\t\tif ( primcount === 0 ) { return; }\n\n\t\t\tvar extension, methodName;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\t\tinfo.update( count, mode, primcount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLInfo( gl ) {\n\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update( count, mode, instanceCount ) {\n\n\t\t\tinstanceCount = instanceCount || 1;\n\n\t\t\trender.calls ++;\n\n\t\t\tswitch ( mode ) {\n\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\trender.frame ++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\t// Remove current morphAttributes\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\t\tif ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }\n\t\t\t\t\tif ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\t// Add morphAttributes\n\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence ) {\n\n\t\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\tif ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }\n\t\t\t\t\t\tif ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }\n\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\t\tvar updateMap = new WeakMap();\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tupdateMap = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\tformat = format !== undefined ? format : RGBFormat;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Takahiro https://github.com/takahirox\n\t */\n\n\tfunction DataTexture2DArray( data, width, height, depth ) {\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\t/**\n\t * @author Artur Trzesiok\n\t */\n\n\tfunction DataTexture3D( data, width, height, depth ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tvar texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tTexture.call( this, null );\n\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\n\t\tthis.needsUpdate = true;\n\n\n\t}\n\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\n\tDataTexture3D.prototype.constructor = DataTexture3D;\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * @author tschw\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\tvar mat2array = new Float32Array( 4 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\tfunction arraysEqual( a, b ) {\n\n\t\tif ( a.length !== b.length ) { return false; }\n\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction copyArray( a, b ) {\n\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\t\ta[ i ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( textures, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t{ r[ i ] = textures.allocateTextureUnit(); }\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValueV1f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValueV2f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV3f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\n\t\t\t}\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\t\tcache[ 0 ] = v.r;\n\t\t\t\tcache[ 1 ] = v.g;\n\t\t\t\tcache[ 2 ] = v.b;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValueV4f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\t\t\t\tcache[ 3 ] = v.w;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValueM2( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat2array.set( elements );\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM3( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat3array.set( elements );\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValueM4( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\n\n\t\t\tmat4array.set( elements );\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT2DArray1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n\t}\n\n\tfunction setValueT3D1( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, textures ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValueV1i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\tfunction setValueV2i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV3i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValueV4i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) { return; }\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// uint\n\n\tfunction setValueV1ui( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) { return; }\n\n\t\tgl.uniform1ui( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\t\tcase 0x1405: return setValueV1ui; // UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\tfunction setValueV1fArray( gl, v ) {\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\tfunction setValueV1iArray( gl, v ) {\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV2iArray( gl, v ) {\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV3iArray( gl, v ) {\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t}\n\n\tfunction setValueV4iArray( gl, v ) {\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t}\n\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 2 );\n\n\t\tgl.uniform2fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV3fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 3 );\n\n\t\tgl.uniform3fv( this.addr, data );\n\n\t}\n\n\tfunction setValueV4fArray( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniform4fv( this.addr, data );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM3Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 9 );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\n\n\t}\n\n\tfunction setValueM4Array( gl, v ) {\n\n\t\tvar data = flatten( v, this.size, 16 );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6Array( gl, v, textures ) {\n\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( textures, n );\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\t\tthis.cache = new Float32Array( data.length );\n\n\t\t}\n\n\t\tcopyArray( cache, data );\n\n\t};\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile ( true ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35718 );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) { r.push( u ); }\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getShaderErrors( gl, shader, type ) {\n\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\n\n\t\tif ( status && log === '' ) { return ''; }\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource( shader );\n\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n\t}\n\n\tfunction generateExtensions( parameters ) {\n\n\t\tvar chunks = [\n\t\t\t( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) { continue; }\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, 35721 );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n\t}\n\n\tfunction replaceClippingPlaneNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n\t}\n\n\t// Resolve Includes\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes( string ) {\n\n\t\treturn string.replace( includePattern, includeReplacer );\n\n\t}\n\n\tfunction includeReplacer( match, include ) {\n\n\t\tvar string = ShaderChunk[ include ];\n\n\t\tif ( string === undefined ) {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t\treturn resolveIncludes( string );\n\n\t}\n\n\t// Unroll Loops\n\n\tvar deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tvar unrollLoopPattern = /#pragma unroll_loop_start[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}[\\s]+?#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops( string ) {\n\n\t\treturn string\n\t\t\t.replace( unrollLoopPattern, loopReplacer )\n\t\t\t.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );\n\n\t}\n\n\tfunction deprecatedLoopReplacer( match, start, end, snippet ) {\n\n\t\tconsole.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );\n\t\treturn loopReplacer( match, start, end, snippet );\n\n\t}\n\n\tfunction loopReplacer( match, start, end, snippet ) {\n\n\t\tvar string = '';\n\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\tstring += snippet\n\t\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t\t}\n\n\t\treturn string;\n\n\t}\n\n\t//\n\n\tfunction generatePrecision( parameters ) {\n\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\n\n\t\tif ( parameters.precision === \"highp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"mediump\" ) {\n\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\n\n\t\t} else if ( parameters.precision === \"lowp\" ) {\n\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\n\n\t\t}\n\n\t\treturn precisionstring;\n\n\t}\n\n\tfunction generateShadowMapTypeDefine( parameters ) {\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapTypeDefine( parameters ) {\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\n\t}\n\n\tfunction generateEnvMapModeDefine( parameters ) {\n\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapModeDefine;\n\n\t}\n\n\tfunction generateEnvMapBlendingDefine( parameters ) {\n\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( parameters.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\n\t}\n\n\tfunction WebGLProgram( renderer, cacheKey, parameters ) {\n\n\t\tvar gl = renderer.getContext();\n\n\t\tvar defines = parameters.defines;\n\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( parameters.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t\t' attribute mat4 instanceMatrix;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding || parameters.lightMapEncoding ) ?\n\t\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.lightMapEncoding ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = resolveIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\t\tfragmentShader = resolveIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\tif ( parameters.isWebGL2 && ! parameters.isRawShaderMaterial ) {\n\n\t\t\tvar isGLSL3ShaderMaterial = false;\n\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n\t\t\tif ( parameters.isShaderMaterial &&\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\n\n\t\t\t\tisGLSL3ShaderMaterial = true;\n\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\n\n\t\t\t}\n\n\t\t\t// GLSL 3.0 conversion\n\n\t\t\tprefixVertex = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define attribute in',\n\t\t\t\t'#define varying out',\n\t\t\t\t'#define texture2D texture'\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\t\tprefixFragment = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define varying in',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t\t'#define texture2D texture',\n\t\t\t\t'#define textureCube texture',\n\t\t\t\t'#define texture2DProj textureProj',\n\t\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\t// check for link errors\n\t\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tthis.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.detachShader( program, glVertexShader );\n\t\tgl.detachShader( program, glFragmentShader );\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t//\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount ++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\",\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\t\"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatMap\", \"clearcoatRoughnessMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\t\"sheen\"\n\t\t];\n\n\t\tfunction getShaderObject( material, shaderID ) {\n\n\t\t\tvar shaderobject;\n\n\t\t\tif ( shaderID ) {\n\n\t\t\t\tvar shader = ShaderLib[ shaderID ];\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tshaderobject = {\n\t\t\t\t\tname: material.type,\n\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn shaderobject;\n\n\t\t}\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar shaderobject = getShaderObject( material, shaderID );\n\t\t\tmaterial.onBeforeCompile( shaderobject, renderer );\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tisWebGL2: isWebGL2,\n\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: shaderobject.name,\n\n\t\t\t\tuniforms: shaderobject.uniforms,\n\t\t\t\tvertexShader: shaderobject.vertexShader,\n\t\t\t\tfragmentShader: shaderobject.fragmentShader,\n\t\t\t\tdefines: material.defines,\n\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial,\n\t\t\t\tisShaderMaterial: material.isShaderMaterial,\n\n\t\t\t\tprecision: precision,\n\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\t\tmatcap: !! material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\t\tenvMap: !! envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !! material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !! material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tsheen: !! material.sheen,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.get( 'EXT_frag_depth' ) !== null,\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.get( 'WEBGL_draw_buffers' ) !== null,\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) !== null,\n\n\t\t\t\tonBeforeCompile: material.onBeforeCompile\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCacheKey = function ( parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( parameters.fragmentShader );\n\t\t\t\tarray.push( parameters.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in parameters.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( parameters.isRawShaderMaterial === undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t\t}\n\n\t\t\t\tarray.push( renderer.outputEncoding );\n\t\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t\t}\n\n\t\t\tarray.push( parameters.onBeforeCompile.toString() );\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( parameters, cacheKey ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar preexistingProgram = programs[ p ];\n\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function ( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get( object ) {\n\n\t\t\tvar map = properties.get( object );\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set( object, map );\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tproperties.delete( object );\n\n\t\t}\n\n\t\tfunction update( object, key, value ) {\n\n\t\t\tproperties.get( object )[ key ] = value;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tproperties = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\t\treturn a.groupOrder - b.groupOrder;\n\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\n\tfunction WebGLRenderList() {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tvar defaultProgram = { id: - 1 };\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\t\t\trenderItemsIndex ++;\n\n\t\t\treturn renderItem;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t}\n\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\n\n\t\t}\n\n\t\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( customOpaqueSort || painterSortStable ); }\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( customTransparentSort || reversePainterSortStable ); }\n\n\t\t}\n\n\t\tfunction finish() {\n\n\t\t\t// Clear references from inactive renderItems in the list\n\n\t\t\tfor ( var i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\t\tvar renderItem = renderItems[ i ];\n\n\t\t\t\tif ( renderItem.id === null ) { break; }\n\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\tlists.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar cameras = lists.get( scene );\n\t\t\tvar list;\n\t\t\tif ( cameras === undefined ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists.set( scene, new WeakMap() );\n\t\t\t\tlists.get( scene ).set( camera, list );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tlist = cameras.get( camera );\n\t\t\t\tif ( list === undefined ) {\n\n\t\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\t\tcameras.set( camera, list );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction ShadowUniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n\t}\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar shadowCache = ShadowUniformsCache();\n\n\t\tvar state = {\n\n\t\t\tversion: 0,\n\n\t\t\thash: {\n\t\t\t\tdirectionalLength: - 1,\n\t\t\t\tpointLength: - 1,\n\t\t\t\tspotLength: - 1,\n\t\t\t\trectAreaLength: - 1,\n\t\t\t\themiLength: - 1,\n\n\t\t\t\tnumDirectionalShadows: - 1,\n\t\t\t\tnumPointShadows: - 1,\n\t\t\t\tnumSpotShadows: - 1\n\t\t\t},\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\n\t\t};\n\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tvar hash = state.hash;\n\n\t\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\t\thash.pointLength !== pointLength ||\n\t\t\t\thash.spotLength !== spotLength ||\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\t\thash.hemiLength !== hemiLength ||\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\t\tstate.version = nextVersion ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLRenderState() {\n\n\t\tvar lights = new WebGLLights();\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t}\n\n\t\tfunction pushLight( light ) {\n\n\t\t\tlightsArray.push( light );\n\n\t\t}\n\n\t\tfunction pushShadow( shadowLight ) {\n\n\t\t\tshadowsArray.push( shadowLight );\n\n\t\t}\n\n\t\tfunction setupLights( camera ) {\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\n\t\t\tlights: lights\n\t\t};\n\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderStates() {\n\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction onSceneDispose( event ) {\n\n\t\t\tvar scene = event.target;\n\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\n\n\t\t\trenderStates.delete( scene );\n\n\t\t}\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar renderState;\n\n\t\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates.set( scene, new WeakMap() );\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\n\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn renderState;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\trenderStates = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum(),\n\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_viewportSize = new Vector2(),\n\n\t\t\t_viewport = new Vector4(),\n\n\t\t\t_depthMaterials = [],\n\t\t\t_distanceMaterials = [],\n\n\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: { value: null },\n\t\t\t\tresolution: { value: new Vector2() },\n\t\t\t\tradius: { value: 4.0 }\n\t\t\t},\n\n\t\t\tvertexShader: vsm_vert,\n\n\t\t\tfragmentShader: vsm_frag\n\n\t\t} );\n\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\n\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute(\n\t\t\t\"position\",\n\t\t\tnew BufferAttribute(\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) { return; }\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\n\n\t\t\tif ( lights.length === 0 ) { return; }\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.setBlending( NoBlending );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );\n\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\n\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\n\n\t\t\t\t\t_viewport.set(\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t\t);\n\n\t\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t\t}\n\n\t\t\t\t// do blur pass for VSM\n\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t\t};\n\n\t\tfunction VSMPass( shadow, camera ) {\n\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\n\n\t\t\t// vertical pass\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t\t// horizonal pass\n\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\n\n\t\t}\n\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _depthMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDepthMaterial( {\n\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_depthMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\n\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\n\t\t\tvar material = _distanceMaterials[ index ];\n\n\t\t\tif ( material === undefined ) {\n\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\n\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\n\t\t\t\t} );\n\n\t\t\t\t_distanceMaterials[ index ] = material;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( light.isPointLight === true ) {\n\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( customMaterial === undefined ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry.isGeometry === true ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\n\n\t\t\t\t\tif ( material.skinning === true ) {\n\n\t\t\t\t\t\tuseSkinning = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif ( type === VSMShadowMap ) {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t\t} else {\n\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar enabledCapabilities = {};\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( 35661 );\n\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter( 7938 );\n\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, 10241, 9728 );\n\t\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( 2929 );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( 2884 );\n\n\t\tsetBlending( NoBlending );\n\n\t\t//\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tvar equationToGL = {};\n\t\tequationToGL[ AddEquation ] = 32774;\n\t\tequationToGL[ SubtractEquation ] = 32778;\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\tequationToGL[ MinEquation ] = 32775;\n\t\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t\t} else {\n\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar factorToGL = {};\n\t\tfactorToGL[ ZeroFactor ] = 0;\n\t\tfactorToGL[ OneFactor ] = 1;\n\t\tfactorToGL[ SrcColorFactor ] = 768;\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\n\t\tfactorToGL[ DstColorFactor ] = 774;\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending === NoBlending ) {\n\n\t\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\t\tdisable( 3042 );\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\t\tenable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = true;\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// custom blending\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\n\t\t}\n\n\t\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( 2884 )\n\t\t\t\t: enable( 2884 );\n\n\t\t\tvar flipSided = ( material.side === BackSide );\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\n\n\t\t\tsetFlipSided( flipSided );\n\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t\t? setBlending( NoBlending )\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest( stencilWrite );\n\t\t\tif ( stencilWrite ) {\n\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t\t}\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( 2884 );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 2884 );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( 32823 );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 32823 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( 3089 );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( 3089 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unbindTexture() {\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage3D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tenabledCapabilities = {};\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\t\tvar _canvas;\n\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\t\t} catch ( err ) {\n\n\t\t\t// Ignore any errors\n\n\t\t}\n\n\t\tfunction createCanvas( width, height ) {\n\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\t\treturn useOffscreenCanvas ?\n\t\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t}\n\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\t\tvar scale = 1;\n\n\t\t\t// handle case if texture exceeds max size\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t}\n\n\t\t\t// only perform resize if necessary\n\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t\t// only perform resize for certain image types\n\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\n\t\t\t\t\tvar width = floor( scale * image.width );\n\t\t\t\t\tvar height = floor( scale * image.height );\n\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\n\n\t\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\t\treturn canvas;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( isWebGL2 ) { return false; }\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t\t_gl.generateMipmap( target );\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t\t}\n\n\t\tfunction getInternalFormat( internalFormatName, glFormat, glType ) {\n\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\n\n\t\t\tif ( internalFormatName !== null ) {\n\n\t\t\t\tif ( _gl[ internalFormatName ] !== undefined ) { return _gl[ internalFormatName ]; }\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif ( glFormat === 6403 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6407 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\n\n\t\t\t}\n\n\t\t\tif ( glFormat === 6408 ) {\n\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\n\n\t\t\t}\n\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\t\treturn 9728;\n\n\t\t\t}\n\n\t\t\treturn 9729;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\t_videoTextures.delete( texture );\n\n\t\t\t}\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) { return; }\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) { _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer ); }\n\t\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer ); }\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\n\t\t\ttextureUnits = 0;\n\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture2DArray( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTexture3D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tif ( texture.image.length !== 6 ) { return; }\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\n\t\t\t\tvar isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\t\tvar mipmaps;\n\n\t\t\t\tif ( isCompressed ) {\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t\t} else {\n\n\t\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tvar wrappingToGL = {};\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\n\n\t\tvar filterToGL = {};\n\t\tfilterToGL[ NearestFilter ] = 9728;\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\n\t\tfilterToGL[ LinearFilter ] = 9729;\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\n\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\t\tif ( supportsMips ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction initTexture( textureProperties, texture ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tvar textureType = 3553;\n\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\n\n\t\t\tinitTexture( textureProperties, texture );\n\n\t\t\tstate.activeTexture( 33984 + slot );\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\t\tglInternalFormat = 35056;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// validation checks for WebGL 1\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\tvar glInternalFormat = 33189;\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\n\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\t// Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif ( isWebGL2 && renderTarget.texture.format === RGBFormat && ( renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType ) ) {\n\n\t\t\t\trenderTarget.texture.format = RGBAFormat;\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );\n\n\t\t\t}\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 34067, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( 3553, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\n\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer ); // see #18905\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t\t}\n\n\t\tfunction updateVideoTexture( texture ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\t// Check the last frame we updated the VideoTexture\n\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t\t_videoTextures.set( texture, frame );\n\t\t\t\ttexture.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// backwards compatibility\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTexture2D = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( texture, slot );\n\n\t\t}\n\n\t\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\t\tif ( texture && texture.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\twarnedTextureCube = true;\n\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\n\t\t\t}\n\n\t\t\t// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture\n\t\t\t// TODO: unify these code paths\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\tsetTextureCube( texture, slot );\n\n\t\t\t} else {\n\n\t\t\t\t// assumed: texture property of THREE.WebGLCubeRenderTarget\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\n\t}\n\n\t/**\n\t * @author thespite / http://www.twitter.com/thespite\n\t */\n\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\n\n\t\t\tif ( p === ByteType ) { return 5120; }\n\t\t\tif ( p === ShortType ) { return 5122; }\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\n\t\t\tif ( p === IntType ) { return 5124; }\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\n\t\t\tif ( p === FloatType ) { return 5126; }\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\n\t\t\tif ( p === RGBFormat ) { return 6407; }\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\n\t\t\tif ( p === DepthFormat ) { return 6402; }\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\n\t\t\tif ( p === RedFormat ) { return 6403; }\n\n\t\t\t// WebGL2 formats.\n\n\t\t\tif ( p === RedIntegerFormat ) { return 36244; }\n\t\t\tif ( p === RGFormat ) { return 33319; }\n\t\t\tif ( p === RGIntegerFormat ) { return 33320; }\n\t\t\tif ( p === RGBIntegerFormat ) { return 36248; }\n\t\t\tif ( p === RGBAIntegerFormat ) { return 36249; }\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_ETC2_Format ) { return extension.COMPRESSED_RGB8_ETC2; }\n\t\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) { return extension.COMPRESSED_RGBA8_ETC2_EAC; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||\n\t\t\t\tp === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\t// TODO Complete?\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group,\n\n\t\tisGroup: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebXRManager( renderer, gl ) {\n\n\t\tvar scope = this;\n\n\t\tvar session = null;\n\n\t\tvar framebufferScaleFactor = 1.0;\n\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\n\t\tvar pose = null;\n\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map();\n\n\t\t//\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = {};\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\tif ( controller.targetRay === undefined ) {\n\n\t\t\t\tcontroller.targetRay = new Group();\n\t\t\t\tcontroller.targetRay.matrixAutoUpdate = false;\n\t\t\t\tcontroller.targetRay.visible = false;\n\n\t\t\t}\n\n\t\t\treturn controller.targetRay;\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = {};\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\tif ( controller.grip === undefined ) {\n\n\t\t\t\tcontroller.grip = new Group();\n\t\t\t\tcontroller.grip.matrixAutoUpdate = false;\n\t\t\t\tcontroller.grip.visible = false;\n\n\t\t\t}\n\n\t\t\treturn controller.grip;\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tvar controller = inputSourcesMap.get( event.inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: event.type } );\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.dispatchEvent( { type: event.type } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tcontroller.targetRay.visible = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tcontroller.grip.visible = false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tinputSourcesMap.clear();\n\n\t\t\t//\n\n\t\t\trenderer.setFramebuffer( null );\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tfunction onRequestReferenceSpace( value ) {\n\n\t\t\treferenceSpace = value;\n\n\t\t\tanimation.setContext( session );\n\t\t\tanimation.start();\n\n\t\t\tscope.isPresenting = true;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\t// Warn if function is used while presenting\n\t\t\tif ( scope.isPresenting == true ) {\n\n\t\t\t\tconsole.warn( \"WebXRManager: Cannot change framebuffer scale while presenting VR content\" );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn referenceSpace;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t\tvar attributes = gl.getContextAttributes();\n\n\t\t\t\tvar layerInit = {\n\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t};\n\n\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\tvar baseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\tsession.updateRenderState( { baseLayer: baseLayer } );\n\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t\t//\n\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction updateInputSources( event ) {\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\t// Assign inputSources to available controllers\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t\t}\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( var i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tvar inputSource = event.removed[ i ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( var i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tvar inputSource = event.added[ i ];\n\t\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * @author jsantell / https://www.jsantell.com/\n\t\t *\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tvar zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tvar xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + ( ipd - xOffset );\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t}\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update camera and its children\n\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tvar children = camera.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tvar view = views[ i ];\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar inputSource = inputSources[ i ];\n\n\t\t\t\tvar inputPose = null;\n\t\t\t\tvar gripPose = null;\n\n\t\t\t\tif ( inputSource ) {\n\n\t\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\t\tcontroller.targetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\t\t\tcontroller.targetRay.matrix.decompose( controller.targetRay.position, controller.targetRay.rotation, controller.targetRay.scale );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( controller.grip && inputSource.gripSpace ) {\n\n\t\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\t\tcontroller.grip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\t\tcontroller.grip.matrix.decompose( controller.grip.position, controller.grip.rotation, controller.grip.scale );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.visible = inputPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.visible = gripPose !== null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time, frame ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null;\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.outputEncoding = LinearEncoding;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t\t_isContextLost = false,\n\n\t\t\t// internal state cache\n\n\t\t\t_framebuffer = null,\n\n\t\t\t_currentActiveCubeFace = 0,\n\t\t\t_currentActiveMipmapLevel = 0,\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\n\t\t\t// geometry and program caching\n\n\t\t\t_currentGeometryProgram = {\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false\n\t\t\t},\n\n\t\t\t_currentCamera = null,\n\t\t\t_currentArrayCamera = null,\n\n\t\t\t_currentViewport = new Vector4(),\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\n\t\t\t//\n\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\n\t\t\t_pixelRatio = 1,\n\t\t\t_opaqueSort = null,\n\t\t\t_transparentSort = null,\n\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\n\t\t\t// frustum\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t// clipping\n\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\n\t\t\t// camera matrices cache\n\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_vector3 = new Vector3();\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\n\t\t\t\txrCompatible: true\n\t\t\t};\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, attributes, geometries, objects;\n\t\tvar programCache, renderLists, renderStates;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tvar utils;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\t\textensions.get( 'OES_texture_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates();\n\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// xr\n\n\t\tvar xr = new WebXRManager( _this, _gl );\n\n\t\tthis.xr = xr;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.loseContext(); }\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) { extension.restoreContext(); }\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) { return; }\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tif ( xr.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\t\ttarget = new Vector4();\n\n\t\t\t}\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\tthis.setOpaqueSort = function ( method ) {\n\n\t\t\t_opaqueSort = method;\n\n\t\t};\n\n\t\tthis.setTransparentSort = function ( method ) {\n\n\t\t\t_transparentSort = method;\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tobjects.dispose();\n\n\t\t\txr.dispose();\n\n\t\t\tanimation.stop();\n\n\t\t\tthis.forceContextLoss();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors ) {\n\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\n\n\t\t\t\tstate.enableAttribute( programAttributes.color );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( 4, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tvar tempScene = new Scene();\n\n\t\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\t\tif ( scene === null ) { scene = tempScene; } // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\n\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\n\t\t\t\t_currentGeometryProgram.program = program.id;\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( material.morphTargets || material.morphNormals ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tif ( position === undefined || position.count === 0 ) { return; }\n\n\t\t\t} else if ( index.count === 0 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( object, geometry, material, program );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( 34963, attribute.buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) { return; }\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( 0 );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( object, geometry, material, program ) {\n\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\n\n\t\t\t}\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\n\n\t\t\t\t\t\tvar attribute = attributes.get( object.instanceMatrix );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 0, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 1, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 2, 1 );\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 3, 1 );\n\n\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tvar compiled = {};\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.material ) {\n\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( object.material[ i ].uuid in compiled === false ) {\n\n\t\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene, object );\n\t\t\t\t\t\t\t\tcompiled[ object.material[ i ].uuid ] = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( object.material.uuid in compiled === false ) {\n\n\t\t\t\t\t\tinitMaterial( object.material, scene, object );\n\t\t\t\t\t\tcompiled[ object.material.uuid ] = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( xr.isPresenting ) { return; }\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop( callback );\n\n\t\t\tanimation.start();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t\t}\n\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\t\tforceClear = arguments[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost ) { return; }\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t_currentGeometryProgram.program = null;\n\t\t\t_currentGeometryProgram.wireframe = false;\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\n\n\t\t\tif ( xr.enabled && xr.isPresenting ) {\n\n\t\t\t\tcamera = xr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) { _clipping.beginShadows(); }\n\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tif ( _clippingEnabled ) { _clipping.endShadows(); }\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset ) { this.info.reset(); }\n\n\t\t\tif ( renderTarget !== undefined ) {\n\n\t\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\t// _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) { return; }\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t\t_currentGeometryProgram.program = null;\n\t\t\t\t_currentGeometryProgram.wireframe = false;\n\n\t\t\t\trenderObjectImmediate( object, program );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t}\n\n\t\tfunction initMaterial( material, scene, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tvar lightsStateVersion = lights.state.version;\n\n\t\t\tvar parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object );\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\t\tprogramChange = false;\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\t\tmaterialProperties.outputEncoding = _this.outputEncoding;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = scene.fog;\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, scene, material, object ) {\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\t\tvar materialProperties = properties.get( material );\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.environment !== environment ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t} else if ( materialProperties.outputEncoding !== _this.outputEncoding ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material, environment );\n\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material, environment );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material, environment );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsMatcap( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\t\tm_uniforms.color.value.copy( material.color );\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t\t}\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material, environment ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tvar envMap = material.envMap || environment;\n\n\t\t\tif ( envMap ) {\n\n\t\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( envMap ).__maxMipLevel;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t\t} else if ( material.lightMap ) {\n\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material, environment ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap || environment ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material, environment ) {\n\n\t\t\trefreshUniformsStandard( uniforms, material, environment );\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniforms.transparency.value = material.transparency;\n\n\t\t}\n\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\t\tif ( material.matcap ) {\n\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\t//\n\t\tthis.setFramebuffer = function ( value ) {\n\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\n\n\t\t\t_framebuffer = value;\n\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace || 0 ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\t\tif ( level === undefined ) { level = 0; }\n\n\t\t\tvar levelScale = Math.pow( 2, - level );\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\n\t\t\tvar glFormat = utils.convert( texture.format );\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tObject.assign( FogExp2.prototype, {\n\n\t\tisFogExp2: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new FogExp2( this.color, this.density );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tObject.assign( Fog.prototype, {\n\n\t\tisFog: true,\n\n\t\tclone: function () {\n\n\t\t\treturn new Fog( this.color, this.near, this.far );\n\n\t\t},\n\n\t\ttoJSON: function ( /* meta */ ) {\n\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) { this.version ++; }\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetUsage: function ( value ) {\n\n\t\t\tthis.usage = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tfor ( var i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$6.x = this.getX( i );\n\t\t\t\t_vector$6.y = this.getY( i );\n\t\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *  rotation: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _geometry;\n\n\tvar _intersectPoint = new Vector3();\n\tvar _worldScale = new Vector3();\n\tvar _mvPosition = new Vector3();\n\n\tvar _alignedPosition = new Vector2();\n\tvar _rotatedPosition = new Vector2();\n\tvar _viewWorldMatrix = new Matrix4();\n\n\tvar _vA$1 = new Vector3();\n\tvar _vB$1 = new Vector3();\n\tvar _vC$1 = new Vector3();\n\n\tvar _uvA$1 = new Vector2();\n\tvar _uvB$1 = new Vector2();\n\tvar _uvC$1 = new Vector2();\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tvar float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tif ( raycaster.camera === null ) {\n\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\t\t\tif ( rotation !== 0 ) {\n\n\t\t\t\tcos = Math.cos( rotation );\n\t\t\t\tsin = Math.sin( rotation );\n\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t\t_uvA$1.set( 0, 0 );\n\t\t\t_uvB$1.set( 1, 0 );\n\t\t\t_uvC$1.set( 1, 1 );\n\n\t\t\t// check first triangle\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\n\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t\t_uvB$1.set( 0, 1 );\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\n\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\n\n\t\t\treturn this;\n\n\t\t}\n\n\n\t} );\n\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t\t// to check if rotation is not zero\n\t\tif ( sin !== undefined ) {\n\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t\t} else {\n\n\t\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t\t}\n\n\n\t\tvertexPosition.copy( mvPosition );\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y;\n\n\t\t// transform to world space\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n\t}\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _v1$4 = new Vector3();\n\tvar _v2$2 = new Vector3();\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tisLOD: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) { distance = 0; }\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCurrentLevel: function () {\n\n\t\t\treturn this._currentLevel;\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn levels[ i - 1 ].object;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 0 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 ) / camera.zoom;\n\n\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar vector = new Vector4();\n\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\t\tvector.x = skinWeight.getX( i );\n\t\t\t\tvector.y = skinWeight.getY( i );\n\t\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tvar _offsetMatrix = new Matrix4();\n\tvar _identityMatrix = new Matrix4();\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\tthis.frame = - 1;\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone, i, il;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t// flatten bone matrices to array\n\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t},\n\n\t\tgetBoneByName: function ( name ) {\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone.name === name ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tdispose: function ( ) {\n\n\t\t\tif ( this.boneTexture ) {\n\n\t\t\t\tthis.boneTexture.dispose();\n\n\t\t\t\tthis.boneTexture = undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh( geometry, material, count ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: InstancedMesh,\n\n\t\tisInstancedMesh: true,\n\n\t\tgetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\n\t\t\tif ( _mesh.material === undefined ) { return; }\n\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t\t// calculate the world matrix for each instance\n\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t\t// the mesh represents this single instance\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t\t// process the result of raycast\n\n\t\t\t\tif ( _instanceIntersects.length > 0 ) {\n\n\t\t\t\t\t_instanceIntersects[ 0 ].instanceId = instanceId;\n\t\t\t\t\t_instanceIntersects[ 0 ].object = this;\n\n\t\t\t\t\tintersects.push( _instanceIntersects[ 0 ] );\n\n\t\t\t\t\t_instanceIntersects.length = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetMatrixAt: function ( index, matrix ) {\n\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start = new Vector3();\n\tvar _end = new Vector3();\n\tvar _inverseMatrix$1 = new Matrix4();\n\tvar _ray$1 = new Ray();\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial();\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tlineDistances[ 0 ] = 0;\n\n\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Line.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\n\t\t\t_sphere$2.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localThresholdSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > localThresholdSq ) { continue; }\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localThresholdSq ) { continue; }\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _start$1 = new Vector3();\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true,\n\n\t\tcomputeLineDistances: function () {\n\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t_start$1.copy( vertices[ i ] );\n\t\t\t\t\t_end$1.copy( vertices[ i + 1 ] );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t *\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\tvar _ray$2 = new Ray();\n\tvar _sphere$3 = new Sphere();\n\tvar _position$1 = new Vector3();\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial();\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: function ( raycaster, intersects ) {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\n\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\n\t\t\t_sphere$3.radius += threshold;\n\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\n\n\t\t\t//\n\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t_position$1.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\ttestPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\ttestPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\n\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\n\n\t\t\tintersects.push( {\n\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\t\tconstructor: VideoTexture,\n\n\t\tisVideoTexture: true,\n\n\t\tupdate: function () {\n\n\t\t\tvar video = this.image;\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar i, j, l, o, ol;\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\t\tvar vertex;\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar position, indices, groups;\n\t\t\tvar group, start, count;\n\t\t\tvar index1, index2;\n\n\t\t\tvertex = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\t\t\t\tindices = geometry.index;\n\t\t\t\tgroups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\t\tstart = group.start;\n\t\t\t\t\tcount = group.count;\n\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( key in edges ) {\n\n\t\t\t\t\te = edges[ key ];\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tvar i, j;\n\n\t\tif ( func.length < 3 ) {\n\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t\t}\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\tvar a = i * sliceCount + j;\n\t\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\n\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\n\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t, 0, - r, t,\n\t\t\t 0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t r, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar P = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\tTubeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, j;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * Port from https://github.com/mapbox/earcut (v2.1.5)\n\t */\n\n\tvar Earcut = {\n\n\t\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\t\tdim = dim || 2;\n\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\t\ttriangles = [];\n\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\n\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\n\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\t\tif ( data.length > 80 * dim ) {\n\n\t\t\t\tminX = maxX = data[ 0 ];\n\t\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\t\tx = data[ i ];\n\t\t\t\t\ty = data[ i + 1 ];\n\t\t\t\t\tif ( x < minX ) { minX = x; }\n\t\t\t\t\tif ( y < minY ) { minY = y; }\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\n\n\t\t\t\t}\n\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t\t}\n\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\t\treturn triangles;\n\n\t\t}\n\n\t};\n\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\tfunction linkedList( data, start, end, dim, clockwise ) {\n\n\t\tvar i, last;\n\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t} else {\n\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\n\n\t\t}\n\n\t\tif ( last && equals( last, last.next ) ) {\n\n\t\t\tremoveNode( last );\n\t\t\tlast = last.next;\n\n\t\t}\n\n\t\treturn last;\n\n\t}\n\n\t// eliminate colinear or duplicate points\n\tfunction filterPoints( start, end ) {\n\n\t\tif ( ! start ) { return start; }\n\t\tif ( ! end ) { end = start; }\n\n\t\tvar p = start,\n\t\t\tagain;\n\t\tdo {\n\n\t\t\tagain = false;\n\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif ( p === p.next ) { break; }\n\t\t\t\tagain = true;\n\n\t\t\t} else {\n\n\t\t\t\tp = p.next;\n\n\t\t\t}\n\n\t\t} while ( again || p !== end );\n\n\t\treturn end;\n\n\t}\n\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\t\tif ( ! ear ) { return; }\n\n\t\t// interlink polygon nodes in z-order\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\n\n\t\tvar stop = ear,\n\t\t\tprev, next;\n\n\t\t// iterate through ears, slicing them one by one\n\t\twhile ( ear.prev !== ear.next ) {\n\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push( prev.i / dim );\n\t\t\t\ttriangles.push( ear.i / dim );\n\t\t\t\ttriangles.push( next.i / dim );\n\n\t\t\t\tremoveNode( ear );\n\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tear = next;\n\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\t\tif ( ear === stop ) {\n\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif ( ! pass ) {\n\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\tfunction isEar( ear ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// now make sure we don't have other points inside the potential ear\n\t\tvar p = ear.next.next;\n\n\t\twhile ( p !== ear.prev ) {\n\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\n\n\t\t// triangle bbox; min & max are calculated like this for speed\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t\t// z-order range for the current triangle bbox;\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t\tvar p = ear.prevZ,\n\t\t\tn = ear.nextZ;\n\n\t\t// look for points inside the triangle in both directions\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\t// look for remaining points in decreasing z-order\n\t\twhile ( p && p.z >= minZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\n\t\t\tp = p.prevZ;\n\n\t\t}\n\n\t\t// look for remaining points in increasing z-order\n\t\twhile ( n && n.z <= maxZ ) {\n\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\n\t\t\tn = n.nextZ;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// go through all polygon nodes and cure small local self-intersections\n\tfunction cureLocalIntersections( start, triangles, dim ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tvar a = p.prev,\n\t\t\t\tb = p.next.next;\n\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\t\ttriangles.push( a.i / dim );\n\t\t\t\ttriangles.push( p.i / dim );\n\t\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t\t// remove two nodes involved\n\t\t\t\tremoveNode( p );\n\t\t\t\tremoveNode( p.next );\n\n\t\t\t\tp = start = b;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn p;\n\n\t}\n\n\t// try splitting polygon into two and triangulate them independently\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\t\tdo {\n\n\t\t\tvar b = a.next.next;\n\t\t\twhile ( b !== a.prev ) {\n\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t\t// filter colinear points around the cuts\n\t\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t\t// run earcut on each half\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\n\t\t\t}\n\n\t\t\ta = a.next;\n\n\t\t} while ( a !== start );\n\n\t}\n\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\t\tvar queue = [],\n\t\t\ti, len, start, end, list;\n\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\t\tstart = holeIndices[ i ] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\t\tlist = linkedList( data, start, end, dim, false );\n\t\t\tif ( list === list.next ) { list.steiner = true; }\n\t\t\tqueue.push( getLeftmost( list ) );\n\n\t\t}\n\n\t\tqueue.sort( compareX );\n\n\t\t// process holes from left to right\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\t\teliminateHole( queue[ i ], outerNode );\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t\t}\n\n\t\treturn outerNode;\n\n\t}\n\n\tfunction compareX( a, b ) {\n\n\t\treturn a.x - b.x;\n\n\t}\n\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\tfunction eliminateHole( hole, outerNode ) {\n\n\t\touterNode = findHoleBridge( hole, outerNode );\n\t\tif ( outerNode ) {\n\n\t\t\tvar b = splitPolygon( outerNode, hole );\n\t\t\tfilterPoints( b, b.next );\n\n\t\t}\n\n\t}\n\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\tfunction findHoleBridge( hole, outerNode ) {\n\n\t\tvar p = outerNode,\n\t\t\thx = hole.x,\n\t\t\thy = hole.y,\n\t\t\tqx = - Infinity,\n\t\t\tm;\n\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\t\tdo {\n\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\t\tqx = x;\n\t\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== outerNode );\n\n\t\tif ( ! m ) { return null; }\n\n\t\tif ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint\n\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\tmx = m.x,\n\t\t\tmy = m.y,\n\t\t\ttanMin = Infinity,\n\t\t\ttan;\n\n\t\tp = m.next;\n\n\t\twhile ( p !== stop ) {\n\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn m;\n\n\t}\n\n\t// interlink polygon nodes in z-order\n\tfunction indexCurve( start, minX, minY, invSize ) {\n\n\t\tvar p = start;\n\t\tdo {\n\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\n\t\tsortLinked( p );\n\n\t}\n\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\tfunction sortLinked( list ) {\n\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\n\t\t\tinSize = 1;\n\n\t\tdo {\n\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile ( p ) {\n\n\t\t\t\tnumMerges ++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\t\tpSize ++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif ( ! q ) { break; }\n\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize --;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\n\t\t\t\t\telse { list = e; }\n\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\n\t\t} while ( numMerges > 1 );\n\n\t\treturn list;\n\n\t}\n\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\tfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * ( x - minX ) * invSize;\n\t\ty = 32767 * ( y - minY ) * invSize;\n\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\t\treturn x | ( y << 1 );\n\n\t}\n\n\t// find the leftmost node of a polygon ring\n\tfunction getLeftmost( start ) {\n\n\t\tvar p = start,\n\t\t\tleftmost = start;\n\t\tdo {\n\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn leftmost;\n\n\t}\n\n\t// check if a point lies within a convex triangle\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n\t}\n\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\tfunction isValidDiagonal( a, b ) {\n\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\t\t   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n\t}\n\n\t// signed area of a triangle\n\tfunction area( p, q, r ) {\n\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n\t}\n\n\t// check if two points are equal\n\tfunction equals( p1, p2 ) {\n\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\n\t}\n\n\t// check if two segments intersect\n\tfunction intersects( p1, q1, p2, q2 ) {\n\n\t\tif ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t\t   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n\t}\n\n\t// check if a polygon diagonal intersects any polygon segments\n\tfunction intersectsPolygon( a, b ) {\n\n\t\tvar p = a;\n\t\tdo {\n\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn false;\n\n\t}\n\n\t// check if a polygon diagonal is locally inside the polygon\n\tfunction locallyInside( a, b ) {\n\n\t\treturn area( a.prev, a, a.next ) < 0 ?\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n\t}\n\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\tfunction middleInside( a, b ) {\n\n\t\tvar p = a,\n\t\t\tinside = false,\n\t\t\tpx = ( a.x + b.x ) / 2,\n\t\t\tpy = ( a.y + b.y ) / 2;\n\t\tdo {\n\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\t\t{ inside = ! inside; }\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn inside;\n\n\t}\n\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\tfunction splitPolygon( a, b ) {\n\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\t\tan = a.next,\n\t\t\tbp = b.prev;\n\n\t\ta.next = b;\n\t\tb.prev = a;\n\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\n\t\treturn b2;\n\n\t}\n\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\tfunction insertNode( i, x, y, last ) {\n\n\t\tvar p = new Node( i, x, y );\n\n\t\tif ( ! last ) {\n\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\n\t\t} else {\n\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\n\t\t}\n\n\t\treturn p;\n\n\t}\n\n\tfunction removeNode( p ) {\n\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\n\n\t}\n\n\tfunction Node( i, x, y ) {\n\n\t\t// vertex index in coordinates array\n\t\tthis.i = i;\n\n\t\t// vertex coordinates\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\t// previous and next vertex nodes in a polygon ring\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\n\t\t// z-order curve value\n\t\tthis.z = null;\n\n\t\t// previous and next nodes in z-order\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null;\n\n\t\t// indicates whether this is a steiner point\n\t\tthis.steiner = false;\n\n\t}\n\n\tfunction signedArea( data, start, end, dim ) {\n\n\t\tvar sum = 0;\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\t\tj = i;\n\n\t\t}\n\n\t\treturn sum;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\t\tvar holeIndices = []; // array of hole indices\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\taddContour( vertices, contour );\n\n\t\t\t//\n\n\t\t\tvar holeIndex = contour.length;\n\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\t\tholeIndices.push( holeIndex );\n\t\t\t\tholeIndex += holes[ i ].length;\n\t\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t\t}\n\n\t\t\treturn faces;\n\n\t\t}\n\n\t};\n\n\tfunction removeDupEndPts( points ) {\n\n\t\tvar l = points.length;\n\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.pop();\n\n\t\t}\n\n\t}\n\n\tfunction addContour( vertices, contour ) {\n\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\tvertices.push( contour[ i ].x );\n\t\t\tvertices.push( contour[ i ].y );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  depth: <float>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\tExtrudeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tvar scope = this;\n\n\t\tvar verticesArray = [];\n\t\tvar uvArray = [];\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar placeholder = [];\n\n\t\t\t// options\n\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tvar extrudePath = options.extrudePath;\n\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar extrudePts, extrudeByPath = false;\n\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tvar ahole, h, hl; // looping of holes\n\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tvar b, bs, t, z,\n\t\t\t\tvert, vlen = vertices.length,\n\t\t\t\tface, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tvar contourMovements = [];\n\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tvar holesMovements = [],\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) { j = 0; }\n\t\t\t\t\tif ( k === il ) { k = 0; }\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tvar s;\n\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\tvar layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tvar j, k;\n\t\t\t\ti = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = i - 1;\n\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tvar s = 0,\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t//\n\n\tvar WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tfunction toJSON( shapes, options, data ) {\n\n\t\t//\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n\t *  bevelOffset: <float> // how far from text outline does bevel start\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\n\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\n\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tvar ix, iy;\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tvar uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 0.5;\n\t\touterRadius = outerRadius || 1;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\tShapeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar i, l, shapeHole;\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\tShapeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t//\n\n\tfunction toJSON$1( shapes, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\theight = height || 1;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\n\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, s;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  color: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.vertexTangents = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.vertexTangents = source.vertexTangents;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  clearcoat: <float>,\n\t *  clearcoatMap: new THREE.Texture( <Image> ),\n\t *  clearcoatRoughness: <float>,\n\t *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *  clearcoatNormalScale: <Vector2>,\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *  reflectivity: <float>,\n\t *\n\t *  sheen: <Color>,\n\t *\n\t *  transparency: <float>\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transparency = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif ( source.sheen ) {\n\n\t\t\tthis.sheen = ( this.sheen || new Color() ).copy( source.sheen );\n\n\t\t} else {\n\n\t\t\tthis.sheen = null;\n\n\t\t}\n\n\t\tthis.transparency = source.transparency;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.MultiplyOperation,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *  gradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( Material.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  matcap: new THREE.Texture( <Image> ),\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshMatcapMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) { return; } // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) { return; } // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t},\n\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\n\n\t\t\tfps = fps || 30;\n\n\t\t\tvar clip = sourceClip.clone();\n\n\t\t\tclip.name = name;\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tvar track = clip.tracks[ i ];\n\t\t\t\tvar valueSize = track.getValueSize();\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\n\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\n\n\t\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( times.length === 0 ) { continue; }\n\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\t\ttracks.push( track );\n\n\t\t\t}\n\n\t\t\tclip.tracks = tracks;\n\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// shift all tracks such that clip begins at t=0\n\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t// DECLARE ALIAS AFTER assign prototype\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Static methods\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( KeyframeTrack.prototype, {\n\n\t\tconstructor: KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t\t++ from;\n\n\t\t\t}\n\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t\t-- to;\n\n\t\t\t}\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) {\n\n\t\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\t\tfrom = to - 1;\n\n\t\t\t\t}\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice( this.times ),\n\t\t\t\tvalues = AnimationUtils.arraySlice( this.values ),\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tkeep = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t} else {\n\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\t\treturn track;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrack.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n\tfunction parseKeyframeTrack( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks, duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) { return; }\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tvar index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\n\t}\n\n\tObject.assign( Loader.prototype, {\n\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\n\n\t\tparse: function ( /* data */ ) {},\n\n\t\tsetCrossOrigin: function ( crossOrigin ) {\n\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( path ) {\n\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResourcePath: function ( resourcePath ) {\n\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FileLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\t\tdata = decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = this.response;\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\n\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\n\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( value ) {\n\n\t\t\tthis.requestHeader = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io/\n\t */\n\n\tfunction AnimationLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AnimationLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CompressedTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: DataTextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\t\tif ( ! texData ) { return; }\n\n\t\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t\t}\n\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ImageLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\tfunction onImageLoad() {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\tfunction onImageError( event ) {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tif ( onError ) { onError( event ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: CubeTextureLoader,\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction TextureLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: TextureLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = image;\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( MathUtils.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\n\tEllipseCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension || 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t};\n\n\tSplineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = this.curves[ i ];\n\t\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = json.curves[ i ];\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tconstructor: Path,\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = this.holes[ i ];\n\t\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = json.holes[ i ];\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\n\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\n\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\t_projScreenMatrix: new Matrix4(),\n\n\t\t_lightPositionWorld: new Vector3(),\n\n\t\t_lookTarget: new Vector3(),\n\n\t\tgetViewportCount: function () {\n\n\t\t\treturn this._viewportCount;\n\n\t\t},\n\n\t\tgetFrustum: function () {\n\n\t\t\treturn this._frustum;\n\n\t\t},\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar shadowCamera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\tshadowCamera.lookAt( lookTarget );\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t\tshadowMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t},\n\n\t\tgetViewport: function ( viewportIndex ) {\n\n\t\t\treturn this._viewports[ viewportIndex ];\n\n\t\t},\n\n\t\tgetFrameExtents: function () {\n\n\t\t\treturn this._frameExtents;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction PointLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: PointLightShadow,\n\n\t\tisPointLightShadow: true,\n\n\t\tupdateMatrices: function ( light, viewportIndex ) {\n\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\n\n\t\t\tvar camera = this.camera,\n\t\t\t\tshadowMatrix = this.matrix,\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\n\t\t\t\tlookTarget = this._lookTarget,\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\n\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\tcamera.position.copy( lightPositionWorld );\n\n\t\t\tlookTarget.copy( camera.position );\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\t\tcamera.lookAt( lookTarget );\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\n\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\tthis._frustum.setFromProjectionMatrix( projScreenMatrix );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\n\t\tthis.right = ( right !== undefined ) ? right : 1;\n\t\tthis.top = ( top !== undefined ) ? top : 1;\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow() {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow,\n\n\t\tisDirectionalLightShadow: true,\n\n\t\tupdateMatrices: function ( light ) {\n\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t}\n\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.textures = {};\n\n\t}\n\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: MaterialLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\n\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\n\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\n\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\n\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\n\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\n\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\n\n\t\t\tif ( json.vertexTangents !== undefined ) { material.vertexTangents = json.vertexTangents; }\n\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\n\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\n\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\n\n\t\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Shader Material\n\n\t\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\n\n\t\t\tif ( json.extensions !== undefined ) {\n\n\t\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\n\n\t\t\tif ( json.alphaMap !== undefined ) { material.alphaMap = getTexture( json.alphaMap ); }\n\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\n\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\n\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\n\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\n\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\n\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\n\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\n\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\n\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\n\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\n\n\t\t\tif ( json.clearcoatMap !== undefined ) { material.clearcoatMap = getTexture( json.clearcoatMap ); }\n\t\t\tif ( json.clearcoatRoughnessMap !== undefined ) { material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap ); }\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tvar LoaderUtils = {\n\n\t\tdecodeText: function ( array ) {\n\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\t\treturn new TextDecoder().decode( array );\n\n\t\t\t}\n\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t\t} catch ( e ) { // see #16358\n\n\t\t\t\treturn s;\n\n\t\t\t}\n\n\t\t},\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar index = url.lastIndexOf( '/' );\n\n\t\t\tif ( index === - 1 ) { return './'; }\n\n\t\t\treturn url.substr( 0, index + 1 );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\t\tdata.maxInstancedCount = this.maxInstancedCount;\n\n\t\t\tdata.isInstancedBufferGeometry = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\n\n\t\tif ( typeof ( normalized ) === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ()\t{\n\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\n\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\t\tdata.isInstancedBufferAttribute = true;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: BufferGeometryLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( scope.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tvar bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif ( morphAttributes ) {\n\n\t\t\t\tfor ( var key in morphAttributes ) {\n\n\t\t\t\t\tvar attributeArray = morphAttributes[ key ];\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar attribute = attributeArray[ i ];\n\t\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\t\t\tvar bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\t\t\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\n\t\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\tif ( json.name ) { geometry.name = json.name; }\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ObjectLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar shapes = this.parseShape( json.shapes );\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseShape: function ( json ) {\n\n\t\t\tvar shapes = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t},\n\n\t\tparseGeometries: function ( json, shapes ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.closed\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.' );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar cache = {}; // MultiMaterial\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\n\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\n\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// load single image\n\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\n\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\n\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\n\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\n\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\n\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) { return undefined; }\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\n\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\t/**\n\t * @author thespite / http://clicktorelease.com/\n\t */\n\n\n\tfunction ImageBitmapLoader( manager ) {\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.options = undefined;\n\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: ImageBitmapLoader,\n\n\t\tsetOptions: function setOptions( options ) {\n\n\t\t\tthis.options = options;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) { url = ''; }\n\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tfetch( url ).then( function ( res ) {\n\n\t\t\t\treturn res.blob();\n\n\t\t\t} ).then( function ( blob ) {\n\n\t\t\t\tif ( scope.options === undefined ) {\n\n\t\t\t\t\t// Workaround for FireFox. It causes an error if you pass options.\n\t\t\t\t\treturn createImageBitmap( blob );\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t\t}\n\n\t\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\t\tCache.add( url, imageBitmap );\n\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} ).catch( function ( e ) {\n\n\t\t\t\tif ( onError ) { onError( e ); }\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) { return []; }\n\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\t{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size ) {\n\n\t\t\tif ( size === undefined ) { size = 100; }\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths( text, size, this.data );\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction createPaths( text, size, data ) {\n\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // workaround for IE11, see #13988\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\tvar paths = [];\n\n\t\tvar offsetX = 0, offsetY = 0;\n\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\tvar char = chars[ i ];\n\n\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\n\t\t\t} else {\n\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn paths;\n\n\t}\n\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) {\n\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar path = new ShapePath();\n\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif ( glyph.o ) {\n\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: FontLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( _context === undefined ) {\n\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn _context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\t_context = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t}\n\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: AudioLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Primary reference:\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\n\t// 3-band SH defined by 9 coefficients\n\n\tfunction SphericalHarmonics3() {\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tObject.assign( SphericalHarmonics3.prototype, {\n\n\t\tisSphericalHarmonics3: true,\n\n\t\tset: function ( coefficients ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tzero: function () {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\tgetAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t\t// band 1\n\t\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\tgetIrradianceAt: function ( normal, target ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\tvar coeff = this.coefficients;\n\n\t\t\t// band 0\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t\t// band 1\n\t\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t\t// band 2\n\t\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tadd: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledSH: function ( sh, s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( s ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( sh, alpha ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sh ) {\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tcopy: function ( sh ) {\n\n\t\t\treturn this.set( sh.coefficients );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) { array = []; }\n\t\t\tif ( offset === undefined ) { offset = 0; }\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( SphericalHarmonics3, {\n\n\t\t// evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\tgetBasisAt: function ( normal, shBasis ) {\n\n\t\t\t// normal is assumed to be unit length\n\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\n\n\t\t\t// band 0\n\t\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t\t// band 1\n\t\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t\t// band 2\n\t\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * A LightProbe is a source of indirect-diffuse light\n\t */\n\n\tfunction LightProbe( sh, intensity ) {\n\n\t\tLight.call( this, undefined, intensity );\n\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\n\n\t}\n\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: LightProbe,\n\n\t\tisLightProbe: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.sh.copy( source.sh );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( skyColor );\n\t\tvar color2 = new Color().set( groundColor );\n\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tvar c0 = Math.sqrt( Math.PI );\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: HemisphereLightProbe,\n\n\t\tisHemisphereLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying colors not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction AmbientLightProbe( color, intensity ) {\n\n\t\tLightProbe.call( this, undefined, intensity );\n\n\t\tvar color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\n\n\t\tconstructor: AmbientLightProbe,\n\n\t\tisAmbientLightProbe: true,\n\n\t\tcopy: function ( source ) { // modifying color not currently supported\n\n\t\t\tLightProbe.prototype.copy.call( this, source );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\n\n\t\t\t// data.sh = this.sh.toArray(); // todo\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\tvar _eyeRight = new Matrix4();\n\tvar _eyeLeft = new Matrix4();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: function ( camera ) {\n\n\t\t\tvar cache = this._cache;\n\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t// translate xOffset\n\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t\t// for left eye\n\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t// for right eye\n\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$2 = new Vector3();\n\tvar _quaternion$3 = new Quaternion();\n\tvar _scale$1 = new Vector3();\n\tvar _orientation = new Vector3();\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\n\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\n\n\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t// code path for Chrome (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._pausedAt = 0;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaElementSource: function ( mediaElement ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaStreamSource: function ( mediaStream ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) { this.play(); }\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function ( delay ) {\n\n\t\t\tif ( delay === undefined ) { delay = 0; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.start( this._startedAt, this._pausedAt + this.offset, this.duration );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\tthis.setDetune( this.detune );\n\t\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis._pausedAt += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._pausedAt = 0;\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) { value = []; }\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDetune: function ( value ) {\n\n\t\t\tthis.detune = value;\n\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDetune: function () {\n\n\t\t\treturn this.detune;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopStart: function ( value ) {\n\n\t\t\tthis.loopStart = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoopEnd: function ( value ) {\n\n\t\t\tthis.loopEnd = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _position$3 = new Vector3();\n\tvar _quaternion$4 = new Quaternion();\n\tvar _scale$2 = new Vector3();\n\tvar _orientation$1 = new Vector3();\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\n\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\n\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif ( panner.positionX ) {\n\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\n\t\t\t} else {\n\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tbufferType = Array;\n\t\t\t\tmixFunction = this._select;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n\t// Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n\t// Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\n\tvar _trackRe = new RegExp( ''\n\t\t+ '^'\n\t\t+ _directoryRe\n\t\t+ _nodeRe\n\t\t+ _objectRe\n\t\t+ _propertyRe\n\t\t+ '$'\n\t);\n\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function ( name ) {\n\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t\t},\n\n\t\tparseTrackName: function ( trackName ) {\n\n\t\t\tvar matches = _trackRe.exec( trackName );\n\n\t\t\tif ( ! matches ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t};\n\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t}\n\n\t\t\treturn results;\n\n\t\t},\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) { return result; }\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t// DECLARE ALIAS AFTER assign prototype\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *  - Add objects you would otherwise pass as 'root' to the\n\t *    constructor or the .clipAction method of AnimationMixer.\n\t *\n\t *  - Instead pass this object as 'root'.\n\t *\n\t *  - You can also add and remove objects later when the mixer\n\t *    is running.\n\t *\n\t * Note:\n\t *\n\t *    Objects of this class appear as one object to the mixer,\n\t *    so cache control of the individual objects must be done\n\t *    on the group.\n\t *\n\t * Limitation:\n\t *\n\t *  - The animated properties must be compatible among the\n\t *    all objects in the group.\n\t *\n\t *  - A single property can either be controlled through a\n\t *    target group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length,\n\t\t\t\tknownObject = undefined;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function () {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function () {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0; // restart clip\n\t\t\tthis._loopCount = - 1;// forget previous loops\n\t\t\tthis._startTime = null;// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function () {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function () {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function ( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function ( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function ( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function () {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif ( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function () {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function () {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function ( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function ( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function ( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function () {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function () {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function () {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function () {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function ( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function ( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function ( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar loopCount = this._loopCount;\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( deltaTime === 0 ) {\n\n\t\t\t\tif ( loopCount === - 1 ) { return time; }\n\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t\t}\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\n\t\t\t\t\t\telse { this.enabled = false; }\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\n\t\t\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: AnimationMixer,\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) { return null; }\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Allows you to seek to a specific time in an animation.\n\t\tsetTime: function ( timeInSeconds ) {\n\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t\t}\n\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\t\tobject.raycast( raycaster, intersects );\n\n\t\t}\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\t\tthis.camera = camera;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function () {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\t\tthis.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _vector$7 = new Vector2();\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function ( center, size ) {\n\n\t\t\tvar halfSize = _vector$7.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\tvar clampedPoint = _vector$7.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t},\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar _startP = new Vector3();\n\tvar _startEnd = new Vector3();\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function ( point, clampToLine ) {\n\n\t\t\t_startP.subVectors( point, this.start );\n\t\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = _startEnd.dot( _startEnd );\n\t\t\tvar startEnd_startP = _startEnd.dot( _startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = MathUtils.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _vector$8 = new Vector3();\n\n\tfunction SpotLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$8.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$8 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$9 = new Vector3();\n\tvar _boneMatrix = new Matrix4();\n\tvar _matrixWorldInv = new Matrix4();\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.isSkeletonHelper = true;\n\n\tSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar bones = this.bones;\n\n\t\tvar geometry = this.geometry;\n\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$9.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tvar _vector$a = new Vector3();\n\tvar _color1 = new Color();\n\tvar _color2 = new Color();\n\n\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) { this.material.vertexColors = true; }\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$a.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\n\n\t\tconstructor: GridHelper,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\t\tthis.geometry.copy( source.geometry );\n\t\t\tthis.material.copy( source.material );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar x, z;\n\t\tvar v, i, j, r, color;\n\n\t\t// create the radials\n\n\t\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * radius;\n\t\t\tz = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tr = radius - ( radius / circles * i );\n\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tvar _v1$5 = new Vector3();\n\tvar _v2$3 = new Vector3();\n\tvar _v3$1 = new Vector3();\n\n\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) { size = 1; }\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\t_v1$5.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3$1.subVectors( _v2$3, _v1$5 );\n\n\t\tthis.lightPlane.lookAt( _v2$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2$3 );\n\t\tthis.targetLine.scale.z = _v3$1.length();\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tvar _vector$b = new Vector3();\n\tvar _camera = new Camera();\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry = this.geometry;\n\t\tvar pointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t};\n\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t\t_vector$b.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tposition.setXYZ( points[ i ], _vector$b.x, _vector$b.y, _vector$b.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tvar _box$3 = new Box3();\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = function ( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box$3.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box$3.isEmpty() ) { return; }\n\n\t\tvar min = _box$3.min;\n\t\tvar max = _box$3.max;\n\n\t\t/*\n\t\t  5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tvar position = this.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\n\t};\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.copy = function ( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t};\n\n\tBoxHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3Helper( box, color ) {\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.box = box;\n\n\t\tcolor = color || 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\tBox3Helper.prototype.constructor = Box3Helper;\n\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar box = this.box;\n\n\t\tif ( box.isEmpty() ) { return; }\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tPlaneHelper.prototype = Object.create( Line.prototype );\n\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar _axis = new Vector3();\n\tvar _lineGeometry, _coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\n\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\n\t\tif ( length === undefined ) { length = 1; }\n\t\tif ( color === undefined ) { color = 0xffff00; }\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = function ( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tvar radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t};\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t};\n\n\tArrowHelper.prototype.copy = function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t};\n\n\tArrowHelper.prototype.clone = function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxesHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\tAxesHelper.prototype.constructor = AxesHelper;\n\n\t/**\n\t * @author Emmett Lalish / elalish\n\t *\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow( 2, LOD_MAX );\n\t// The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\tvar EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\t// The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\tvar MAX_SAMPLES = 20;\n\tvar ENCODINGS = {};\n\tENCODINGS[ LinearEncoding ] = 0;\n\tENCODINGS[ sRGBEncoding ] = 1;\n\tENCODINGS[ RGBEEncoding ] = 2;\n\tENCODINGS[ RGBM7Encoding ] = 3;\n\tENCODINGS[ RGBM16Encoding ] = 4;\n\tENCODINGS[ RGBDEncoding ] = 5;\n\tENCODINGS[ GammaEncoding ] = 6;\n\n\tvar _flatCamera = new OrthographicCamera();\n\tvar _blurMaterial = _getBlurShader( MAX_SAMPLES );\n\tvar _equirectShader = null;\n\tvar _cubemapShader = null;\n\n\tvar ref = _createPlanes();\n\tvar _lodPlanes = ref._lodPlanes;\n\tvar _sizeLods = ref._sizeLods;\n\tvar _sigmas = ref._sigmas;\n\tvar _pingPongRenderTarget = null;\n\tvar _renderer = null;\n\n\tvar _oldTarget = null;\n\n\t// Golden Ratio\n\tvar PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar INV_PHI = 1 / PHI;\n\t// Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\tvar _axisDirections = [\n\t\tnew Vector3( 1, 1, 1 ),\n\t\tnew Vector3( - 1, 1, 1 ),\n\t\tnew Vector3( 1, 1, - 1 ),\n\t\tnew Vector3( - 1, 1, - 1 ),\n\t\tnew Vector3( 0, PHI, INV_PHI ),\n\t\tnew Vector3( 0, PHI, - INV_PHI ),\n\t\tnew Vector3( INV_PHI, 0, PHI ),\n\t\tnew Vector3( - INV_PHI, 0, PHI ),\n\t\tnew Vector3( PHI, INV_PHI, 0 ),\n\t\tnew Vector3( - PHI, INV_PHI, 0 ) ];\n\n\tfunction PMREMGenerator( renderer ) {\n\n\t\t_renderer = renderer;\n\t\t_compileMaterial( _blurMaterial );\n\n\t}\n\n\tPMREMGenerator.prototype = {\n\n\t\tconstructor: PMREMGenerator,\n\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\t\tfromScene: function ( scene, sigma, near, far ) {\n\t\t\tif ( sigma === void 0 ) sigma = 0;\n\t\t\tif ( near === void 0 ) near = 0.1;\n\t\t\tif ( far === void 0 ) far = 100;\n\n\n\t\t\t_oldTarget = _renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = _allocateTargets();\n\t\t\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\t\t\tif ( sigma > 0 ) {\n\n\t\t\t\t_blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t\t}\n\t\t\t_applyPMREM( cubeUVRenderTarget );\n\t\t\t_cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromEquirectangular: function ( equirectangular ) {\n\n\t\t\tequirectangular.magFilter = NearestFilter;\n\t\t\tequirectangular.minFilter = NearestFilter;\n\t\t\tequirectangular.generateMipmaps = false;\n\n\t\t\treturn this.fromCubemap( equirectangular );\n\n\t\t},\n\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\tfromCubemap: function ( cubemap ) {\n\n\t\t\t_oldTarget = _renderer.getRenderTarget();\n\t\t\tvar cubeUVRenderTarget = _allocateTargets( cubemap );\n\t\t\t_textureToCubeUV( cubemap, cubeUVRenderTarget );\n\t\t\t_applyPMREM( cubeUVRenderTarget );\n\t\t\t_cleanup( cubeUVRenderTarget );\n\n\t\t\treturn cubeUVRenderTarget;\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileCubemapShader: function () {\n\n\t\t\tif ( _cubemapShader == null ) {\n\n\t\t\t\t_cubemapShader = _getCubemapShader();\n\t\t\t\t_compileMaterial( _cubemapShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\tcompileEquirectangularShader: function () {\n\n\t\t\tif ( _equirectShader == null ) {\n\n\t\t\t\t_equirectShader = _getEquirectShader();\n\t\t\t\t_compileMaterial( _equirectShader );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\tdispose: function () {\n\n\t\t\t_blurMaterial.dispose();\n\n\t\t\tif ( _cubemapShader != null ) { _cubemapShader.dispose(); }\n\t\t\tif ( _equirectShader != null ) { _equirectShader.dispose(); }\n\n\t\t\tfor ( var i = 0; i < _lodPlanes.length; i ++ ) {\n\n\t\t\t\t_lodPlanes[ i ].dispose();\n\n\t\t\t}\n\n\t\t},\n\n\t};\n\n\tfunction _createPlanes() {\n\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\n\t\tvar lod = LOD_MAX;\n\t\tfor ( var i = 0; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sizeLod = Math.pow( 2, lod );\n\t\t\t_sizeLods.push( sizeLod );\n\t\t\tvar sigma = 1.0 / sizeLod;\n\t\t\tif ( i > LOD_MAX - LOD_MIN ) {\n\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];\n\n\t\t\t} else if ( i == 0 ) {\n\n\t\t\t\tsigma = 0;\n\n\t\t\t}\n\t\t\t_sigmas.push( sigma );\n\n\t\t\tvar texelSize = 1.0 / ( sizeLod - 1 );\n\t\t\tvar min = - texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\n\t\t\tvar position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\t\tvar uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\t\tvar faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\t\tfor ( var face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\t\tvar x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : - 1;\n\t\t\t\tvar coordinates = [\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y, 0,\n\t\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\t\tx, y + 1, 0\n\t\t\t\t];\n\t\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\t\tvar fill = [ face, face, face, face, face, face ];\n\t\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t\t}\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\t\t_lodPlanes.push( planes );\n\n\t\t\tif ( lod > LOD_MIN ) {\n\n\t\t\t\tlod --;\n\n\t\t\t}\n\n\t\t}\n\t\treturn { _lodPlanes: _lodPlanes, _sizeLods: _sizeLods, _sigmas: _sigmas };\n\n\t}\n\n\tfunction _allocateTargets( equirectangular ) {\n\n\t\tvar params = {\n\t\t\tmagFilter: NearestFilter,\n\t\t\tminFilter: NearestFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: equirectangular ? equirectangular.type : UnsignedByteType,\n\t\t\tformat: equirectangular ? equirectangular.format : RGBEFormat,\n\t\t\tencoding: equirectangular ? equirectangular.encoding : RGBEEncoding,\n\t\t\tdepthBuffer: false,\n\t\t\tstencilBuffer: false\n\t\t};\n\t\tvar cubeUVRenderTarget = _createRenderTarget( params );\n\t\tcubeUVRenderTarget.depthBuffer = equirectangular ? false : true;\n\t\t_pingPongRenderTarget = _createRenderTarget( params );\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _cleanup( outputTarget ) {\n\n\t\t_pingPongRenderTarget.dispose();\n\t\t_renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t// reset viewport and scissor\n\t\toutputTarget.setSize( outputTarget.width, outputTarget.height );\n\n\t}\n\n\tfunction _sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tvar fov = 90;\n\t\tvar aspect = 1;\n\t\tvar cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tvar upSign = [ 1, 1, 1, 1, - 1, 1 ];\n\t\tvar forwardSign = [ 1, 1, - 1, - 1, - 1, 1 ];\n\n\t\tvar outputEncoding = _renderer.outputEncoding;\n\t\tvar toneMapping = _renderer.toneMapping;\n\t\tvar toneMappingExposure = _renderer.toneMappingExposure;\n\t\tvar clearColor = _renderer.getClearColor();\n\t\tvar clearAlpha = _renderer.getClearAlpha();\n\n\t\t_renderer.toneMapping = LinearToneMapping;\n\t\t_renderer.toneMappingExposure = 1.0;\n\t\t_renderer.outputEncoding = LinearEncoding;\n\t\tscene.scale.z *= - 1;\n\n\t\tvar background = scene.background;\n\t\tif ( background && background.isColor ) {\n\n\t\t\tbackground.convertSRGBToLinear();\n\t\t\t// Convert linear to RGBE\n\t\t\tvar maxComponent = Math.max( background.r, background.g, background.b );\n\t\t\tvar fExp = Math.min( Math.max( Math.ceil( Math.log2( maxComponent ) ), - 128.0 ), 127.0 );\n\t\t\tbackground = background.multiplyScalar( Math.pow( 2.0, - fExp ) );\n\t\t\tvar alpha = ( fExp + 128.0 ) / 255.0;\n\t\t\t_renderer.setClearColor( background, alpha );\n\t\t\tscene.background = null;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar col = i % 3;\n\t\t\tif ( col == 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col == 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\t\t\t_setViewport( cubeUVRenderTarget,\n\t\t\t\tcol * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );\n\t\t\t_renderer.setRenderTarget( cubeUVRenderTarget );\n\t\t\t_renderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\t_renderer.toneMapping = toneMapping;\n\t\t_renderer.toneMappingExposure = toneMappingExposure;\n\t\t_renderer.outputEncoding = outputEncoding;\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\n\t\tscene.scale.z *= - 1;\n\n\t}\n\n\tfunction _textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tvar scene = new Scene();\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tif ( _cubemapShader == null ) {\n\n\t\t\t\t_cubemapShader = _getCubemapShader();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( _equirectShader == null ) {\n\n\t\t\t\t_equirectShader = _getEquirectShader();\n\n\t\t\t}\n\n\t\t}\n\t\tvar material = texture.isCubeTexture ? _cubemapShader : _equirectShader;\n\t\tscene.add( new Mesh( _lodPlanes[ 0 ], material ) );\n\t\tvar uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\t\tif ( ! texture.isCubeTexture ) {\n\n\t\t\tuniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );\n\n\t\t}\n\t\tuniforms[ 'inputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\t\tuniforms[ 'outputEncoding' ].value = ENCODINGS[ texture.encoding ];\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );\n\t\t_renderer.setRenderTarget( cubeUVRenderTarget );\n\t\t_renderer.render( scene, _flatCamera );\n\n\t}\n\n\tfunction _compileMaterial( material ) {\n\n\t\tvar tmpScene = new Scene();\n\t\ttmpScene.add( new Mesh( _lodPlanes[ 0 ], material ) );\n\t\t_renderer.compile( tmpScene, _flatCamera );\n\n\t}\n\n\tfunction _createRenderTarget( params ) {\n\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\tfunction _setViewport( target, x, y, width, height ) {\n\n\t\ttarget.viewport.set( x, y, width, height );\n\t\ttarget.scissor.set( x, y, width, height );\n\n\t}\n\n\tfunction _applyPMREM( cubeUVRenderTarget ) {\n\n\t\tvar autoClear = _renderer.autoClear;\n\t\t_renderer.autoClear = false;\n\n\t\tfor ( var i = 1; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tvar sigma = Math.sqrt(\n\t\t\t\t_sigmas[ i ] * _sigmas[ i ] -\n\t\t\t_sigmas[ i - 1 ] * _sigmas[ i - 1 ] );\n\t\t\tvar poleAxis =\n\t\t\t_axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\t\t\t_blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\t_renderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\tfunction _blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\t_halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\t_pingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\t_halfBlur(\n\t\t\t_pingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\tfunction _halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tvar STANDARD_DEVIATIONS = 3;\n\n\t\tvar blurScene = new Scene();\n\t\tblurScene.add( new Mesh( _lodPlanes[ lodOut ], _blurMaterial ) );\n\t\tvar blurUniforms = _blurMaterial.uniforms;\n\n\t\tvar pixels = _sizeLods[ lodIn ] - 1;\n\t\tvar radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tvar samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( (\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES) );\n\n\t\t}\n\n\t\tvar weights = [];\n\t\tvar sum = 0;\n\n\t\tfor ( var i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tvar x = i / sigmaPixels;\n\t\t\tvar weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i == 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;\n\t\tblurUniforms[ 'inputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\t\tblurUniforms[ 'outputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];\n\n\t\tvar outputSize = _sizeLods[ lodOut ];\n\t\tvar x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );\n\t\tvar y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) +\n\t\t2 * outputSize *\n\t\t\t( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\t_renderer.setRenderTarget( targetOut );\n\t\t_renderer.render( blurScene, _flatCamera );\n\n\t}\n\n\tfunction _getBlurShader( maxSamples ) {\n\n\t\tvar weights = new Float32Array( maxSamples );\n\t\tvar poleAxis = new Vector3( 0, 1, 0 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tdefines: { 'n': maxSamples },\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'samples': { value: 1 },\n\t\t\t\t'weights': { value: weights },\n\t\t\t\t'latitudinal': { value: false },\n\t\t\t\t'dTheta': { value: 0 },\n\t\t\t\t'mipInt': { value: 0 },\n\t\t\t\t'poleAxis': { value: poleAxis },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform int samples;\\nuniform float weights[n];\\nuniform bool latitudinal;\\nuniform float dTheta;\\nuniform float mipInt;\\nuniform vec3 poleAxis;\\n\\n\" + (_getEncodings()) + \"\\n\\n#define ENVMAP_TYPE_CUBE_UV\\n#include <cube_uv_reflection_fragment>\\n\\nvec3 getSample(float theta, vec3 axis) {\\n\\tfloat cosTheta = cos(theta);\\n\\t// Rodrigues' axis-angle rotation\\n\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t+ cross(axis, vOutputDirection) * sin(theta)\\n\\t\\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\\n\\treturn bilinearCubeUV(envMap, sampleDirection, mipInt);\\n}\\n\\nvoid main() {\\n\\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\\n\\tif (all(equal(axis, vec3(0.0))))\\n\\t\\taxis = vec3(vOutputDirection.z, 0.0, - vOutputDirection.x);\\n\\taxis = normalize(axis);\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb += weights[0] * getSample(0.0, axis);\\n\\tfor (int i = 1; i < n; i++) {\\n\\t\\tif (i >= samples)\\n\\t\\t\\tbreak;\\n\\t\\tfloat theta = dTheta * float(i);\\n\\t\\tgl_FragColor.rgb += weights[i] * getSample(-1.0 * theta, axis);\\n\\t\\tgl_FragColor.rgb += weights[i] * getSample(theta, axis);\\n\\t}\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'SphericalGaussianBlur';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getEquirectShader() {\n\n\t\tvar texelSize = new Vector2( 1, 1 );\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'texelSize': { value: texelSize },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform sampler2D envMap;\\nuniform vec2 texelSize;\\n\\n\" + (_getEncodings()) + \"\\n\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tvec3 outputDirection = normalize(vOutputDirection);\\n\\tvec2 uv;\\n\\tuv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\\n\\tuv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\\n\\tvec2 f = fract(uv / texelSize - 0.5);\\n\\tuv -= f * texelSize;\\n\\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x += texelSize.x;\\n\\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.y += texelSize.y;\\n\\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tuv.x -= texelSize.x;\\n\\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\\n\\tvec3 tm = mix(tl, tr, f.x);\\n\\tvec3 bm = mix(bl, br, f.x);\\n\\tgl_FragColor.rgb = mix(tm, bm, f.y);\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'EquirectangularToCubeUV';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCubemapShader() {\n\n\t\tvar shaderMaterial = new RawShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'envMap': { value: null },\n\t\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t\t},\n\n\t\t\tvertexShader: _getCommonVertexShader(),\n\n\t\t\tfragmentShader: (\"\\nprecision mediump float;\\nprecision mediump int;\\nvarying vec3 vOutputDirection;\\nuniform samplerCube envMap;\\n\\n\" + (_getEncodings()) + \"\\n\\nvoid main() {\\n\\tgl_FragColor = vec4(0.0);\\n\\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\\n\\tgl_FragColor = linearToOutputTexel(gl_FragColor);\\n}\\n\\t\\t\"),\n\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\n\t\t} );\n\n\t\tshaderMaterial.type = 'CubemapToCubeUV';\n\n\t\treturn shaderMaterial;\n\n\t}\n\n\tfunction _getCommonVertexShader() {\n\n\t\treturn \"\\nprecision mediump float;\\nprecision mediump int;\\nattribute vec3 position;\\nattribute vec2 uv;\\nattribute float faceIndex;\\nvarying vec3 vOutputDirection;\\nvec3 getDirection(vec2 uv, float face) {\\n\\tuv = 2.0 * uv - 1.0;\\n\\tvec3 direction = vec3(uv, 1.0);\\n\\tif (face == 0.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.z *= -1.0;\\n\\t} else if (face == 1.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.z *= -1.0;\\n\\t} else if (face == 3.0) {\\n\\t\\tdirection = direction.zyx;\\n\\t\\tdirection.x *= -1.0;\\n\\t} else if (face == 4.0) {\\n\\t\\tdirection = direction.xzy;\\n\\t\\tdirection.y *= -1.0;\\n\\t} else if (face == 5.0) {\\n\\t\\tdirection.xz *= -1.0;\\n\\t}\\n\\treturn direction;\\n}\\nvoid main() {\\n\\tvOutputDirection = getDirection(uv, faceIndex);\\n\\tgl_Position = vec4( position, 1.0 );\\n}\\n\\t\";\n\n\t}\n\n\tfunction _getEncodings() {\n\n\t\treturn \"\\nuniform int inputEncoding;\\nuniform int outputEncoding;\\n\\n#include <encodings_pars_fragment>\\n\\nvec4 inputTexelToLinear(vec4 value){\\n\\tif(inputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(inputEncoding == 1){\\n\\t\\treturn sRGBToLinear(value);\\n\\t}else if(inputEncoding == 2){\\n\\t\\treturn RGBEToLinear(value);\\n\\t}else if(inputEncoding == 3){\\n\\t\\treturn RGBMToLinear(value, 7.0);\\n\\t}else if(inputEncoding == 4){\\n\\t\\treturn RGBMToLinear(value, 16.0);\\n\\t}else if(inputEncoding == 5){\\n\\t\\treturn RGBDToLinear(value, 256.0);\\n\\t}else{\\n\\t\\treturn GammaToLinear(value, 2.2);\\n\\t}\\n}\\n\\nvec4 linearToOutputTexel(vec4 value){\\n\\tif(outputEncoding == 0){\\n\\t\\treturn value;\\n\\t}else if(outputEncoding == 1){\\n\\t\\treturn LinearTosRGB(value);\\n\\t}else if(outputEncoding == 2){\\n\\t\\treturn LinearToRGBE(value);\\n\\t}else if(outputEncoding == 3){\\n\\t\\treturn LinearToRGBM(value, 7.0);\\n\\t}else if(outputEncoding == 4){\\n\\t\\treturn LinearToRGBM(value, 16.0);\\n\\t}else if(outputEncoding == 5){\\n\\t\\treturn LinearToRGBD(value, 256.0);\\n\\t}else{\\n\\t\\treturn LinearToGamma(value, 2.2);\\n\\t}\\n}\\n\\nvec4 envMapTexelToLinear(vec4 color) {\\n\\treturn inputTexelToLinear(color);\\n}\\n\\t\";\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\tvar LinePieces = 1;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) { materials = []; }\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\treturn this.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tObject.assign( Loader.prototype, {\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t} );\n\n\tLoader.Handlers = {\n\n\t\tadd: function ( /* regex, loader */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t\t},\n\n\t\tget: function ( /* file */ ) {\n\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t\t}\n\n\t};\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\t\treturn this.setResourcePath( value );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tFrustum.prototype.setFromMatrix = function ( m ) {\n\n\t\tconsole.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n\t\treturn this.setFromProjectionMatrix( m );\n\n\t};\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( MathUtils, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn MathUtils.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn MathUtils.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix3( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n\t\t},\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBufferAttribute: function ( attribute ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n\t\t\treturn attribute.applyMatrix4( this );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tarea: function () {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\t\treturn this.getArea();\n\n\t\t},\n\t\tbarycoordFromPoint: function ( point, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn this.getBarycoord( point, target );\n\n\t\t},\n\t\tmidpoint: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\t\treturn this.getMidpoint( target );\n\n\t\t},\n\t\tnormal: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn this.getNormal( target );\n\n\t\t},\n\t\tplane: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\t\treturn this.getPlane( target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle, {\n\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t\t},\n\t\tnormal: function ( a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Geometry.prototype, {\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeLineDistances: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t},\n\t\tgetWorldRotation: function () {\n\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( Mesh.prototype, {\n\n\t\tsetDrawMode: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t},\n\n\t} );\n\n\tObject.defineProperties( Mesh.prototype, {\n\n\t\tdrawMode: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n\t\t\t\treturn TrianglesDrawMode;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tSkinnedMesh.prototype.initBones = function () {\n\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n\t};\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\treturn this.setAttribute( name, attribute );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t},\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\t\t\treturn this.deleteAttribute( name );\n\n\t\t},\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\t\treturn this.applyMatrix4( matrix );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Raycaster.prototype, {\n\n\t\tlinePrecision: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );\n\t\t\t\treturn this.params.Line.threshold;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );\n\t\t\t\tthis.params.Line.threshold = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( InterleavedBuffer.prototype, {\n\n\t\tdynamic: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\n\t\t\t\tthis.setUsage( value );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\t\t\treturn this;\n\n\t\t},\n\t\tsetArray: function ( /* array */ ) {\n\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n\t\t}\n\t} );\n\n\t//\n\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\t\tgetArrays: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t\t},\n\n\t\taddShapeList: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t\t},\n\n\t\taddShape: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\toverdraw: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t\t}\n\t\t},\n\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t},\n\n\t\tstencilMask: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\treturn this.stencilFuncMask;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\t\tthis.stencilFuncMask = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t},\n\t\tanimate: function ( callback ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\t\tthis.setAnimationLoop( callback );\n\n\t\t},\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t},\n\t\tsetFaceCulling: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t\t},\n\t\tallocTextureUnit: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n\t\t},\n\t\tsetTexture: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n\t\t},\n\t\tsetTexture2D: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n\t\t},\n\t\tsetTextureCube: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n\t\t},\n\t\tgetActiveMipMapLevel: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\t\t\treturn this.getActiveMipmapLevel();\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\t\treturn this.getContext();\n\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n\t\t\t\treturn this.xr;\n\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\t\tthis.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* cullFace */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );\n\t\treturn new WebGLCubeRenderTarget( width, options );\n\n\t}\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Audio.prototype, {\n\n\t\tload: {\n\t\t\tvalue: function ( file ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\t\t\tscope.setBuffer( buffer );\n\n\t\t\t\t} );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) { texture.mapping = mapping; }\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n\t}\n\n\t//\n\n\tfunction JSONLoader() {\n\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n\t}\n\n\t//\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tattach: function ( /* child, scene, parent */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction LensFlare() {\n\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js' );\n\n\t}\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\t\trevision: REVISION,\n\t\t} } ) );\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeGeometry = BoxGeometry;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.Face3 = Face3;\n\texports.Face4 = Face4;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GammaEncoding = GammaEncoding;\n\texports.Geometry = Geometry;\n\texports.GeometryUtils = GeometryUtils;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.LightShadow = LightShadow;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.Spline = Spline;\n\texports.SplineCurve = SplineCurve;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\n    return exports;\n});\n\ndefine('skylark-threejs/main',[\r\n\t\"skylark-langx/skylark\",\r\n    \"./three\"\r\n], function(skylark,threejs) {\r\n    return skylark.attach(\"intg.threejs\",threejs);\r\n});\r\n\ndefine('skylark-threejs', ['skylark-threejs/main'], function (main) { return main; });\n\n"]}